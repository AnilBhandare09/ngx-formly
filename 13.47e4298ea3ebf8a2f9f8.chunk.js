webpackJsonp([13],{"2OgP":function(n,a){n.exports='<html><head></head><body><h1 id="custom-wrapper">Custom Wrapper</h1>\n<p>Custom wrappers allows you to wrap a field type with a component.</p>\n<h2 id="prebuilt-wrappers">Prebuilt Wrappers</h2>\n<p>ui-bootstrap</p>\n<ul>\n<li>label<ul>\n<li>Adds a label to field (Side)</li>\n</ul>\n</li>\n<li>description<ul>\n<li>Adds a small message to bellow field.</li>\n</ul>\n</li>\n<li>validation-message<ul>\n<li>Adds a small red message bellow field.</li>\n</ul>\n</li>\n<li>fieldset<ul>\n<li>Adds error div around fields.</li>\n</ul>\n</li>\n<li>addons</li>\n</ul>\n<p>ui-ionic</p>\n<ul>\n<li>form-field<ul>\n<li>Shows validation messages bellow field.</li>\n</ul>\n</li>\n</ul>\n<p>ui-kendo</p>\n<ul>\n<li>form-field<ul>\n<li>Shows validation messages and label for required.</li>\n</ul>\n</li>\n</ul>\n<p>ui-material</p>\n<ul>\n<li>form-field<ul>\n<li>Has label, shows validation messages, shows description, and label for required.</li>\n</ul>\n</li>\n</ul>\n<p>ui-primeng</p>\n<ul>\n<li>form-field<ul>\n<li>Has label, required and validation message.</li>\n</ul>\n</li>\n</ul>\n<h2 id="creating-a-custom-wrapper">Creating a Custom Wrapper</h2>\n<p>Creating a custom wrapper is easy, the following example shows how to create a panel wrapper around a field.</p>\n<p>See live demo: <a href="https://stackblitz.com/angular/dleylnmrbmd?file=app%2Fapp.component.ts">demo</a></p>\n<ol>\n<li><p>Defining the Custom Wrapper class and it&apos;s template:</p>\n<p>First you have to create a component representing the wrapper which extends <code class="language-js">FieldWrapper</code> class.</p>\n<pre><code class="language-typescript"><span class="token comment">// panel-wrapper.component.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> ViewChild<span class="token punctuation">,</span> ViewContainerRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FieldWrapper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/core&apos;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\nselector<span class="token punctuation">:</span> <span class="token string">&apos;formly-wrapper-panel&apos;</span><span class="token punctuation">,</span>\ntemplate<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`\n &lt;div class=&quot;card&quot;&gt;\n   &lt;h3 class=&quot;card-header&quot;&gt;Its time to party&lt;/h3&gt;\n   &lt;h3 class=&quot;card-header&quot;&gt;{{ to.label }}&lt;/h3&gt;\n   &lt;div class=&quot;card-body&quot;&gt;\n     &lt;ng-container #fieldComponent&gt;&lt;/ng-container&gt;\n   &lt;/div&gt;\n &lt;/div&gt;\n`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PanelWrapperComponent</span> <span class="token keyword">extends</span> <span class="token class-name">FieldWrapper</span> <span class="token punctuation">{</span>\n@<span class="token function">ViewChild</span><span class="token punctuation">(</span><span class="token string">&apos;fieldComponent&apos;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>read<span class="token punctuation">:</span> ViewContainerRef<span class="token punctuation">}</span><span class="token punctuation">)</span> fieldComponent<span class="token punctuation">:</span> ViewContainerRef<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code class="language-js">fieldComponent</code> is where the field is inserted.  (<code class="language-js"><span class="token operator">&lt;</span>ng<span class="token operator">-</span>container #fieldComponent<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ng<span class="token operator">-</span>container<span class="token operator">&gt;</span></code>)</p>\n<blockquote>\n<p>Note: <code class="language-js">FieldWrapper</code> component extends <code class="language-js">Field</code> therefor you can have multiple wrappers attached to one field.\nExample you can have both a label and validator wrapper.</p>\n</blockquote>\n</li>\n<li><p>Register the custom wrapper in <code class="language-js">NgModule</code> declaration:\nModule</p>\n<pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/common&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactiveFormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/forms&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FormlyModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FormlyBootstrapModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/bootstrap&apos;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PanelWrapperComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;./panel-wrapper.component&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;./app.component&apos;</span><span class="token punctuation">;</span>\n\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\nimports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n CommonModule<span class="token punctuation">,</span>\n ReactiveFormsModule<span class="token punctuation">,</span>\n FormlyBootstrapModule<span class="token punctuation">,</span>\n FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   wrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;panel&apos;</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> PanelWrapperComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\ndeclarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n AppComponent<span class="token punctuation">,</span>\n PanelWrapperComponent<span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre>\n<p><code class="language-js">wrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token operator">...</span> <span class="token punctuation">]</span></code> is where define what custom wrappers we want to inject into our module to use in our <code class="language-js">FormlyFieldConfig</code></p>\n</li>\n<li><p>Create a custom FormlyFieldConfig that uses that type.</p>\n<pre><code class="language-typescript">fields<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n<span class="token punctuation">{</span>\n key<span class="token punctuation">:</span> <span class="token string">&apos;address&apos;</span><span class="token punctuation">,</span>\n wrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&apos;panel&apos;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">&apos;Address&apos;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n fieldGroup<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n   key<span class="token punctuation">:</span> <span class="token string">&apos;town&apos;</span><span class="token punctuation">,</span>\n   <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n   templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n     required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n     <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;text&apos;</span><span class="token punctuation">,</span>\n     label<span class="token punctuation">:</span> <span class="token string">&apos;Town&apos;</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n</code></pre>\n<p><code class="language-js">wrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&apos;panel&apos;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code> is where FormlyFieldConfig assigns the field instance to use that panel.</p>\n</li>\n</ol>\n<h2 id="creating-default-wrappers-for-components">Creating default wrappers for components</h2>\n<p>Sometimes you always want a components with certain wrappers.</p>\n<pre><code class="language-typescript">  <span class="token operator">...</span> <span class="token comment">//Imports</span>\n  @<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      CommonModule<span class="token punctuation">,</span>\n      ReactiveFormsModule<span class="token punctuation">,</span>\n      FormlyBootstrapModule<span class="token punctuation">,</span>\n      FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        types<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">&apos;operator&apos;</span><span class="token punctuation">,</span>\n            component<span class="token punctuation">:</span> OperatorComponent<span class="token punctuation">,</span>\n            wrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&apos;fieldset&apos;</span><span class="token punctuation">,</span> <span class="token string">&apos;label&apos;</span><span class="token punctuation">]</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      AppComponent<span class="token punctuation">,</span>\n      OperatorComponent\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>You can do this by setting the <code class="language-js">wrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&apos;fieldset&apos;</span><span class="token punctuation">,</span> <span class="token string">&apos;label&apos;</span><span class="token punctuation">]</span></code> to that type in the module</p>\n</body></html>'},G0Au:function(n,a){n.exports='<html><head></head><body><h1 id="validation">Validation</h1>\n<h2 id="custom-validation">Custom Validation</h2>\n<p>Formly offers different methods to implement custom validations.</p>\n<h4 id="1-declaring-validation-function-and-message-within-ngmodule-declaration-">1. Declaring validation function and message within NgModule declaration.</h4>\n<h5 id="custom-validation-message">CUSTOM VALIDATION MESSAGE</h5>\n<p>To define a custom validation message, you need to add an object with two properties: <code class="language-js">name</code> and <code class="language-js">message</code>. You will include this object to the validationMessages array of the FormlyModule config:</p>\n<p>The message property could be simply a string or be defined as a function which receives the <em>error</em> and the <em>field</em> (FormlyFieldConfig) that was validated as input. The last one allows you more customization, like including the value, the  min or max value allowed, etc.</p>\n<p>The following code example shows how to include a new message &quot;ip&quot; with a function to generate the string message by using the formControl.value and a new message &quot;required&quot; as a simple string.</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IpValidatorMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> field<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>formControl<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is not a valid IP Address`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      validationMessages<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> IpValidatorMessage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;required&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&apos;This field is required&apos;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="custom-validation-function">CUSTOM VALIDATION FUNCTION</h5>\n<p>The validation function receives the <code class="language-js">FormControl</code> as input and it will return <code class="language-js"><span class="token keyword">null</span></code> if there is not error, and otherwise it will send an object which property is set as <code class="language-js"><span class="token boolean">true</span></code>.  The name of the property must be the same as the name set to the error message for this validation.</p>\n<p>The following code example shows a function to validate an IP. As can be seen, the object returned when there is an error has a property called &apos;ip&apos; which matches with the name of the custom validation message.</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IpValidator</span><span class="token punctuation">(</span>control<span class="token punctuation">:</span> FormControl<span class="token punctuation">)</span><span class="token punctuation">:</span> ValidationErrors <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token regex">/(\\d{1,3}\\.){3}\\d{1,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      validators<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span> validation<span class="token punctuation">:</span> IpValidator <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      validationMessages<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> IpValidatorMessage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;required&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&apos;This field is required&apos;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>ALERT!</strong> If your function is async, you need to include it within <code class="language-js">asyncValidators</code> property:</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ipAsyncValidator</span><span class="token punctuation">(</span>control<span class="token punctuation">:</span> FormControl<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/(\\d{1,3}\\.){3}\\d{1,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\nFormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  asyncValidators<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;ipAsync&apos;</span><span class="token punctuation">,</span> validation<span class="token punctuation">:</span> ipAsyncValidator <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="field-with-custom-validation">FIELD WITH CUSTOM VALIDATION</h5>\n<p>You just need to include the name of the validate function, declared in <code class="language-js">FormlyModule</code>, within the property <code class="language-js">validators<span class="token punctuation">.</span>validation</code>.</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation declared in ngModule)&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  validators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    validation<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&apos;ip&apos;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p><strong>ALERT!</strong> If the function is async, you need to include it within <code class="language-js">asyncValidators<span class="token punctuation">.</span>validation</code> property:</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation declared in ngModule)&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  asyncValidators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    validation<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&apos;ipAsync&apos;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h4 id="2-declaring-validation-function-within-field-definition-">2. Declaring validation function within field definition.</h4>\n<h5 id="custom-validation-message">CUSTOM VALIDATION MESSAGE</h5>\n<p>[As the case above]</p>\n<h5 id="custom-validation-function">CUSTOM VALIDATION FUNCTION</h5>\n<p>You could implement the validation function within field definition. For instance, you could use this method if you want to use several validation functions with the same error message.</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IpValidator</span><span class="token punctuation">(</span>control<span class="token punctuation">:</span> FormControl<span class="token punctuation">)</span><span class="token punctuation">:</span> ValidationErrors <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token regex">/(\\d{1,3}\\.){3}\\d{1,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="field-with-custom-validation">FIELD WITH CUSTOM VALIDATION</h5>\n<p>You just need to include the validation function, declared wherever you want, within the property <code class="language-js">validators<span class="token punctuation">.</span>validation</code>.</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation through `validators.validation` property)&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  validators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    validation<span class="token punctuation">:</span> <span class="token punctuation">[</span>IpValidator<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p><strong>ALERT!</strong> If the function is async, you may need to define it in <code class="language-js">asyncValidators<span class="token punctuation">.</span>validation</code> property:</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation through `validators.validation` property)&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  asyncValidators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    validation<span class="token punctuation">:</span> <span class="token punctuation">[</span>IpAsyncValidator<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h4 id="3-declaring-validation-function-and-message-within-field-definition-">3. Declaring validation function and message within field definition.</h4>\n<h5 id="custom-validation-message-and-custom-validation-function">CUSTOM VALIDATION MESSAGE and CUSTOM VALIDATION FUNCTION</h5>\n<p>The validators property of a field could accept different nested properties which match with different validators.\nThe format would be:</p>\n<pre><code class="language-js">NAME_OF_VALIDATOR<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  expression<span class="token punctuation">:</span> FUNCTION\n  message<span class="token punctuation">:</span> FUNCTION <span class="token operator">|</span> STRING\n<span class="token punctuation">}</span>\n</code></pre><h5 id="field-with-custom-validation">FIELD WITH CUSTOM VALIDATION</h5>\n<p>As can be seen in the following code example, you just need to give a name to the validator property (ip), and include a function within expression property and a string or a custom message function withing message property.</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation through `validators.expression` property)&apos;</span><span class="token punctuation">,</span>\n    description<span class="token punctuation">:</span> <span class="token string">&apos;custom validation message through `validators.expression` property&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  validators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ip<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      expression<span class="token punctuation">:</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token regex">/(\\d{1,3}\\.){3}\\d{1,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      message<span class="token punctuation">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> field<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token string">`&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>formControl<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is not a valid IP Address`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p><strong>ALERT!</strong> If the function is async, you may need to define it in <code class="language-js">asyncValidators</code> property:</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation through `validators.expression` property)&apos;</span><span class="token punctuation">,</span>\n    description<span class="token punctuation">:</span> <span class="token string">&apos;custom validation message through `validators.expression` property&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  asyncValidators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    ip<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      expression<span class="token punctuation">:</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token regex">/(\\d{1,3}\\.){3}\\d{1,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      message<span class="token punctuation">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> field<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token string">`&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>formControl<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is not a valid IP Address`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<h4 id="4-declaring-validation-function-in-a-formly-type-and-message-within-ngmodule-declaration-">4. Declaring validation function in a formly type and message within NgModule declaration.</h4>\n<h5 id="custom-validation-message">CUSTOM VALIDATION MESSAGE</h5>\n<p>Create a custom validation message as described in point 1.</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IpValidatorMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> field<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>field<span class="token punctuation">.</span>formControl<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is not a valid IP Address`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      validationMessages<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> IpValidatorMessage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;required&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&apos;This field is required&apos;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="custom-validation-function-used-on-a-formly-type">CUSTOM VALIDATION FUNCTION USED ON A FORMLY TYPE</h5>\n<p>The validation function receives the <code class="language-js">FormControl</code> as input and it will return a boolean value, <code class="language-js"><span class="token boolean">false</span></code> if there is no error, otherwise <code class="language-js"><span class="token boolean">true</span></code>.</p>\n<p>The following code example shows a function to validate an IP. It has to return a boolean instead of a ValidationErrors object.</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IpValidator</span><span class="token punctuation">(</span>control<span class="token punctuation">:</span> FormControl<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token regex">/(\\d{1,3}\\.){3}\\d{1,3}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>control<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">...</span>\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>\n    FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      validationMessages<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> IpValidatorMessage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;required&apos;</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&apos;This field is required&apos;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      types<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          name<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n          <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n          defaultOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            validators<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              ip<span class="token punctuation">:</span> IpValidator <span class="token comment">// &apos;ip&apos; matches the ip validation message</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h5 id="field-using-a-formly-type-with-custom-validation">FIELD USING A FORMLY TYPE WITH CUSTOM VALIDATION</h5>\n<p>The formly type has to be referenced in the field</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;ip&apos;</span><span class="token punctuation">,</span> <span class="token comment">// the formly type defined</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;IP Address (using custom validation declared in ngModule)&apos;</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>You could try the DEMO to test the several methods to create custom validators.</p>\n<ul>\n<li><a href="https://formly-js.github.io/ngx-formly/examples/validation/custom-validation">Custom Validators</a></li>\n<li><a href="https://formly-js.github.io/ngx-formly/examples/validation/unique-value-async-validation">Async Validators</a></li>\n</ul>\n</body></html>'},JDCv:function(n,a){n.exports='<html><head></head><body><h1 id="formly-expressions">Formly Expressions</h1>\n<p>You can use <code class="language-js">hideExpression</code> to hide fields dynamically and <code class="language-js">Expression Properties</code> for allows you to dynamically change many properties of a field.</p>\n<h2 id="expression-properties">Expression Properties</h2>\n<p>Expression Properties allows you to dynamically change many properties of a field.\nFor example, you can disable a form field dynamically. The value of this property can be <code class="language-js">string or <span class="token keyword">function</span></code>.\nyou can see an example using string value <a href="https://stackblitz.com/edit/angular-formly-eehxjb?file=app/app.component.ts">here</a></p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;text2&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;Hey!&apos;</span><span class="token punctuation">,</span>\n    placeholder<span class="token punctuation">:</span> <span class="token string">&apos;This one is disabled if there is no text in the other input&apos;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  expressionProperties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&apos;templateOptions.disabled&apos;</span><span class="token punctuation">:</span> <span class="token string">&apos;!model.text&apos;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>The field will be hidden when <em>model.text</em> is empty</p>\n<p>Example with function value:</p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;country&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;field 2&apos;</span><span class="token punctuation">,</span>\n    placeholder<span class="token punctuation">:</span> <span class="token string">&apos;&apos;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  expressionProperties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&apos;templateOptions.disabled&apos;</span><span class="token punctuation">:</span><span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> formState<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// access to the main model can be through `this.model` or `formState` or `model</span>\n      <span class="token keyword">return</span> <span class="token operator">!</span>formState<span class="token punctuation">.</span>mainModel<span class="token punctuation">.</span>text\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>The field will be hidden when <em>formState.mainModel.text</em> is empty</p>\n<p><strong>ALERT</strong>: You can use the formstate to store information. In the example we keep the model. formstate is a property of options. <a href="https://formly-js.github.io/ngx-formly/examples/form-options/form-state">Read more</a></p>\n<pre><code class="language-typescript">options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  formState<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    mainModel<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="conditional-rendering">Conditional Rendering</h2>\n<p>HideExpression property is used to set the hide property of your field. The value of this property can be <code class="language-js">string<span class="token punctuation">,</span> <span class="token keyword">function</span> or boolean</code>. Below is an example of each of them.</p>\n<p>First option with <em>string value</em>:</p>\n<p>You can see an example with <a href="https://stackblitz.com/edit/angular-formly-f79kb3?file=app/app.component.ts">here</a></p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;iLikeTwix&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;checkbox&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;I like twix&apos;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  hideExpression<span class="token punctuation">:</span> <span class="token string">&apos;!model.name&apos;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Second option with <em>function valu</em>e:</p>\n<p>You can see an example <a href="https://stackblitz.com/edit/angular-formly-ndfcmz?file=app/app.component.ts">here</a></p>\n<pre><code class="language-typescript"><span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> <span class="token string">&apos;country&apos;</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n  templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    label<span class="token punctuation">:</span> <span class="token string">&apos;City&apos;</span><span class="token punctuation">,</span>\n    placeholder<span class="token punctuation">:</span> <span class="token string">&apos;set to 123&apos;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  hideExpression<span class="token punctuation">:</span> <span class="token punctuation">(</span>model<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> formState<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// access to the main model can be through `this.model` or `formState` or `model</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>formState<span class="token punctuation">.</span>mainModel <span class="token operator">&amp;&amp;</span> formState<span class="token punctuation">.</span>mainModel<span class="token punctuation">.</span>city<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> formState<span class="token punctuation">.</span>mainModel<span class="token punctuation">.</span>city <span class="token operator">!==</span> <span class="token string">&quot;123&quot;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>Third option with boolean.  You can see an example <a href="https://stackblitz.com/edit/angular-formly-dpyzb9?file=app/app.component.ts">here</a></p>\n<p>HTML</p>\n<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>toggle()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<p>TS</p>\n<pre><code class="language-typescript">fields<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    key<span class="token punctuation">:</span> <span class="token string">&apos;country&apos;</span><span class="token punctuation">,</span>\n    <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n    templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      label<span class="token punctuation">:</span> <span class="token string">&apos;Street&apos;</span><span class="token punctuation">,</span>\n      placeholder<span class="token punctuation">:</span> <span class="token string">&apos;&apos;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    hideExpression<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>show\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hideExpression <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</body></html>'},JHIY:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=s("WT6e"),p=function(){},o=s("INQx"),e=s("VV5M"),c=s("sqmn"),l=s("bfOx"),u=s("Xjw4"),i=s("Ky09"),r=s("kJ/S"),k=s("9Sd6"),d=s("U/+3"),m=s("XHgV"),g=function(){return function(n){this.route=n,this.navs=[{href:"/guide/getting-started",text:"Getting started"},{href:"/guide/properties-options",text:"Properties and Options"},{href:"/guide/validation",text:"Validation"},{href:"/guide/expression-properties",text:"Formly Expressions"},{href:"/guide/custom-formly-field",text:"Custom Templates"},{href:"/guide/custom-formly-wrapper",text:"Custom Wrapper"}],this.contents={"getting-started":s("ScHG"),"properties-options":s("t78c"),"custom-formly-field":s("u8T9"),"custom-formly-wrapper":s("2OgP"),validation:s("G0Au"),"expression-properties":s("JDCv")}}}(),h=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function f(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,8,"a",[["class","mat-list-item"],["mat-list-item",""],["routerLinkActive","active-link"]],[[2,"mat-list-item-avatar",null],[2,"mat-list-item-with-avatar",null],[1,"target",0],[8,"href",4]],[[null,"focus"],[null,"blur"],[null,"click"]],function(n,a,s){var p=!0;return"focus"===a&&(p=!1!==t["\u0275nov"](n,1)._handleFocus()&&p),"blur"===a&&(p=!1!==t["\u0275nov"](n,1)._handleBlur()&&p),"click"===a&&(p=!1!==t["\u0275nov"](n,4).onClick(s.button,s.ctrlKey,s.metaKey,s.shiftKey)&&p),p},e.c,e.a)),t["\u0275did"](1,1097728,null,2,c.b,[t.ElementRef,[2,c.f]],null,null),t["\u0275qud"](603979776,3,{_lines:1}),t["\u0275qud"](335544320,4,{_avatar:0}),t["\u0275did"](4,671744,[[6,4]],0,l.q,[l.o,l.a,u.LocationStrategy],{routerLink:[0,"routerLink"]},null),t["\u0275did"](5,1720320,null,2,l.p,[l.o,t.ElementRef,t.Renderer2,t.ChangeDetectorRef],{routerLinkActive:[0,"routerLinkActive"]},null),t["\u0275qud"](603979776,5,{links:1}),t["\u0275qud"](603979776,6,{linksWithHrefs:1}),(n()(),t["\u0275ted"](8,2,["\n            ","\n          "]))],function(n,a){n(a,4,0,a.context.$implicit.href),n(a,5,0,"active-link")},function(n,a){n(a,0,0,t["\u0275nov"](a,1)._avatar,t["\u0275nov"](a,1)._avatar,t["\u0275nov"](a,4).target,t["\u0275nov"](a,4).href),n(a,8,0,a.context.$implicit.text)})}function y(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,0,"div",[],[[8,"innerHTML",1]],null,null,null,null))],null,function(n,a){n(a,0,0,a.component.contents[a.context.ngIf.id])})}function w(n){return t["\u0275vid"](0,[(n()(),t["\u0275ted"](-1,null,["\n    "])),(n()(),t["\u0275eld"](1,0,null,null,23,"mat-sidenav-container",[["class","mat-drawer-container mat-sidenav-container"],["style","min-height: 90% !important;"]],null,null,null,i.d,i.b)),t["\u0275did"](2,1490944,null,2,r.f,[[2,k.c],t.ElementRef,t.NgZone,t.ChangeDetectorRef,r.a],null,null),t["\u0275qud"](603979776,1,{_drawers:1}),t["\u0275qud"](335544320,2,{_content:0}),(n()(),t["\u0275ted"](-1,2,["\n      "])),(n()(),t["\u0275eld"](6,0,null,0,9,"mat-sidenav",[["class","mat-drawer mat-sidenav"],["mode","side"],["opened","true"],["tabIndex","-1"]],[[4,"width","px"],[40,"@transform",0],[1,"align",0],[2,"mat-drawer-end",null],[2,"mat-drawer-over",null],[2,"mat-drawer-push",null],[2,"mat-drawer-side",null],[2,"mat-sidenav-fixed",null],[4,"top","px"],[4,"bottom","px"]],[["component","@transform.start"],["component","@transform.done"]],function(n,a,s){var p=!0;return"component:@transform.start"===a&&(p=!1!==t["\u0275nov"](n,7)._onAnimationStart(s)&&p),"component:@transform.done"===a&&(p=!1!==t["\u0275nov"](n,7)._onAnimationEnd(s)&&p),p},i.f,i.a)),t["\u0275did"](7,3325952,[[1,4]],0,r.e,[t.ElementRef,d.j,d.i,m.a,t.NgZone,[2,u.DOCUMENT]],{mode:[0,"mode"],opened:[1,"opened"],fixedInViewport:[2,"fixedInViewport"],fixedTopGap:[3,"fixedTopGap"]},null),(n()(),t["\u0275ted"](-1,0,["\n        "])),(n()(),t["\u0275eld"](9,0,null,0,5,"mat-nav-list",[["class","mat-nav-list"],["role","navigation"]],null,null,null,e.d,e.b)),t["\u0275did"](10,49152,null,0,c.f,[],null,null),(n()(),t["\u0275ted"](-1,0,["\n          "])),(n()(),t["\u0275and"](16777216,null,0,1,null,f)),t["\u0275did"](13,802816,null,0,u.NgForOf,[t.ViewContainerRef,t.TemplateRef,t.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),t["\u0275ted"](-1,0,["\n        "])),(n()(),t["\u0275ted"](-1,0,["\n      "])),(n()(),t["\u0275ted"](-1,2,["\n      "])),(n()(),t["\u0275eld"](17,0,null,1,6,"mat-sidenav-content",[["class","markdown github mat-drawer-content mat-sidenav-content"]],[[4,"margin-left","px"],[4,"margin-right","px"]],null,null,i.e,i.c)),t["\u0275did"](18,1097728,[[2,4]],0,r.g,[t.ChangeDetectorRef,r.f],null,null),(n()(),t["\u0275ted"](-1,0,["\n        "])),(n()(),t["\u0275and"](16777216,null,0,2,null,y)),t["\u0275did"](21,16384,null,0,u.NgIf,[t.ViewContainerRef,t.TemplateRef],{ngIf:[0,"ngIf"]},null),t["\u0275pid"](131072,u.AsyncPipe,[t.ChangeDetectorRef]),(n()(),t["\u0275ted"](-1,0,["\n      "])),(n()(),t["\u0275ted"](-1,2,["\n    "])),(n()(),t["\u0275ted"](-1,null,["\n  "]))],function(n,a){var s=a.component;n(a,2,0),n(a,7,0,"side","true",!0,59),n(a,13,0,s.navs),n(a,21,0,t["\u0275unv"](a,21,0,t["\u0275nov"](a,22).transform(s.route.params)))},function(n,a){n(a,6,0,250,t["\u0275nov"](a,7)._animationState,null,"end"===t["\u0275nov"](a,7).position,"over"===t["\u0275nov"](a,7).mode,"push"===t["\u0275nov"](a,7).mode,"side"===t["\u0275nov"](a,7).mode,t["\u0275nov"](a,7).fixedInViewport,t["\u0275nov"](a,7).fixedInViewport?t["\u0275nov"](a,7).fixedTopGap:null,t["\u0275nov"](a,7).fixedInViewport?t["\u0275nov"](a,7).fixedBottomGap:null),n(a,17,0,t["\u0275nov"](a,18)._margins.left,t["\u0275nov"](a,18)._margins.right)})}var v=t["\u0275ccf"]("formly-demo-examples",g,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-demo-examples",[],null,null,null,w,h)),t["\u0275did"](1,49152,null,0,g,[l.a],null,null)],null,null)},{},{},[]),b=s("1T37"),x=s("+j5Y"),F=s("Mcof"),M=s("7u3n"),C=s("6sdf"),T=s("z7Rf"),j=s("ItHS"),I=s("OE0E"),A=s("iLnc"),q=s("ApVT"),N=s("bkcK"),O=s("Uo70"),S=s("6GVX"),V=s("gsbp"),E=s("EPl/"),R=s("j06o"),D=s("ZuzD"),L=s("255V");s.d(a,"GuidesModuleNgFactory",function(){return P});var P=t["\u0275cmf"](p,[],function(n){return t["\u0275mod"]([t["\u0275mpd"](512,t.ComponentFactoryResolver,t["\u0275CodegenComponentFactoryResolver"],[[8,[o.a,v]],[3,t.ComponentFactoryResolver],t.NgModuleRef]),t["\u0275mpd"](4608,u.NgLocalization,u.NgLocaleLocalization,[t.LOCALE_ID,[2,u["\u0275a"]]]),t["\u0275mpd"](6144,k.b,null,[u.DOCUMENT]),t["\u0275mpd"](4608,k.c,k.c,[[2,k.b]]),t["\u0275mpd"](4608,m.a,m.a,[]),t["\u0275mpd"](5120,b.d,b.b,[[3,b.d],t.NgZone,m.a]),t["\u0275mpd"](5120,b.g,b.f,[[3,b.g],m.a,t.NgZone]),t["\u0275mpd"](4608,x.i,x.i,[b.d,b.g,t.NgZone,u.DOCUMENT]),t["\u0275mpd"](5120,x.e,x.j,[[3,x.e],u.DOCUMENT]),t["\u0275mpd"](4608,x.h,x.h,[b.g,u.DOCUMENT]),t["\u0275mpd"](5120,x.f,x.m,[[3,x.f],u.DOCUMENT]),t["\u0275mpd"](4608,x.c,x.c,[x.i,x.e,t.ComponentFactoryResolver,x.h,x.f,t.ApplicationRef,t.Injector,t.NgZone,u.DOCUMENT]),t["\u0275mpd"](5120,x.k,x.l,[x.c]),t["\u0275mpd"](4608,d.k,d.k,[m.a]),t["\u0275mpd"](4608,d.j,d.j,[d.k,t.NgZone,u.DOCUMENT]),t["\u0275mpd"](136192,d.d,d.b,[[3,d.d],u.DOCUMENT]),t["\u0275mpd"](5120,d.n,d.m,[[3,d.n],[2,d.l],u.DOCUMENT]),t["\u0275mpd"](5120,d.i,d.g,[[3,d.i],t.NgZone,m.a]),t["\u0275mpd"](4608,F.d,F.d,[m.a]),t["\u0275mpd"](135680,F.a,F.a,[F.d,t.NgZone]),t["\u0275mpd"](5120,M.b,M.c,[x.c]),t["\u0275mpd"](4608,C.b,C.b,[]),t["\u0275mpd"](5120,T.d,T.a,[[3,T.d],[2,j.c],I.c,[2,u.DOCUMENT]]),t["\u0275mpd"](4608,A.a,A.a,[]),t["\u0275mpd"](4608,q.a,q.a,[]),t["\u0275mpd"](512,u.CommonModule,u.CommonModule,[]),t["\u0275mpd"](512,k.a,k.a,[]),t["\u0275mpd"](512,N.g,N.g,[]),t["\u0275mpd"](512,m.b,m.b,[]),t["\u0275mpd"](512,b.c,b.c,[]),t["\u0275mpd"](512,x.g,x.g,[]),t["\u0275mpd"](256,O.f,!0,[]),t["\u0275mpd"](512,O.n,O.n,[[2,O.f]]),t["\u0275mpd"](512,d.a,d.a,[]),t["\u0275mpd"](512,F.c,F.c,[]),t["\u0275mpd"](512,M.e,M.e,[]),t["\u0275mpd"](512,O.x,O.x,[]),t["\u0275mpd"](512,C.c,C.c,[]),t["\u0275mpd"](512,S.i,S.i,[]),t["\u0275mpd"](512,T.c,T.c,[]),t["\u0275mpd"](512,V.c,V.c,[]),t["\u0275mpd"](512,E.b,E.b,[]),t["\u0275mpd"](512,r.h,r.h,[]),t["\u0275mpd"](512,R.b,R.b,[]),t["\u0275mpd"](512,O.o,O.o,[]),t["\u0275mpd"](512,O.v,O.v,[]),t["\u0275mpd"](512,D.b,D.b,[]),t["\u0275mpd"](512,c.c,c.c,[]),t["\u0275mpd"](512,L.a,L.a,[]),t["\u0275mpd"](512,l.r,l.r,[[2,l.w],[2,l.o]]),t["\u0275mpd"](512,p,p,[]),t["\u0275mpd"](256,M.a,{showDelay:0,hideDelay:0,touchendHideDelay:1500},[]),t["\u0275mpd"](256,r.a,!1,[]),t["\u0275mpd"](1024,l.m,function(){return[[{path:"",pathMatch:"full",redirectTo:"getting-started"},{path:":id",component:g}]]},[])])})},ScHG:function(n,a){n.exports='<html><head></head><body><p><img src="https://raw.githubusercontent.com/formly-js/angular-formly/master/other/logo/angular-formly-logo-64px.png" alt="angular-formly logo" title="angular-formly" align="right" width="64" height="64"></p>\n<h1 id="-ngx-formly">@ngx-formly</h1>\n<p><a href="https://angular.io/styleguide"><img src="https://mgechev.github.io/angular2-style-guide/images/badge.svg" alt="Angular Style Guide"></a>\n<a href="#contributors"><img src="https://img.shields.io/badge/all_contributors-13-orange.svg?style=flat-square" alt="All Contributors"></a>\n<a href="https://waffle.io/formly-js/ngx-formly"><img src="https://badge.waffle.io/formly-js/ngx-formly.png?label=ready&amp;title=Ready" alt="Stories in Ready"></a></p>\n<p>Status:\n<a href="https://travis-ci.org/formly-js/ngx-formly"><img src="https://travis-ci.org/formly-js/ngx-formly.svg?branch=master" alt="Build Status"></a>\n<a href="https://badge.fury.io/js/%40ngx-formly%2Fcore"><img src="https://badge.fury.io/js/%40ngx-formly%2Fcore.svg" alt="npm version"></a>\n<a href="https://david-dm.org/formly-js/ng-formly?type=dev"><img src="https://david-dm.org/formly-js/ng-formly/dev-status.svg" alt="devDependencies Status"></a>\n<a href="http://packagequality.com/#?package=ng-formly"><img src="http://npm.packagequality.com/shield/ng-formly.png" alt="Package Quality"></a>\n<a href="https://snyk.io/test/github/formly-js/ng-formly"><img src="https://snyk.io/test/github/formly-js/ng-formly/badge.svg" alt="Known Vulnerabilities"></a>\n<a href="http://codecov.io/github/formly-js/ng-formly?branch=master"><img src="http://codecov.io/github/formly-js/ng-formly/coverage.svg?branch=master" alt="codecov.io"></a></p>\n<p>Links:\n<a href="https://gitter.im/formly-js/angular2-formly?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/formly-js/angular2-formly.svg" alt="Gitter"></a>\n<a href="http://makeapullrequest.com"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p>\n<p>Ngx Formly is a dynamic JSON powered form library for Angular (mainly based an on <a href="https://angular.io/guide/reactive-forms">Angular Reactive Forms</a>) that bring unmatched maintainability to your application&apos;s forms.</p>\n<p><strong>Supported UI libs</strong></p>\n<table>\n<thead>\n<tr>\n<th>UI</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href="https://getbootstrap.com">Bootstrap</a></td>\n<td>&#x2705;</td>\n</tr>\n<tr>\n<td><a href="https://ionicframework.com">Ionic</a></td>\n<td>&#x2705;</td>\n</tr>\n<tr>\n<td><a href="http://www.telerik.com/kendo-angular-ui">Kendo</a></td>\n<td>&#x2705;</td>\n</tr>\n<tr>\n<td><a href="https://github.com/angular/material2">Material2</a></td>\n<td>&#x2705;</td>\n</tr>\n<tr>\n<td><a href="http://primefaces.org/primeng/#/">PrimeNG</a></td>\n<td>&#x2705;</td>\n</tr>\n<tr>\n<td><a href="https://www.nativescript.org">NativeScript</a></td>\n<td>&#x274C;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Which Version to use?</strong></p>\n<table>\n<thead>\n<tr>\n<th>Angular version</th>\n<th>Formly version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Angular &gt;= 5</td>\n<td><code class="language-js">@ngx<span class="token operator">-</span>formly<span class="token operator">/</span>core@<span class="token number">3</span><span class="token punctuation">.</span>x</code></td>\n</tr>\n<tr>\n<td>Angular &gt;= 4</td>\n<td><code class="language-js">@ngx<span class="token operator">-</span>formly<span class="token operator">/</span>core@<span class="token number">2</span><span class="token punctuation">.</span>x</code></td>\n</tr>\n<tr>\n<td>Angular &gt;= 2</td>\n<td><a href="mailto:`ng-formly@1.x">`ng-formly@1.x</a>`</td>\n</tr>\n</tbody>\n</table>\n<h4 id="quick-links">Quick links</h4>\n<ul>\n<li><a href="https://formly-js.github.io/ngx-formly">Documentation, demos, and guides</a></li>\n<li>StackBlitz Template<ul>\n<li><a href="https://stackblitz.com/edit/ngx-formly-ui-bootstrap">UI Bootstrap</a></li>\n<li><a href="https://stackblitz.com/edit/ngx-formly-ui-material">UI Material</a></li>\n<li><a href="https://stackblitz.com/edit/ngx-formly-ui-ionic">UI Ionic</a></li>\n<li><a href="https://stackblitz.com/edit/ngx-formly-ui-primeng">UI PrimeNG</a></li>\n<li><a href="https://stackblitz.com/edit/ngx-formly-ui-kendo">UI Kendo</a></li>\n</ul>\n</li>\n</ul>\n<h2 id="quick-start">Quick Start</h2>\n<p>Follow these steps to get started with Ngx Formly. Also check out our <a href="https://formly-js.github.io/ngx-formly">demos</a> for further examples.</p>\n<h4 id="1-install-angular-forms-and-ngx-formly-core-packages-">1. Install @angular/forms and @ngx-formly/core packages:</h4>\n<pre><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> @angular/forms @ngx-formly/core --save\n</code></pre>\n<h4 id="2-choose-and-install-your-ui-pre-defined-types-templates-package-">2. Choose and install your UI (pre-defined types/templates) package:</h4>\n<ul>\n<li><p><a href="https://github.com/angular/material2">Material2</a>:</p>\n<ol>\n<li>Ensure you have already installed material2 <a href="https://material.angular.io/guide/getting-started">https://material.angular.io/guide/getting-started</a></li>\n<li>Install <code class="language-js">@ngx<span class="token operator">-</span>formly<span class="token operator">/</span>material</code><pre><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @ngx-formly/material --save\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p><a href="https://getbootstrap.com">Bootstrap</a>:</p>\n<pre><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> @ngx-formly/bootstrap --save\n</code></pre>\n</li>\n<li><p><a href="https://ionicframework.com">Ionic</a>:</p>\n<pre><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> @ngx-formly/ionic --save\n</code></pre>\n</li>\n<li><p><a href="http://primefaces.org/primeng/#/">PrimeNG</a>:</p>\n<pre><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> @ngx-formly/primeng --save\n</code></pre>\n</li>\n<li><p><a href="http://www.telerik.com/kendo-angular-ui">Kendo</a>:</p>\n<pre><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> @ngx-formly/kendo --save\n</code></pre>\n</li>\n</ul>\n<h4 id="3-import-the-formlymodule-and-ui-pre-defined-types-templates-">3. Import the <code class="language-js">FormlyModule</code> and UI (pre-defined types/templates):</h4>\n<pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>NgModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>ReactiveFormsModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/forms&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>FormlyModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>FormlyBootstrapModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/bootstrap&apos;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// for material2 import `FormlyMaterialModule`:</span>\n<span class="token comment">// import {FormlyMaterialModule} from &apos;@ngx-formly/material&apos;;</span>\n\n<span class="token comment">// for ionic import `FormlyIonicModule`:</span>\n<span class="token comment">// import {FormlyIonicModule} from &apos;@ngx-formly/ionic&apos;;</span>\n\n<span class="token comment">// for primeng import `FormlyPrimeNGModule`:</span>\n<span class="token comment">// import {FormlyPrimeNGModule} from &apos;@ngx-formly/primeng&apos;;</span>\n\n<span class="token comment">// for kendo import `FormlyKendoModule`:</span>\n<span class="token comment">// import {FormlyKendoModule} from &apos;@ngx-formly/kendo&apos;;</span>\n\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token punctuation">,</span>\n    ReactiveFormsModule<span class="token punctuation">,</span>\n    FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    FormlyBootstrapModule<span class="token punctuation">,</span>\n\n    <span class="token comment">// for material2:</span>\n    <span class="token comment">// FormlyMaterialModule</span>\n\n    <span class="token comment">// for ionic:</span>\n    <span class="token comment">// FormlyIonicModule</span>\n\n    <span class="token comment">// for primeng:</span>\n    <span class="token comment">// FormlyPrimeNGModule</span>\n\n    <span class="token comment">// for kendo:</span>\n    <span class="token comment">// FormlyKendoModule</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n<h4 id="3-define-the-form-config-in-your-component-">3. Define the form config in your component:</h4>\n<pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>FormGroup<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/forms&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>FormlyFieldConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/core&apos;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token punctuation">:</span> <span class="token string">&apos;app&apos;</span><span class="token punctuation">,</span>\n  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`\n    &lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;submit(model)&quot;&gt;\n      &lt;formly-form [form]=&quot;form&quot; [fields]=&quot;fields&quot; [model]=&quot;model&quot;&gt;\n        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;\n      &lt;/formly-form&gt;\n    &lt;/form&gt;\n  `</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n  form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  model <span class="token operator">=</span> <span class="token punctuation">{</span> email<span class="token punctuation">:</span> <span class="token string">&apos;email@gmail.com&apos;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  fields<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    key<span class="token punctuation">:</span> <span class="token string">&apos;email&apos;</span><span class="token punctuation">,</span>\n    <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n    templateOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;email&apos;</span><span class="token punctuation">,</span>\n      label<span class="token punctuation">:</span> <span class="token string">&apos;Email address&apos;</span><span class="token punctuation">,</span>\n      placeholder<span class="token punctuation">:</span> <span class="token string">&apos;Enter email&apos;</span><span class="token punctuation">,</span>\n      required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token function">submit</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>From there, it&apos;s just JavaScript. Allowing for DRY, maintainable, reusable forms.</p>\n<h2 id="roadmap">Roadmap</h2>\n<p>See the <a href="https://github.com/formly-js/angular2-formly/labels/enhancement">issues labeled enhancement</a></p>\n<h2 id="thanks">Thanks</h2>\n<p>A special thanks to <a href="https://twitter.com/kentcdodds">Kent C. Dodds</a> for giving me opportunity to work on this.\nThis library is maintained (with love) by me, <a href="https://twitter.com/mohamedzamakhan">Mohammed Zama Khan</a>.\nThanks to all <a href="https://github.com/formly-js/angular2-formly/graphs/contributors">contributors</a>!\nIf you&apos;re trying to find angular-formly, go <a href="https://github.com/formly-js/angular-formly">here</a></p>\n<h2 id="contributors">Contributors</h2>\n<p>Thanks goes to these wonderful people (<a href="https://github.com/kentcdodds/all-contributors#emoji-key">emoji key</a>):</p>\n\x3c!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --\x3e\n<p><a href="https://github.com/aitboudad"><img alt="aitboudad" src="https://avatars2.githubusercontent.com/u/1753742?v=4&amp;s=117" width="117"></a><a href="https://github.com/mohammedzamakhan"><img alt="mohammedzamakhan" src="https://avatars3.githubusercontent.com/u/2327532?v=4&amp;s=117" width="117"></a><a href="https://github.com/divyakumarjain"><img alt="divyakumarjain" src="https://avatars2.githubusercontent.com/u/2039134?v=4&amp;s=117" width="117"></a><a href="https://github.com/couzic"><img alt="couzic" src="https://avatars2.githubusercontent.com/u/1380322?v=4&amp;s=117" width="117"></a><a href="https://github.com/franzeal"><img alt="franzeal" src="https://avatars3.githubusercontent.com/u/7455769?v=4&amp;s=117" width="117"></a><a href="https://github.com/beeman"><img alt="beeman" src="https://avatars3.githubusercontent.com/u/36491?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/juristr"><img alt="juristr" src="https://avatars3.githubusercontent.com/u/542458?v=4&amp;s=117" width="117"></a><a href="https://github.com/dwaldrum"><img alt="dwaldrum" src="https://avatars2.githubusercontent.com/u/386721?v=4&amp;s=117" width="117"></a><a href="https://github.com/Krustie101"><img alt="Krustie101" src="https://avatars2.githubusercontent.com/u/1636728?v=4&amp;s=117" width="117"></a><a href="https://github.com/MarcosEllys"><img alt="MarcosEllys" src="https://avatars3.githubusercontent.com/u/6751242?v=4&amp;s=117" width="117"></a><a href="https://github.com/thorgod"><img alt="thorgod" src="https://avatars3.githubusercontent.com/u/13910170?v=4&amp;s=117" width="117"></a><a href="https://github.com/AlexTalcura"><img alt="AlexTalcura" src="https://avatars2.githubusercontent.com/u/20095773?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/Dayvisson"><img alt="Dayvisson" src="https://avatars1.githubusercontent.com/u/12189515?v=4&amp;s=117" width="117"></a><a href="https://github.com/jrgleason"><img alt="jrgleason" src="https://avatars3.githubusercontent.com/u/1319151?v=4&amp;s=117" width="117"></a><a href="https://github.com/n3xus"><img alt="n3xus" src="https://avatars0.githubusercontent.com/u/510213?v=4&amp;s=117" width="117"></a><a href="https://github.com/kentcdodds"><img alt="kentcdodds" src="https://avatars0.githubusercontent.com/u/1500684?v=4&amp;s=117" width="117"></a><a href="https://github.com/LennardWesterveld"><img alt="LennardWesterveld" src="https://avatars2.githubusercontent.com/u/1076589?v=4&amp;s=117" width="117"></a><a href="https://github.com/waffle-iron"><img alt="waffle-iron" src="https://avatars2.githubusercontent.com/u/6912981?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/MathijsHoogland"><img alt="MathijsHoogland" src="https://avatars2.githubusercontent.com/u/7372934?v=4&amp;s=117" width="117"></a><a href="https://github.com/Pouja"><img alt="Pouja" src="https://avatars3.githubusercontent.com/u/2385144?v=4&amp;s=117" width="117"></a><a href="https://github.com/Riron"><img alt="Riron" src="https://avatars3.githubusercontent.com/u/5145523?v=4&amp;s=117" width="117"></a><a href="https://github.com/Ronen-dev"><img alt="Ronen-dev" src="https://avatars3.githubusercontent.com/u/12510911?v=4&amp;s=117" width="117"></a><a href="https://github.com/blowsie"><img alt="blowsie" src="https://avatars2.githubusercontent.com/u/308572?v=4&amp;s=117" width="117"></a><a href="https://github.com/samtsai"><img alt="samtsai" src="https://avatars0.githubusercontent.com/u/225526?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/Tom-V"><img alt="Tom-V" src="https://avatars2.githubusercontent.com/u/322654?v=4&amp;s=117" width="117"></a><a href="https://github.com/danielcrisp"><img alt="danielcrisp" src="https://avatars1.githubusercontent.com/u/1104814?v=4&amp;s=117" width="117"></a><a href="https://github.com/francisco-sanchez-molina"><img alt="francisco-sanchez-molina" src="https://avatars3.githubusercontent.com/u/9049706?v=4&amp;s=117" width="117"></a><a href="https://github.com/TheMcMurder"><img alt="TheMcMurder" src="https://avatars1.githubusercontent.com/u/3059715?v=4&amp;s=117" width="117"></a>\n\x3c!-- ALL-CONTRIBUTORS-LIST:END --\x3e</p>\n</body></html>'},t78c:function(n,a){n.exports='<html><head></head><body><h1 id="properties-and-options">Properties and Options</h1>\n<h2 id="formly-form">Formly Form</h2>\n<p>Everything starts with the <code class="language-js">formly<span class="token operator">-</span>form</code>. General use of it will look something like this:</p>\n<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formly-form</span>\n  <span class="token attr-name">[form]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">[fields]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>fields<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">[model]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formly-form</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h3 id="inputs">Inputs</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>form</td>\n<td><code class="language-js">FormGroup or FormArray</code></td>\n<td><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></td>\n<td>no</td>\n<td>The form instance which allow to track model value and validation status.</td>\n</tr>\n<tr>\n<td>fields</td>\n<td><code class="language-js">FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td></td>\n<td>yes</td>\n<td>The field configurations for building the form.</td>\n</tr>\n<tr>\n<td>model</td>\n<td><code class="language-js">any</code></td>\n<td></td>\n<td>yes</td>\n<td>The model to be represented by the form.</td>\n</tr>\n<tr>\n<td>options</td>\n<td><code class="language-js">FormlyFormOptions</code></td>\n<td></td>\n<td>no</td>\n<td>Options for the form.</td>\n</tr>\n</tbody>\n</table>\n<h3 id="outputs">Outputs</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(modelChange)</td>\n<td>Fired on model value change</td>\n</tr>\n</tbody>\n</table>\n<h2 id="fields">fields</h2>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td><code class="language-js">string</code></td>\n<td>The key that relates to the model. This will link the field value to the model.</td>\n</tr>\n<tr>\n<td>type</td>\n<td><code class="language-js">string</code></td>\n<td>The <code class="language-js">type</code> of field to be rendered. More information over at Custom templates.</td>\n</tr>\n<tr>\n<td>className</td>\n<td><code class="language-js">string</code></td>\n<td>You can specify your own class that will be applied to the <code class="language-js">formly<span class="token operator">-</span>field</code> directive.</td>\n</tr>\n<tr>\n<td>templateOptions</td>\n<td><code class="language-js">object</code></td>\n<td>This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.</td>\n</tr>\n<tr>\n<td>template</td>\n<td><code class="language-js">string</code></td>\n<td>Can be set instead of <code class="language-js">type</code> to render custom <code class="language-js">html</code> content.</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td><code class="language-js">any</code></td>\n<td>If this is provided and the value of the model at compile-time is <code class="language-js">undefined</code>, then the value of the model will be assigned the defaultValue.</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code class="language-js">boolean</code></td>\n<td>Whether to hide the field. Defaults to false. If you wish this to be conditional use <code class="language-js">hideExpression</code>.</td>\n</tr>\n<tr>\n<td>hideExpression</td>\n<td><code class="language-js">boolean or string or <span class="token keyword">function</span></code></td>\n<td>Conditionally hide the field based on values from other fields.</td>\n</tr>\n<tr>\n<td>expressionProperties</td>\n<td><code class="language-js">boolean or string or <span class="token keyword">function</span></code></td>\n<td>An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.</td>\n</tr>\n<tr>\n<td>wrappers</td>\n<td><code class="language-js">string<span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td>It is expected to be the name of the wrappers. The formly field template will be wrapped by the first wrapper, then the second, then the third, etc. You can also specify these as part of a type (which is the recommended approach).</td>\n</tr>\n<tr>\n<td>parsers</td>\n<td><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td>Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.</td>\n</tr>\n<tr>\n<td>fieldGroup</td>\n<td><code class="language-js">FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td>A field group is a way to group fields together, making advanced layout very simple. It can also be used to group fields that are associated with the same model (useful if it&apos;s different than the model for the rest of the fields).</td>\n</tr>\n<tr>\n<td>fieldGroupClassName</td>\n<td><code class="language-js">string</code></td>\n<td>Specify your own class that will be applied to the <code class="language-js">formly<span class="token operator">-</span>group</code> component.</td>\n</tr>\n</tbody>\n</table>\n<h2 id="options">options</h2>\n<h3 id="formstate">formState</h3>\n<p>The <code class="language-js">formState</code> property is passed to all fields and is a mechanism for communicating between fields (without having to mess with your model).</p>\n<h3 id="resetmodel-and-updateinitialvalue">resetModel and updateInitialValue</h3>\n<p>This also receives the methods <code class="language-js">resetModel</code> and <code class="language-js">updateInitialValue</code> which will invoke all of the field&apos;s resetModel and updateInitialValue respectively.</p>\n<h3 id="fieldtransform">fieldTransform</h3>\n<p>Allows you to modify/convert the fields before Formly handles them or validates them.</p>\n</body></html>'},u8T9:function(n,a){n.exports='<html><head></head><body><h1 id="custom-templates">Custom Templates</h1>\n<h2 id="prebuilt-templates">Prebuilt Templates</h2>\n<p>While it is recommended to create your own templates for ultimate customization and flexibility,\nthere are prebuilt templates you can use:</p>\n<ul>\n<li>Material</li>\n<li>Bootstrap</li>\n<li>Ionic</li>\n<li>Kendo</li>\n<li>PrimeNG</li>\n</ul>\n<h2 id="creating-a-custom-template">Creating a Custom Template</h2>\n<p>Creating a custom template is quite easy, but also very flexible, the following example shows how we can create a simple input type:</p>\n<p>The live example can be found in stackblitz: <a href="https://stackblitz.com/edit/ngx-formly-custom-template">https://stackblitz.com/edit/ngx-formly-custom-template</a></p>\n<ol>\n<li><p>Defining the Field Type class and it&apos;s template:</p>\n<p>First you have to create a component representing the field which extends <code class="language-js">FieldType</code> class.</p>\n<pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@angular/core&apos;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FieldType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;@ngx-formly/core&apos;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n selector<span class="token punctuation">:</span> <span class="token string">&apos;formly-field-input&apos;</span><span class="token punctuation">,</span>\n template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`\n   &lt;input type=&quot;input&quot; [formControl]=&quot;formControl&quot; [formlyAttributes]=&quot;field&quot;&gt;\n `</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormlyFieldInput</span> <span class="token keyword">extends</span> <span class="token class-name">FieldType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n<p>We passed a <code class="language-js">formControl</code> instance which is created by Formly, to let Formly know that this is the input that you want to associate with your model.</p>\n</li>\n<li><p>Register the custom type in <code class="language-js">NgModule</code> declaration:</p>\n<pre><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormlyFieldInput <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&apos;./formly-field-input&apos;</span><span class="token punctuation">;</span>\n\n@<span class="token function">NgModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n declarations<span class="token punctuation">:</span> <span class="token punctuation">[</span>FormlyFieldInput<span class="token punctuation">]</span><span class="token punctuation">,</span>\n imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n   <span class="token operator">...</span><span class="token punctuation">.</span>\n   FormlyModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n     types<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n       <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> FormlyFieldInput <span class="token punctuation">}</span><span class="token punctuation">,</span>\n     <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n<p><code class="language-js">types</code> allows you to specify a custom type which you can use in your field configuration.</p>\n<p>A typical Type require two properties:</p>\n<ol>\n<li><code class="language-js">name</code>: The name of the template type. You use this in the <code class="language-js">type</code> option of a field.</li>\n<li><code class="language-js">component</code>: the component that Formly should create when this type is set.</li>\n</ol>\n</li>\n<li><p>Use the created custom type in the form config:</p>\n<pre><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n fields<span class="token punctuation">:</span> FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n   <span class="token punctuation">{</span>\n     key<span class="token punctuation">:</span> <span class="token string">&apos;firstname&apos;</span><span class="token punctuation">,</span>\n     <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token string">&apos;input&apos;</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n</li>\n</ol>\n</body></html>'}});