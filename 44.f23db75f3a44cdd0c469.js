(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{"+XPI":function(e,t){e.exports='<html><head></head><body><h1 id="properties-and-options">Properties and Options</h1>\n<h2 id="formly-form">Formly Form</h2>\n<p>Everything starts with the <code class="language-js">formly<span class="token operator">-</span>form</code>. General use of it will look something like this:</p>\n<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formly-form</span>\n  <span class="token attr-name">[form]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">[fields]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>fields<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">[model]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formly-form</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n<h3 id="inputs">Inputs</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>form</td>\n<td><code class="language-js">FormGroup or FormArray</code></td>\n<td><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></td>\n<td>no</td>\n<td>The form instance which allow to track model value and validation status.</td>\n</tr>\n<tr>\n<td>fields</td>\n<td><code class="language-js">FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td></td>\n<td>yes</td>\n<td>The field configurations for building the form.</td>\n</tr>\n<tr>\n<td>model</td>\n<td><code class="language-js">any</code></td>\n<td></td>\n<td>yes</td>\n<td>The model to be represented by the form.</td>\n</tr>\n<tr>\n<td>options</td>\n<td><code class="language-js">FormlyFormOptions</code></td>\n<td></td>\n<td>no</td>\n<td>Options for the form.</td>\n</tr>\n</tbody>\n</table>\n<h3 id="outputs">Outputs</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(modelChange)</td>\n<td>Fired on model value change</td>\n</tr>\n</tbody>\n</table>\n<h2 id="fields">fields</h2>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td><code class="language-js">string</code></td>\n<td>The key that relates to the model. This will link the field value to the model.</td>\n</tr>\n<tr>\n<td>type</td>\n<td><code class="language-js">string</code></td>\n<td>The <code class="language-js">type</code> of field to be rendered. More information over at Custom templates.</td>\n</tr>\n<tr>\n<td>className</td>\n<td><code class="language-js">string</code></td>\n<td>You can specify your own class that will be applied to the <code class="language-js">formly<span class="token operator">-</span>field</code> directive.</td>\n</tr>\n<tr>\n<td>templateOptions</td>\n<td><code class="language-js">object</code></td>\n<td>This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.</td>\n</tr>\n<tr>\n<td>template</td>\n<td><code class="language-js">string</code></td>\n<td>Can be set instead of <code class="language-js">type</code> to render custom <code class="language-js">html</code> content.</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td><code class="language-js">any</code></td>\n<td>If this is provided and the value of the model at compile-time is <code class="language-js">undefined</code>, then the value of the model will be assigned the defaultValue.</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code class="language-js">boolean</code></td>\n<td>Whether to hide the field. Defaults to false. If you wish this to be conditional use <code class="language-js">hideExpression</code>.</td>\n</tr>\n<tr>\n<td>hideExpression</td>\n<td><code class="language-js">boolean or string or <span class="token keyword">function</span></code></td>\n<td>Conditionally hide the field based on values from other fields.</td>\n</tr>\n<tr>\n<td>expressionProperties</td>\n<td><code class="language-js">boolean or string or <span class="token keyword">function</span></code></td>\n<td>An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.</td>\n</tr>\n<tr>\n<td>wrappers</td>\n<td><code class="language-js">string<span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td>It is expected to be the name of the wrappers. The formly field template will be wrapped by the first wrapper, then the second, then the third, etc. You can also specify these as part of a type (which is the recommended approach).</td>\n</tr>\n<tr>\n<td>parsers</td>\n<td><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td>Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.</td>\n</tr>\n<tr>\n<td>fieldGroup</td>\n<td><code class="language-js">FormlyFieldConfig<span class="token punctuation">[</span><span class="token punctuation">]</span></code></td>\n<td>A field group is a way to group fields together, making advanced layout very simple. It can also be used to group fields that are associated with the same model (useful if it&apos;s different than the model for the rest of the fields).</td>\n</tr>\n<tr>\n<td>fieldGroupClassName</td>\n<td><code class="language-js">string</code></td>\n<td>Specify your own class that will be applied to the <code class="language-js">formly<span class="token operator">-</span>group</code> component.</td>\n</tr>\n</tbody>\n</table>\n<h2 id="options">options</h2>\n<h3 id="formstate">formState</h3>\n<p>The <code class="language-js">formState</code> property is passed to all fields and is a mechanism for communicating between fields (without having to mess with your model).</p>\n<h3 id="resetmodel-and-updateinitialvalue">resetModel and updateInitialValue</h3>\n<p>This also receives the methods <code class="language-js">resetModel</code> and <code class="language-js">updateInitialValue</code> which will invoke all of the field&apos;s resetModel and updateInitialValue respectively.</p>\n<h3 id="fieldtransform">fieldTransform</h3>\n<p>Allows you to modify/convert the fields before Formly handles them or validates them.</p>\n</body></html>'},"53um":function(e,t){e.exports='<html><head></head><body># Formly Expressions\n\nYou can use <code>hideExpression</code> to hide fields dynamically and <code>Expression Properties</code> for allows you to dynamically change many properties of a field.\n\n## Expression Properties\n\nExpression Properties allows you to dynamically change many properties of a field.\nFor example, you can disable a form field dynamically. The value of this property can be <code>string or function</code>.\nyou can see an example using string value <a href="https://stackblitz.com/edit/angular-formly-eehxjb?file=app/app.component.ts">here</a>\n\n<code>typescript\n{\n  key: &amp;apos;text2&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;Hey!&amp;apos;,\n    placeholder: &amp;apos;This one is disabled if there is no text in the other input&amp;apos;,\n  },\n  expressionProperties: {\n    &amp;apos;templateOptions.disabled&amp;apos;: &amp;apos;!model.text&amp;apos;,\n  },\n},</code>\nThe field will be hidden when <em>model.text</em> is empty\n\nExample with function value:\n\n<code>typescript\n{\n  key: &amp;apos;country&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;field 2&amp;apos;,\n    placeholder: &amp;apos;&amp;apos;\n  },\n  expressionProperties: {\n    &amp;apos;templateOptions.disabled&amp;apos;:(model: any, formState: any) =&amp;gt; {\n      // access to the main model can be through `this.model` or `formState` or `model\n      return !formState.mainModel.text\n    },\n  }\n}</code>\n\nThe field will be hidden when <em>formState.mainModel.text</em> is empty\n\n\n<strong>ALERT</strong>: You can use the formstate to store information. In the example we keep the model. formstate is a property of options. <a href="https://formly-js.github.io/ngx-formly/examples/form-options/form-state">Read more</a>\n\n<code>typescript\noptions = {\n  formState: {\n    mainModel: this.model,\n  },\n};</code>\n\n## Conditional Rendering\n\nHideExpression property is used to set the hide property of your field. The value of this property can be <code>string, function or boolean</code>. Below is an example of each of them.\n\nFirst option with <em>string value</em>:\n\nYou can see an example with <a href="https://stackblitz.com/edit/angular-formly-f79kb3?file=app/app.component.ts">here</a>\n<code>typescript\n{\n  key: &amp;apos;iLikeTwix&amp;apos;,\n  type: &amp;apos;checkbox&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;I like twix&amp;apos;,\n  },\n  hideExpression: &amp;apos;!model.name&amp;apos;,\n}</code>\nSecond option with <em>function valu</em>e:\n\nYou can see an example <a href="https://stackblitz.com/edit/angular-formly-ndfcmz?file=app/app.component.ts">here</a>\n\n<code>typescript\n{\n  key: &amp;apos;country&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;City&amp;apos;,\n    placeholder: &amp;apos;set to 123&amp;apos;\n  },\n  hideExpression: (model: any, formState: any) =&amp;gt; {\n    // access to the main model can be through `this.model` or `formState` or `model\n    if (formState.mainModel &amp;amp;&amp;amp; formState.mainModel.city) {\n      return formState.mainModel.city !== &amp;quot;123&amp;quot;\n    }\n    return true;\n  },\n},</code>\n\nThird option with boolean.  You can see an example <a href="https://stackblitz.com/edit/angular-formly-dpyzb9?file=app/app.component.ts">here</a>\n\nHTML\n<code>html\n&lt;button (click)=&quot;toggle()&quot;&gt;Click me&lt;/button&gt;</code>\n\nTS\n<code>typescript\nfields: FormlyFieldConfig[] = [\n  {\n    key: &amp;apos;country&amp;apos;,\n    type: &amp;apos;input&amp;apos;,\n    templateOptions: {\n      label: &amp;apos;Street&amp;apos;,\n      placeholder: &amp;apos;&amp;apos;\n    },\n    hideExpression: this.show\n  },\n];\n\ntoggle(){\n  this.show = !this.show;\n  this.fields[1].hideExpression = this.show;\n}</code>\n</body></html>'},NJ9T:function(e,t,n){"use strict";n.r(t);var o=n("CcnG"),a=function(){},s=n("NcP4"),r=n("6UMx"),i=n("0/Q6"),p=n("ZYCi"),l=n("Ip0R"),d=n("c4Wm"),m=n("Nsh5"),c=n("Fzqc"),u=n("lLAP"),h=n("dWZg"),f=function(){return function(e){this.route=e,this.navs=[{href:"/guide/getting-started",text:"Getting started"},{href:"/guide/properties-options",text:"Properties and Options"},{href:"/guide/validation",text:"Validation"},{href:"/guide/expression-properties",text:"Formly Expressions"},{href:"/guide/custom-formly-field",text:"Custom Templates"},{href:"/guide/custom-formly-wrapper",text:"Custom Wrapper"}],this.contents={"getting-started":n("apR8"),"properties-options":n("+XPI"),"custom-formly-field":n("YQsB"),"custom-formly-wrapper":n("VLKz"),validation:n("w8JO"),"expression-properties":n("53um")}}}(),g=o["\u0275crt"]({encapsulation:2,styles:[],data:{}});function y(e){return o["\u0275vid"](0,[(e()(),o["\u0275eld"](0,0,null,null,8,"a",[["class","mat-list-item"],["mat-list-item",""],["routerLinkActive","active-link"]],[[2,"mat-list-item-avatar",null],[2,"mat-list-item-with-avatar",null],[1,"target",0],[8,"href",4]],[[null,"focus"],[null,"blur"],[null,"click"]],function(e,t,n){var a=!0;return"focus"===t&&(a=!1!==o["\u0275nov"](e,1)._handleFocus()&&a),"blur"===t&&(a=!1!==o["\u0275nov"](e,1)._handleBlur()&&a),"click"===t&&(a=!1!==o["\u0275nov"](e,4).onClick(n.button,n.ctrlKey,n.metaKey,n.shiftKey)&&a),a},r.c,r.a)),o["\u0275did"](1,1097728,null,2,i.b,[o.ElementRef,[2,i.f]],null,null),o["\u0275qud"](603979776,3,{_lines:1}),o["\u0275qud"](335544320,4,{_avatar:0}),o["\u0275did"](4,671744,[[6,4]],0,p.q,[p.o,p.a,l.LocationStrategy],{routerLink:[0,"routerLink"]},null),o["\u0275did"](5,1720320,null,2,p.p,[p.o,o.ElementRef,o.Renderer2,o.ChangeDetectorRef],{routerLinkActive:[0,"routerLinkActive"]},null),o["\u0275qud"](603979776,5,{links:1}),o["\u0275qud"](603979776,6,{linksWithHrefs:1}),(e()(),o["\u0275ted"](8,2,[" "," "]))],function(e,t){e(t,4,0,t.context.$implicit.href),e(t,5,0,"active-link")},function(e,t){e(t,0,0,o["\u0275nov"](t,1)._avatar,o["\u0275nov"](t,1)._avatar,o["\u0275nov"](t,4).target,o["\u0275nov"](t,4).href),e(t,8,0,t.context.$implicit.text)})}function v(e){return o["\u0275vid"](0,[(e()(),o["\u0275eld"](0,0,null,null,0,"div",[],[[8,"innerHTML",1]],null,null,null,null))],null,function(e,t){e(t,0,0,t.component.contents[t.context.ngIf.id])})}function b(e){return o["\u0275vid"](0,[(e()(),o["\u0275eld"](0,0,null,null,14,"mat-sidenav-container",[["class","mat-drawer-container mat-sidenav-container"],["style","min-height: 90% !important;"]],[[2,"mat-drawer-container-explicit-backdrop",null]],null,null,d.d,d.b)),o["\u0275did"](1,1490944,null,2,m.f,[[2,c.b],o.ElementRef,o.NgZone,o.ChangeDetectorRef,m.a],null,null),o["\u0275qud"](603979776,1,{_drawers:1}),o["\u0275qud"](335544320,2,{_content:0}),(e()(),o["\u0275eld"](4,0,null,0,5,"mat-sidenav",[["class","mat-drawer mat-sidenav"],["mode","side"],["opened","true"],["tabIndex","-1"]],[[4,"width","px"],[40,"@transform",0],[1,"align",0],[2,"mat-drawer-end",null],[2,"mat-drawer-over",null],[2,"mat-drawer-push",null],[2,"mat-drawer-side",null],[2,"mat-sidenav-fixed",null],[4,"top","px"],[4,"bottom","px"]],[["component","@transform.start"],["component","@transform.done"]],function(e,t,n){var a=!0;return"component:@transform.start"===t&&(a=!1!==o["\u0275nov"](e,5)._onAnimationStart(n)&&a),"component:@transform.done"===t&&(a=!1!==o["\u0275nov"](e,5)._onAnimationEnd(n)&&a),a},d.f,d.a)),o["\u0275did"](5,3325952,[[1,4]],0,m.e,[o.ElementRef,u.h,u.g,h.a,o.NgZone,[2,l.DOCUMENT]],{mode:[0,"mode"],opened:[1,"opened"],fixedInViewport:[2,"fixedInViewport"],fixedTopGap:[3,"fixedTopGap"]},null),(e()(),o["\u0275eld"](6,0,null,0,3,"mat-nav-list",[["class","mat-nav-list"],["role","navigation"]],null,null,null,r.d,r.b)),o["\u0275did"](7,49152,null,0,i.f,[],null,null),(e()(),o["\u0275and"](16777216,null,0,1,null,y)),o["\u0275did"](9,802816,null,0,l.NgForOf,[o.ViewContainerRef,o.TemplateRef,o.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(e()(),o["\u0275eld"](10,0,null,1,4,"mat-sidenav-content",[["class","markdown github mat-drawer-content mat-sidenav-content"]],[[4,"margin-left","px"],[4,"margin-right","px"]],null,null,d.e,d.c)),o["\u0275did"](11,1097728,[[2,4]],0,m.g,[o.ChangeDetectorRef,m.f],null,null),(e()(),o["\u0275and"](16777216,null,0,2,null,v)),o["\u0275did"](13,16384,null,0,l.NgIf,[o.ViewContainerRef,o.TemplateRef],{ngIf:[0,"ngIf"]},null),o["\u0275pid"](131072,l.AsyncPipe,[o.ChangeDetectorRef])],function(e,t){var n=t.component;e(t,1,0),e(t,5,0,"side","true",!0,59),e(t,9,0,n.navs),e(t,13,0,o["\u0275unv"](t,13,0,o["\u0275nov"](t,14).transform(n.route.params)))},function(e,t){e(t,0,0,o["\u0275nov"](t,1)._backdropOverride),e(t,4,0,250,o["\u0275nov"](t,5)._animationState,null,"end"===o["\u0275nov"](t,5).position,"over"===o["\u0275nov"](t,5).mode,"push"===o["\u0275nov"](t,5).mode,"side"===o["\u0275nov"](t,5).mode,o["\u0275nov"](t,5).fixedInViewport,o["\u0275nov"](t,5).fixedInViewport?o["\u0275nov"](t,5).fixedTopGap:null,o["\u0275nov"](t,5).fixedInViewport?o["\u0275nov"](t,5).fixedBottomGap:null),e(t,10,0,o["\u0275nov"](t,11)._margins.left,o["\u0275nov"](t,11)._margins.right)})}var w=o["\u0275ccf"]("formly-demo-examples",f,function(e){return o["\u0275vid"](0,[(e()(),o["\u0275eld"](0,0,null,null,1,"formly-demo-examples",[],null,null,null,b,g)),o["\u0275did"](1,49152,null,0,f,[p.a],null,null)],null,null)},{},{},[]),x=n("eDkP"),k=n("M2Lx"),F=n("SMsm"),M=n("t/Na"),I=n("ZYjt"),C=n("6LlJ"),T=n("F6kA"),A=n("4c35"),q=n("qAlS"),j=n("Wf4p"),N=n("v9Dh"),O=n("La40"),R=n("UodH"),S=n("5QwG"),V=n("8mMr"),E=n("LC5p"),L=n("mqvi");n.d(t,"GuidesModuleNgFactory",function(){return D});var D=o["\u0275cmf"](a,[],function(e){return o["\u0275mod"]([o["\u0275mpd"](512,o.ComponentFactoryResolver,o["\u0275CodegenComponentFactoryResolver"],[[8,[s.a,w]],[3,o.ComponentFactoryResolver],o.NgModuleRef]),o["\u0275mpd"](4608,l.NgLocalization,l.NgLocaleLocalization,[o.LOCALE_ID,[2,l["\u0275angular_packages_common_common_a"]]]),o["\u0275mpd"](4608,x.c,x.c,[x.i,x.e,o.ComponentFactoryResolver,x.h,x.f,o.Injector,o.NgZone,l.DOCUMENT,c.b]),o["\u0275mpd"](4608,k.b,k.b,[]),o["\u0275mpd"](5120,F.d,F.a,[[3,F.d],[2,M.c],I.c,[2,l.DOCUMENT]]),o["\u0275mpd"](4608,C.a,C.a,[]),o["\u0275mpd"](4608,T.a,T.a,[]),o["\u0275mpd"](1073742336,l.CommonModule,l.CommonModule,[]),o["\u0275mpd"](1073742336,c.a,c.a,[]),o["\u0275mpd"](1073742336,A.g,A.g,[]),o["\u0275mpd"](1073742336,h.b,h.b,[]),o["\u0275mpd"](1073742336,q.b,q.b,[]),o["\u0275mpd"](1073742336,x.g,x.g,[]),o["\u0275mpd"](1073742336,j.l,j.l,[[2,j.d]]),o["\u0275mpd"](1073742336,N.d,N.d,[]),o["\u0275mpd"](1073742336,j.v,j.v,[]),o["\u0275mpd"](1073742336,k.c,k.c,[]),o["\u0275mpd"](1073742336,O.i,O.i,[]),o["\u0275mpd"](1073742336,F.c,F.c,[]),o["\u0275mpd"](1073742336,R.c,R.c,[]),o["\u0275mpd"](1073742336,S.b,S.b,[]),o["\u0275mpd"](1073742336,m.h,m.h,[]),o["\u0275mpd"](1073742336,V.b,V.b,[]),o["\u0275mpd"](1073742336,j.m,j.m,[]),o["\u0275mpd"](1073742336,j.t,j.t,[]),o["\u0275mpd"](1073742336,E.b,E.b,[]),o["\u0275mpd"](1073742336,i.c,i.c,[]),o["\u0275mpd"](1073742336,L.a,L.a,[]),o["\u0275mpd"](1073742336,p.r,p.r,[[2,p.w],[2,p.o]]),o["\u0275mpd"](1073742336,a,a,[]),o["\u0275mpd"](1024,p.m,function(){return[[{path:"",pathMatch:"full",redirectTo:"getting-started"},{path:":id",component:f}]]},[])])})},VLKz:function(e,t){e.exports='<html><head></head><body># Custom Wrapper\n\nCustom wrappers allows you to wrap a field type with a component.\n\n## Prebuilt Wrappers\n\nui-bootstrap\n  - label\n    - Adds a label to field (Side)\n  - description\n    - Adds a small message to bellow field.\n  - validation-message\n    - Adds a small red message bellow field.\n  - fieldset\n    - Adds error div around fields.\n  - addons\n\nui-ionic\n  - form-field\n    - Shows validation messages bellow field.\n\nui-kendo\n  - form-field\n    - Shows validation messages and label for required.\n\nui-material\n  - form-field\n    - Has label, shows validation messages, shows description, and label for required.\n\nui-primeng\n  - form-field\n    - Has label, required and validation message.\n\n## Creating a Custom Wrapper\n\nCreating a custom wrapper is easy, the following example shows how to create a panel wrapper around a field.\n\nSee live demo: <a href="https://stackblitz.com/angular/dleylnmrbmd?file=app%2Fapp.component.ts">demo</a>\n\n  1. Defining the Custom Wrapper class and it&apos;s template:\n\n  First you have to create a component representing the wrapper which extends <code>FieldWrapper</code> class.\n\n  <code>typescript\n  // panel-wrapper.component.ts\n  import { Component, ViewChild, ViewContainerRef } from &amp;apos;@angular/core&amp;apos;;\n  import { FieldWrapper } from &amp;apos;@ngx-formly/core&amp;apos;;\n\n  @Component({\n    selector: &amp;apos;formly-wrapper-panel&amp;apos;,\n    template: `\n      &lt;div class=&quot;card&quot;&gt;\n        &lt;h3 class=&quot;card-header&quot;&gt;Its time to party&lt;/h3&gt;\n        &lt;h3 class=&quot;card-header&quot;&gt;{{ to.label }}&lt;/h3&gt;\n        &lt;div class=&quot;card-body&quot;&gt;\n          &lt;ng-container #fieldcomponent=&quot;&quot;&gt;&lt;/ng-container&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `,\n  })\n  export class PanelWrapperComponent extends FieldWrapper {\n    @ViewChild(&amp;apos;fieldComponent&amp;apos;, {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n  }</code>\n\n  <code>fieldComponent</code> is where the field is inserted.  (<code>&lt;ng-container #fieldcomponent=&quot;&quot;&gt;&lt;/ng-container&gt;</code>)\n\n  &gt; Note: <code>FieldWrapper</code> component extends <code>Field</code> therefor you can have multiple wrappers attached to one field.\n  &gt; Example you can have both a label and validator wrapper.\n\n  2. Register the custom wrapper in <code>NgModule</code> declaration:\n  Module\n  <code>typescript\n  import { NgModule } from &amp;apos;@angular/core&amp;apos;;\n  import { CommonModule } from &amp;apos;@angular/common&amp;apos;;\n  import { ReactiveFormsModule } from &amp;apos;@angular/forms&amp;apos;;\n  import { FormlyModule } from &amp;apos;@ngx-formly/core&amp;apos;;\n  import { FormlyBootstrapModule } from &amp;apos;@ngx-formly/bootstrap&amp;apos;;\n\n  import { PanelWrapperComponent } from &amp;apos;./panel-wrapper.component&amp;apos;;\n  import { AppComponent } from &amp;apos;./app.component&amp;apos;;\n\n  @NgModule({\n    imports: [\n      CommonModule,\n      ReactiveFormsModule,\n      FormlyBootstrapModule,\n      FormlyModule.forRoot({\n        wrappers: [\n          { name: &amp;apos;panel&amp;apos;, component: PanelWrapperComponent },\n        ],\n      }),\n    ],\n    declarations: [\n      AppComponent,\n      PanelWrapperComponent,\n    ],\n  })\n  export class AppModule { }</code>\n\n  <code>wrappers: [ ... ]</code> is where define what custom wrappers we want to inject into our module to use in our <code>FormlyFieldConfig</code>\n\n  3. Create a custom FormlyFieldConfig that uses that type.\n\n  <code>typescript\n  fields: FormlyFieldConfig[] = [\n    {\n      key: &amp;apos;address&amp;apos;,\n      wrappers: [&amp;apos;panel&amp;apos;],\n      templateOptions: { label: &amp;apos;Address&amp;apos; },\n      fieldGroup: [{\n        key: &amp;apos;town&amp;apos;,\n        type: &amp;apos;input&amp;apos;,\n        templateOptions: {\n          required: true,\n          type: &amp;apos;text&amp;apos;,\n          label: &amp;apos;Town&amp;apos;,\n        },\n      }],\n    },\n  ];</code>\n\n  <code>wrappers: [&amp;apos;panel&amp;apos;],</code> is where FormlyFieldConfig assigns the field instance to use that panel.\n\n## Creating default wrappers for components\n\nSometimes you always want a components with certain wrappers.\n\n  <code>typescript\n  ... //Imports\n  @NgModule({\n    imports: [\n      CommonModule,\n      ReactiveFormsModule,\n      FormlyBootstrapModule,\n      FormlyModule.forRoot({\n        types: [\n          {\n            name: &amp;apos;operator&amp;apos;,\n            component: OperatorComponent,\n            wrappers: [&amp;apos;fieldset&amp;apos;, &amp;apos;label&amp;apos;]\n          },\n        ],\n      }),\n    ],\n    declarations: [\n      AppComponent,\n      OperatorComponent\n    ],\n  })\n  export class AppModule { }</code>\nYou can do this by setting the <code>wrappers: [&amp;apos;fieldset&amp;apos;, &amp;apos;label&amp;apos;]</code> to that type in the module\n</body></html>'},YQsB:function(e,t){e.exports='<html><head></head><body># Custom Templates\n\n## Prebuilt Templates\n\nWhile it is recommended to create your own templates for ultimate customization and flexibility,\nthere are prebuilt templates you can use:\n\n  - Material\n  - Bootstrap\n  - Ionic\n  - Kendo\n  - PrimeNG\n\n\n## Creating a Custom Template\n\nCreating a custom template is quite easy, but also very flexible, the following example shows how we can create a simple input type:\n\nThe live example can be found in stackblitz: <a href="https://stackblitz.com/edit/ngx-formly-custom-template">https://stackblitz.com/edit/ngx-formly-custom-template</a>\n\n1. Defining the Field Type class and it&apos;s template:\n\n  First you have to create a component representing the field which extends <code>FieldType</code> class.\n\n  <code>typescript\n  import { Component } from &amp;apos;@angular/core&amp;apos;;\n  import { FieldType } from &amp;apos;@ngx-formly/core&amp;apos;;\n\n  @Component({\n    selector: &amp;apos;formly-field-input&amp;apos;,\n    template: `\n      &lt;input type=&quot;input&quot; [formcontrol]=&quot;formControl&quot; [formlyattributes]=&quot;field&quot;&gt;\n    `,\n  })\n  export class FormlyFieldInput extends FieldType {}</code>\n\n  We passed a <code>formControl</code> instance which is created by Formly, to let Formly know that this is the input that you want to associate with your model.\n\n2. Register the custom type in <code>NgModule</code> declaration:\n\n  <code>typescript\n  import { FormlyFieldInput } from &amp;apos;./formly-field-input&amp;apos;;\n\n  @NgModule({\n    declarations: [FormlyFieldInput],\n    imports: [\n      ....\n      FormlyModule.forRoot({\n        types: [\n          { name: &amp;apos;input&amp;apos;, component: FormlyFieldInput },\n        ],\n      }),\n    ],\n  })\n  export class AppModule {}</code>\n\n  <code>types</code> allows you to specify a custom type which you can use in your field configuration.\n\n  A typical Type require two properties:\n\n  1. <code>name</code>: The name of the template type. You use this in the <code>type</code> option of a field.\n  2. <code>component</code>: the component that Formly should create when this type is set.\n\n3. Use the created custom type in the form config:\n\n  <code>typescript\n  export class AppComponent {\n    fields: FormlyFieldConfig[] = [\n      {\n        key: &amp;apos;firstname&amp;apos;,\n        type: &amp;apos;input&amp;apos;,\n      },\n    ];\n\n    ...\n  }</code>\n</body></html>'},apR8:function(e,t){e.exports='<html><head></head><body><img src="https://raw.githubusercontent.com/formly-js/angular-formly/master/other/logo/angular-formly-logo-64px.png" alt="angular-formly logo" title="angular-formly" align="right" width="64" height="64">\n\n# @ngx-formly\n<a href="https://angular.io/styleguide"><img src="https://mgechev.github.io/angular2-style-guide/images/badge.svg" alt="Angular Style Guide"></a>\n<a href="#contributors"><img src="https://img.shields.io/badge/all_contributors-13-orange.svg?style=flat-square" alt="All Contributors"></a>\n<a href="https://waffle.io/formly-js/ngx-formly"><img src="https://badge.waffle.io/formly-js/ngx-formly.png?label=ready&amp;title=Ready" alt="Stories in Ready"></a>\n\nStatus:\n<a href="https://travis-ci.org/formly-js/ngx-formly"><img src="https://travis-ci.org/formly-js/ngx-formly.svg?branch=master" alt="Build Status"></a>\n<a href="https://badge.fury.io/js/%40ngx-formly%2Fcore"><img src="https://badge.fury.io/js/%40ngx-formly%2Fcore.svg" alt="npm version"></a>\n<a href="https://david-dm.org/formly-js/ng-formly?type=dev"><img src="https://david-dm.org/formly-js/ng-formly/dev-status.svg" alt="devDependencies Status"></a>\n<a href="http://packagequality.com/#?package=ng-formly"><img src="http://npm.packagequality.com/shield/ng-formly.png" alt="Package Quality"></a>\n<a href="https://snyk.io/test/github/formly-js/ng-formly"><img src="https://snyk.io/test/github/formly-js/ng-formly/badge.svg" alt="Known Vulnerabilities"></a>\n<a href="http://codecov.io/github/formly-js/ng-formly?branch=master"><img src="http://codecov.io/github/formly-js/ng-formly/coverage.svg?branch=master" alt="codecov.io"></a>\n\nLinks:\n<a href="https://gitter.im/formly-js/angular2-formly?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/formly-js/angular2-formly.svg" alt="Gitter"></a>\n<a href="http://makeapullrequest.com"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a>\n\nNgx Formly is a dynamic JSON powered form library for Angular (mainly based an on <a href="https://angular.io/guide/reactive-forms">Angular Reactive Forms</a>) that bring unmatched maintainability to your application&apos;s forms.\n\n<strong>Supported UI libs</strong>\n\n| UI                                                |   |\n| ------------------------------------------------- | - |\n| <a href="https://getbootstrap.com">Bootstrap</a>             | &#x2705; |\n| <a href="https://ionicframework.com">Ionic</a>               | &#x2705; |\n| <a href="http://www.telerik.com/kendo-angular-ui">Kendo</a>  | &#x2705; |\n| <a href="https://github.com/angular/material2">Material2</a> | &#x2705; |\n| <a href="http://primefaces.org/primeng/#/">PrimeNG</a>       | &#x2705; |\n| <a href="https://www.nativescript.org">NativeScript</a>      | &#x274C; |\n\n<strong>Which Version to use?</strong>\n\n| Angular version | Formly version         |\n| --------------- | ---------------------- |\n| Angular &gt;= 6    | <code>@ngx-formly/core@4.x</code> |\n| Angular &gt;= 5    | <code>@ngx-formly/core@3.x</code> |\n| Angular &gt;= 4    | <code>@ngx-formly/core@2.x</code> |\n| Angular &gt;= 2    | <a href="mailto:`ng-formly@1.x">`ng-formly@1.x</a><code>|\n\n#### Quick links\n* [Documentation, demos, and guides](https://formly-js.github.io/ngx-formly)\n* StackBlitz Template\n  * [UI Bootstrap](https://stackblitz.com/edit/ngx-formly-ui-bootstrap)\n  * [UI Material](https://stackblitz.com/edit/ngx-formly-ui-material)\n  * [UI Ionic](https://stackblitz.com/edit/ngx-formly-ui-ionic)\n  * [UI PrimeNG](https://stackblitz.com/edit/ngx-formly-ui-primeng)\n  * [UI Kendo](https://stackblitz.com/edit/ngx-formly-ui-kendo)\n\n## Quick Start\n\nFollow these steps to get started with Ngx Formly. Also check out our [demos](https://formly-js.github.io/ngx-formly) for further examples.\n\n#### 1. Install @angular/forms and @ngx-formly/core packages:\n``</code>bash\n  npm install @angular/forms @ngx-formly/core --save\n<code>#### 2. Choose and install your UI (pre-defined types/templates) package:\n\n- [Material2](https://github.com/angular/material2):\n  1. Ensure you have already installed material2 https://material.angular.io/guide/getting-started\n  2. Install `@ngx-formly/material`</code>bash\n  npm install @ngx-formly/material --save\n<code>- [Bootstrap](https://getbootstrap.com):</code>bash\n    npm install @ngx-formly/bootstrap --save\n  <code>- [Ionic](https://ionicframework.com):</code>bash\n    npm install @ngx-formly/ionic --save\n  <code>- [PrimeNG](http://primefaces.org/primeng/#/):</code>bash\n    npm install @ngx-formly/primeng --save\n  <code>- [Kendo](http://www.telerik.com/kendo-angular-ui):</code>bash\n    npm install @ngx-formly/kendo --save\n  <code>#### 3. Import the `FormlyModule` and UI (pre-defined types/templates):</code>typescript\nimport {NgModule} from &apos;@angular/core&apos;;\nimport {ReactiveFormsModule} from &apos;@angular/forms&apos;;\nimport {FormlyModule} from &apos;@ngx-formly/core&apos;;\nimport {FormlyBootstrapModule} from &apos;@ngx-formly/bootstrap&apos;;\n\n// for material2 import <code>FormlyMaterialModule</code>:\n// import {FormlyMaterialModule} from &apos;@ngx-formly/material&apos;;\n\n// for ionic import <code>FormlyIonicModule</code>:\n// import {FormlyIonicModule} from &apos;@ngx-formly/ionic&apos;;\n\n// for primeng import <code>FormlyPrimeNGModule</code>:\n// import {FormlyPrimeNGModule} from &apos;@ngx-formly/primeng&apos;;\n\n// for kendo import <code>FormlyKendoModule</code>:\n// import {FormlyKendoModule} from &apos;@ngx-formly/kendo&apos;;\n\n@NgModule({\n  imports: [\n    ...,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(),\n    FormlyBootstrapModule,\n\n    // for material2:\n    // FormlyMaterialModule\n\n    // for ionic:\n    // FormlyIonicModule\n\n    // for primeng:\n    // FormlyPrimeNGModule\n\n    // for kendo:\n    // FormlyKendoModule\n  ],\n})\nexport class AppModule {}\n<code>#### 3. Define the form config in your component:</code>typescript\nimport {Component} from &apos;@angular/core&apos;;\nimport {FormGroup} from &apos;@angular/forms&apos;;\nimport {FormlyFieldConfig} from &apos;@ngx-formly/core&apos;;\n\n@Component({\n  selector: &apos;app&apos;,\n  template: <code>&lt;form [formgroup]=&quot;form&quot; (ngsubmit)=&quot;submit(model)&quot;&gt;\n      &lt;formly-form [form]=&quot;form&quot; [fields]=&quot;fields&quot; [model]=&quot;model&quot;&gt;\n        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;\n      &lt;/formly-form&gt;\n    &lt;/form&gt;</code>,\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model = { email: &apos;<a href="mailto:email@gmail.com">email@gmail.com</a>&apos; };\n  fields: FormlyFieldConfig[] = [{\n    key: &apos;email&apos;,\n    type: &apos;input&apos;,\n    templateOptions: {\n      type: &apos;email&apos;,\n      label: &apos;Email address&apos;,\n      placeholder: &apos;Enter email&apos;,\n      required: true,\n    }\n  }];\n\n  submit(model) {\n    console.log(model);\n  }\n}\n<code>`</code>\n\nFrom there, it&apos;s just JavaScript. Allowing for DRY, maintainable, reusable forms.\n\n## Roadmap\n\nSee the <a href="https://github.com/formly-js/angular2-formly/labels/enhancement">issues labeled enhancement</a>\n\n## Thanks\n\nA special thanks to <a href="https://twitter.com/kentcdodds">Kent C. Dodds</a> for giving me opportunity to work on this.\nThis library is maintained (with love) by me, <a href="https://twitter.com/mohamedzamakhan">Mohammed Zama Khan</a>.\nThanks to all <a href="https://github.com/formly-js/angular2-formly/graphs/contributors">contributors</a>!\nIf you&apos;re trying to find angular-formly, go <a href="https://github.com/formly-js/angular-formly">here</a>\n\n## Contributors\n\nThanks goes to these wonderful people (<a href="https://github.com/kentcdodds/all-contributors#emoji-key">emoji key</a>):\n\n\x3c!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --\x3e\n<a href="https://github.com/aitboudad"><img alt="aitboudad" src="https://avatars2.githubusercontent.com/u/1753742?v=4&amp;s=117" width="117"></a><a href="https://github.com/mohammedzamakhan"><img alt="mohammedzamakhan" src="https://avatars3.githubusercontent.com/u/2327532?v=4&amp;s=117" width="117"></a><a href="https://github.com/divyakumarjain"><img alt="divyakumarjain" src="https://avatars2.githubusercontent.com/u/2039134?v=4&amp;s=117" width="117"></a><a href="https://github.com/couzic"><img alt="couzic" src="https://avatars2.githubusercontent.com/u/1380322?v=4&amp;s=117" width="117"></a><a href="https://github.com/franzeal"><img alt="franzeal" src="https://avatars3.githubusercontent.com/u/7455769?v=4&amp;s=117" width="117"></a><a href="https://github.com/beeman"><img alt="beeman" src="https://avatars3.githubusercontent.com/u/36491?v=4&amp;s=117" width="117"></a>\n\n<a href="https://github.com/juristr"><img alt="juristr" src="https://avatars3.githubusercontent.com/u/542458?v=4&amp;s=117" width="117"></a><a href="https://github.com/dwaldrum"><img alt="dwaldrum" src="https://avatars2.githubusercontent.com/u/386721?v=4&amp;s=117" width="117"></a><a href="https://github.com/Krustie101"><img alt="Krustie101" src="https://avatars2.githubusercontent.com/u/1636728?v=4&amp;s=117" width="117"></a><a href="https://github.com/MarcosEllys"><img alt="MarcosEllys" src="https://avatars3.githubusercontent.com/u/6751242?v=4&amp;s=117" width="117"></a><a href="https://github.com/thorgod"><img alt="thorgod" src="https://avatars3.githubusercontent.com/u/13910170?v=4&amp;s=117" width="117"></a><a href="https://github.com/AlexTalcura"><img alt="AlexTalcura" src="https://avatars2.githubusercontent.com/u/20095773?v=4&amp;s=117" width="117"></a>\n\n<a href="https://github.com/Dayvisson"><img alt="Dayvisson" src="https://avatars1.githubusercontent.com/u/12189515?v=4&amp;s=117" width="117"></a><a href="https://github.com/jrgleason"><img alt="jrgleason" src="https://avatars3.githubusercontent.com/u/1319151?v=4&amp;s=117" width="117"></a><a href="https://github.com/n3xus"><img alt="n3xus" src="https://avatars0.githubusercontent.com/u/510213?v=4&amp;s=117" width="117"></a><a href="https://github.com/kentcdodds"><img alt="kentcdodds" src="https://avatars0.githubusercontent.com/u/1500684?v=4&amp;s=117" width="117"></a><a href="https://github.com/LennardWesterveld"><img alt="LennardWesterveld" src="https://avatars2.githubusercontent.com/u/1076589?v=4&amp;s=117" width="117"></a><a href="https://github.com/waffle-iron"><img alt="waffle-iron" src="https://avatars2.githubusercontent.com/u/6912981?v=4&amp;s=117" width="117"></a>\n\n<a href="https://github.com/MathijsHoogland"><img alt="MathijsHoogland" src="https://avatars2.githubusercontent.com/u/7372934?v=4&amp;s=117" width="117"></a><a href="https://github.com/Pouja"><img alt="Pouja" src="https://avatars3.githubusercontent.com/u/2385144?v=4&amp;s=117" width="117"></a><a href="https://github.com/Riron"><img alt="Riron" src="https://avatars3.githubusercontent.com/u/5145523?v=4&amp;s=117" width="117"></a><a href="https://github.com/Ronen-dev"><img alt="Ronen-dev" src="https://avatars3.githubusercontent.com/u/12510911?v=4&amp;s=117" width="117"></a><a href="https://github.com/blowsie"><img alt="blowsie" src="https://avatars2.githubusercontent.com/u/308572?v=4&amp;s=117" width="117"></a><a href="https://github.com/samtsai"><img alt="samtsai" src="https://avatars0.githubusercontent.com/u/225526?v=4&amp;s=117" width="117"></a>\n\n<a href="https://github.com/Tom-V"><img alt="Tom-V" src="https://avatars2.githubusercontent.com/u/322654?v=4&amp;s=117" width="117"></a><a href="https://github.com/danielcrisp"><img alt="danielcrisp" src="https://avatars1.githubusercontent.com/u/1104814?v=4&amp;s=117" width="117"></a><a href="https://github.com/francisco-sanchez-molina"><img alt="francisco-sanchez-molina" src="https://avatars3.githubusercontent.com/u/9049706?v=4&amp;s=117" width="117"></a><a href="https://github.com/TheMcMurder"><img alt="TheMcMurder" src="https://avatars1.githubusercontent.com/u/3059715?v=4&amp;s=117" width="117"></a>\n\x3c!-- ALL-CONTRIBUTORS-LIST:END --\x3e\n</body></html>'},w8JO:function(e,t){e.exports='<html><head></head><body># Validation\n\n## Custom Validation\nFormly offers different methods to implement custom validations.\n\n#### 1. Declaring validation function and message within NgModule declaration.\n\n##### CUSTOM VALIDATION MESSAGE\nTo define a custom validation message, you need to add an object with two properties: <code>name</code> and <code>message</code>. You will include this object to the validationMessages array of the FormlyModule config:\n\nThe message property could be simply a string or be defined as a function which receives the <em>error</em> and the <em>field</em> (FormlyFieldConfig) that was validated as input. The last one allows you more customization, like including the value, the  min or max value allowed, etc.\n\nThe following code example shows how to include a new message &quot;ip&quot; with a function to generate the string message by using the formControl.value and a new message &quot;required&quot; as a simple string.\n\n<code>typescript\nexport function IpValidatorMessage(err, field: FormlyFieldConfig) {\n  return `&amp;quot;${field.formControl.value}&amp;quot; is not a valid IP Address`;\n}\n...\n@NgModule({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: &amp;apos;ip&amp;apos;, message: IpValidatorMessage },\n        { name: &amp;apos;required&amp;apos;, message: &amp;apos;This field is required&amp;apos; },\n      ],\n    }),\n  ]\n})</code>\n\n##### CUSTOM VALIDATION FUNCTION\nThe validation function receives the <code>FormControl</code> as input and it will return <code>null</code> if there is not error, and otherwise it will send an object which property is set as <code>true</code>.  The name of the property must be the same as the name set to the error message for this validation.\n\nThe following code example shows a function to validate an IP. As can be seen, the object returned when there is an error has a property called &apos;ip&apos; which matches with the name of the custom validation message.\n\n<code>typescript\nexport function IpValidator(control: FormControl): ValidationErrors {\n  return /(\\d{1,3}\\.){3}\\d{1,3}/.test(control.value) ? null : { &amp;apos;ip&amp;apos;: true };\n}\n...\n@NgModule({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validators: [\n        { name: &amp;apos;ip&amp;apos;, validation: IpValidator },\n      ],\n      validationMessages: [\n        { name: &amp;apos;ip&amp;apos;, message: IpValidatorMessage },\n        { name: &amp;apos;required&amp;apos;, message: &amp;apos;This field is required&amp;apos; },\n      ],\n    }),\n  ]\n})</code>\n\n<strong>ALERT!</strong> If your function is async, you need to include it within <code>asyncValidators</code> property:\n<code>typescript\nexport function ipAsyncValidator(control: FormControl): Promise {\n  return new Promise((resolve, reject) =&amp;gt; {\n    setTimeout(() =&amp;gt; {\n        if(/(\\d{1,3}\\.){3}\\d{1,3}/.test(control.value)) {\n              resolve({ &amp;apos;ip&amp;apos;: true });\n        } else {\n              resolve(null);\n        }\n    }, 1000);\n  });\n}\n...\nFormlyModule.forRoot({\n  asyncValidators: [\n    { name: &amp;apos;ipAsync&amp;apos;, validation: ipAsyncValidator },\n  ],\n})</code>\n##### FIELD WITH CUSTOM VALIDATION\nYou just need to include the name of the validate function, declared in <code>FormlyModule</code>, within the property <code>validators.validation</code>.\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation declared in ngModule)&amp;apos;,\n    required: true,\n  },\n  validators: {\n    validation: [&amp;apos;ip&amp;apos;],\n  },\n},</code>\n\n<strong>ALERT!</strong> If the function is async, you need to include it within <code>asyncValidators.validation</code> property:\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation declared in ngModule)&amp;apos;,\n    required: true,\n  },\n  asyncValidators: {\n    validation: [&amp;apos;ipAsync&amp;apos;],\n  },\n},</code>\n\n#### 2. Declaring validation function within field definition.\n\n##### CUSTOM VALIDATION MESSAGE\n[As the case above]\n\n##### CUSTOM VALIDATION FUNCTION\n\nYou could implement the validation function within field definition. For instance, you could use this method if you want to use several validation functions with the same error message.\n\n<code>typescript\nexport function IpValidator(control: FormControl): ValidationErrors {\n  return /(\\d{1,3}\\.){3}\\d{1,3}/.test(control.value) ? null : { &amp;apos;ip&amp;apos;: true };\n}</code>\n##### FIELD WITH CUSTOM VALIDATION\nYou just need to include the validation function, declared wherever you want, within the property <code>validators.validation</code>.\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation through `validators.validation` property)&amp;apos;,\n    required: true,\n  },\n  validators: {\n    validation: [IpValidator],\n  },\n},</code>\n\n\n<strong>ALERT!</strong> If the function is async, you may need to define it in <code>asyncValidators.validation</code> property:\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation through `validators.validation` property)&amp;apos;,\n    required: true,\n  },\n  asyncValidators: {\n    validation: [IpAsyncValidator],\n  },\n},</code>\n\n#### 3. Declaring validation function and message within field definition.\n\n##### CUSTOM VALIDATION MESSAGE and CUSTOM VALIDATION FUNCTION\nThe validators property of a field could accept different nested properties which match with different validators.\nThe format would be:\n<code>NAME_OF_VALIDATOR: {\n  expression: FUNCTION\n  message: FUNCTION | STRING\n}</code>\n##### FIELD WITH CUSTOM VALIDATION\n\nAs can be seen in the following code example, you just need to give a name to the validator property (ip), and include a function within expression property and a string or a custom message function withing message property.\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation through `validators.expression` property)&amp;apos;,\n    description: &amp;apos;custom validation message through `validators.expression` property&amp;apos;,\n    required: true,\n  },\n  validators: {\n    ip: {\n      expression: (c) =&amp;gt; /(\\d{1,3}\\.){3}\\d{1,3}/.test(c.value),\n      message: (error, field: FormlyFieldConfig) =&amp;gt; `&amp;quot;${field.formControl.value}&amp;quot; is not a valid IP Address`,\n    },\n  },\n},</code>\n\n<strong>ALERT!</strong> If the function is async, you may need to define it in <code>asyncValidators</code> property:\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;input&amp;apos;,\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation through `validators.expression` property)&amp;apos;,\n    description: &amp;apos;custom validation message through `validators.expression` property&amp;apos;,\n    required: true,\n  },\n  asyncValidators: {\n    ip: {\n      expression: (c) =&amp;gt; return new Promise((resolve, reject) =&amp;gt; {\n        setTimeout(() =&amp;gt; {\n          resolve(/(\\d{1,3}\\.){3}\\d{1,3}/.test(c.value));\n        }, 1000);\n      }),\n      message: (error, field: FormlyFieldConfig) =&amp;gt; `&amp;quot;${field.formControl.value}&amp;quot; is not a valid IP Address`,\n    },\n  },\n},</code>\n\n\n#### 4. Declaring validation function in a formly type and message within NgModule declaration.\n\n##### CUSTOM VALIDATION MESSAGE\nCreate a custom validation message as described in point 1.\n\n<code>typescript\nexport function IpValidatorMessage(err, field: FormlyFieldConfig) {\n  return `&amp;quot;${field.formControl.value}&amp;quot; is not a valid IP Address`;\n}\n...\n@NgModule({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: &amp;apos;ip&amp;apos;, message: IpValidatorMessage },\n        { name: &amp;apos;required&amp;apos;, message: &amp;apos;This field is required&amp;apos; },\n      ],\n    }),\n  ]\n})</code>\n\n##### CUSTOM VALIDATION FUNCTION USED ON A FORMLY TYPE\nThe validation function receives the <code>FormControl</code> as input and it will return a boolean value, <code>false</code> if there is no error, otherwise <code>true</code>.\n\nThe following code example shows a function to validate an IP. It has to return a boolean instead of a ValidationErrors object.\n\n<code>typescript\nexport function IpValidator(control: FormControl): boolean {\n  return /(\\d{1,3}\\.){3}\\d{1,3}/.test(control.value);\n}\n...\n@NgModule({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: &amp;apos;ip&amp;apos;, message: IpValidatorMessage },\n        { name: &amp;apos;required&amp;apos;, message: &amp;apos;This field is required&amp;apos; },\n      ],\n      types: [\n        {\n          name: &amp;apos;ip&amp;apos;,\n          extends: &amp;apos;input&amp;apos;,\n          defaultOptions: {\n            validators: {\n              ip: IpValidator // &amp;apos;ip&amp;apos; matches the ip validation message\n            }\n          },\n        },\n    }),\n  ]\n})</code>\n##### FIELD USING A FORMLY TYPE WITH CUSTOM VALIDATION\nThe formly type has to be referenced in the field\n<code>typescript\n{\n  key: &amp;apos;ip&amp;apos;,\n  type: &amp;apos;ip&amp;apos;, // the formly type defined\n  templateOptions: {\n    label: &amp;apos;IP Address (using custom validation declared in ngModule)&amp;apos;,\n    required: true,\n  },\n},</code>\n\nYou could try the DEMO to test the several methods to create custom validators.\n- <a href="https://formly-js.github.io/ngx-formly/examples/validation/custom-validation">Custom Validators</a>\n- <a href="https://formly-js.github.io/ngx-formly/examples/validation/unique-value-async-validation">Async Validators</a>\n</body></html>'}}]);