var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.6","fields":["title","body"],"fieldVectors":[["title/classes/Field.html",[0,0.098,1,0.432]],["body/classes/Field.html",[0,0.155,1,0.807,2,0.415,3,0.415,4,0.352,5,3.898,6,0.482,7,2.651,8,1.069,9,1.318,10,1.069,11,0.59,12,1.069,13,0.971,14,3.898,15,1.318,16,3.898,17,3.898,18,1.457,19,3.898,20,3.217,21,3.033,22,3.898,23,3.898,24,2.7,25,3.898,26,3.898,27,3.898,28,3.898,29,1.476,30,3.898,31,3.898,32,3.033,33,3.898,34,3.898,35,3.45,36,3.898,37,3.898,38,0.477,39,0.039,40,0.626,41,1.476,42,0.704,43,3.45,44,1.306,45,0.352,46,2.435,47,1.049,48,3.898,49,3.217,50,3.217,51,1.074,52,3.898,53,0.972,54,3.898,55,3.898,56,0.03,57,0.03]],["title/classes/FieldArrayType.html",[0,0.098,58,2.519]],["body/classes/FieldArrayType.html",[0,0.149,2,0.388,3,0.388,4,0.328,6,0.69,8,0.735,10,1.035,11,0.575,13,0.867,24,3.003,38,0.487,39,0.039,42,0.658,45,0.328,46,2.273,47,0.84,56,0.029,57,0.029,58,3.839,59,5.58,60,3.639,61,1.281,62,3.201,63,1.159,64,1.558,65,3.839,66,3.839,67,2.273,68,3.639,69,4.458,70,4.65,71,3.201,72,0.926,73,4.65,74,1.697,75,4.65,76,4.055,77,5.4,78,3.639,79,4.65,80,2.905,81,4.65,82,3.639,83,1.344,84,3.639,85,3.639,86,1.344,87,3.004,88,3.004,89,3.639,90,3.639,91,3.639,92,4.65,93,3.304,94,3.639,95,1.106,96,4.65,97,3.639,98,3.639,99,3.639,100,1.003,101,0.907,102,3.639,103,3.639,104,3.004,105,3.004,106,3.639,107,3.639,108,4.65,109,3.639,110,2.905,111,3.639,112,3.639]],["title/classes/FieldType.html",[0,0.098,62,1.906]],["body/classes/FieldType.html",[0,0.165,1,0.81,2,0.457,3,0.457,4,0.387,38,0.465,39,0.038,40,0.689,45,0.387,46,2.681,56,0.032,57,0.032,61,1.419,62,3.218,113,4.293,114,2.57,115,3.447,116,3.069,117,3.447,118,3.447,119,3.447,120,3.447,121,3.447,122,3.447,123,3.66,124,3.543,125,3.05,126,3.543,127,3.543,128,3.543,129,3.543,130,3.543,131,3.543]],["title/interfaces/FieldValidatorFn.html",[132,0.275,133,1.127]],["body/interfaces/FieldValidatorFn.html",[0,0.106,1,0.81,2,0.237,3,0.237,4,0.201,6,0.275,8,0.45,9,0.555,10,0.798,11,0.521,12,1.11,13,0.358,15,0.825,18,0.912,29,1.201,38,0.422,39,0.039,40,0.358,41,1.201,42,0.402,44,0.746,45,0.496,47,0.916,51,0.912,53,1.5,56,0.02,57,0.02,61,0.614,63,0.984,64,0.746,72,1.053,74,1.006,83,0.822,86,0.822,95,0.677,100,0.912,101,1.298,132,0.489,133,1.458,134,0.822,135,1.582,136,1.582,137,1.109,138,1.608,139,1.109,140,2.226,141,1.458,142,0.907,143,0.677,144,0.907,145,0.746,146,0.822,147,0.746,148,0.907,149,0.402,150,0.501,151,0.555,152,0.907,153,0.501,154,0.677,155,1.641,156,1.09,157,1.725,158,1.565,159,1.725,160,0.883,161,1.541,162,1.006,163,1.608,164,1.725,165,1.608,166,1.348,167,1.323,168,0.907,169,0.907,170,0.907,171,0.907,172,0.907,173,0.907,174,0.907,175,0.907,176,0.907,177,0.614,178,1.458,179,0.907,180,0.907,181,0.907,182,0.907,183,0.907,184,0.907,185,0.907,186,0.907,187,0.907,188,0.907,189,0.907,190,0.907,191,0.907,192,0.907,193,0.907,194,0.907,195,0.907,196,0.907,197,0.746,198,1.348,199,1.348,200,0.907,201,0.907,202,0.907,203,0.907,204,1.348,205,0.907,206,0.907,207,0.907,208,1.348,209,0.907,210,0.907,211,0.907,212,0.907,213,0.907,214,0.907,215,0.907,216,0.907,217,1.608,218,1.781,219,1.781,220,1.348,221,0.907,222,1.348,223,1.608,224,1.608,225,1.348,226,0.907,227,0.907,228,0.907,229,1.781,230,0.907,231,1.348,232,1.608,233,1.348,234,1.608,235,0.907,236,0.907,237,0.907,238,0.907,239,0.907,240,0.907,241,1.348,242,0.907,243,1.348,244,1.348,245,0.907,246,0.907,247,0.907,248,0.907,249,1.348,250,0.907,251,1.348,252,0.907,253,0.907,254,1.458,255,0.907,256,0.746,257,0.907,258,0.907,259,0.907,260,0.907,261,0.907,262,0.409,263,1.222,264,0.907,265,0.907,266,0.907]],["title/classes/FieldWrapper.html",[0,0.098,267,2.519]],["body/classes/FieldWrapper.html",[0,0.17,1,0.825,2,0.482,3,0.482,4,0.408,6,0.559,11,0.482,13,0.727,38,0.48,39,0.038,40,0.727,45,0.408,46,2.827,56,0.033,57,0.033,61,1.465,63,1.325,267,4.388,268,4.526,269,4.807,270,4.807,271,4.526]],["title/directives/FormlyAttributes.html",[150,0.686,272,1.373]],["body/directives/FormlyAttributes.html",[0,0.102,1,0.681,2,0.34,3,0.34,4,0.288,6,0.395,7,2.164,10,0.645,11,0.455,12,1.037,13,0.824,32,1.994,38,0.385,39,0.039,40,0.513,45,0.288,47,0.995,50,2.635,51,0.88,53,1.28,56,0.026,57,0.026,67,2.666,71,1.994,72,0.869,100,1.415,110,1.994,114,2.13,116,2.674,123,3.647,125,2.268,150,1.081,256,1.884,272,2.478,273,3.192,274,1.994,275,2.373,276,4.808,277,3.801,278,3.994,279,3.192,280,5.133,281,5.622,282,3.192,283,3.032,284,3.192,285,3.192,286,3.192,287,2.635,288,3.192,289,3.032,290,1.994,291,2.268,292,1.994,293,2.268,294,4.808,295,1.994,296,2.268,297,2.268,298,2.268,299,2.268,300,3.192,301,3.192,302,4.268,303,2.373,304,3.192,305,3.192,306,3.032,307,4.268,308,2.268,309,3.192,310,3.192,311,4.268,312,4.808,313,3.192,314,4.268,315,4.808,316,4.268,317,4.268,318,3.192,319,3.192,320,3.192,321,3.192,322,3.192,323,3.192,324,3.192,325,3.192,326,3.192,327,3.192,328,3.192,329,3.192,330,5.133,331,3.192,332,4.268,333,3.192,334,3.192,335,3.192,336,3.192,337,2.373,338,3.192,339,3.192,340,4.808,341,4.268,342,3.192,343,3.192,344,2.635,345,1.775]],["title/components/FormlyField.html",[262,0.377,346,1.523]],["body/components/FormlyField.html",[0,0.088,1,0.781,2,0.293,3,0.293,4,0.249,6,0.341,7,2.433,8,1.026,9,1.266,10,1.064,11,0.588,12,0.9,13,0.868,15,1.11,18,1.227,38,0.459,39,0.039,40,0.442,42,0.498,45,0.249,47,0.805,56,0.024,57,0.024,63,0.962,67,2.41,71,1.721,72,0.872,100,1.063,101,0.687,104,3.676,105,3.676,114,1.925,115,2.782,116,2.476,117,2.782,118,2.782,119,2.782,120,2.782,121,2.782,122,2.782,123,2.742,124,2.274,125,1.957,126,2.274,127,2.274,128,2.274,129,2.274,130,2.274,131,2.274,143,0.838,149,0.951,150,0.868,153,0.868,154,1.601,155,0.923,156,0.687,160,0.557,256,1.812,262,0.651,269,4.346,270,4.346,272,1.737,274,1.721,275,3.006,287,2.274,337,1.532,346,2.408,347,1.957,348,1.957,349,2.755,350,3.859,351,4.826,352,4.454,353,2.274,354,5.406,355,2.755,356,2.755,357,2.755,358,2.755,359,1.721,360,1.721,361,2.755,362,4.826,363,2.755,364,2.755,365,3.859,366,2.755,367,5.08,368,1.532,369,2.41,370,2.742,371,2.755,372,2.755,373,2.755,374,2.755,375,2.274,376,2.755,377,2.755,378,2.755,379,2.755,380,2.755,381,2.755,382,2.755,383,2.755,384,2.755,385,2.755,386,3.859,387,3.859,388,3.676,389,2.755,390,2.755,391,2.755,392,2.755,393,2.755,394,2.755,395,2.755,396,2.755,397,2.755,398,2.755,399,3.859,400,2.755,401,2.755,402,2.755,403,2.755,404,2.755,405,2.755,406,3.859,407,2.755,408,2.755,409,1.957,410,2.755,411,2.755,412,2.755,413,2.755,414,1.532,415,2.146,416,2.146,417,3.429,418,1.957,419,1.957,420,1.532,421,1.957,422,1.375,423,1.957,424,1.375,425,1.957]],["title/components/FormlyGroup.html",[262,0.377,422,1.523]],["body/components/FormlyGroup.html",[0,0.134,2,0.445,3,0.445,4,0.377,38,0.458,39,0.038,40,0.671,45,0.377,56,0.031,57,0.031,61,1.397,62,3.408,72,0.986,149,1.067,150,1.14,153,1.14,156,1.042,160,0.845,262,0.718,272,2.282,274,2.612,275,3.324,346,2.086,347,2.971,348,2.971,414,2.325,415,2.819,416,2.819,417,4.031,418,2.971,419,2.971,420,2.325,421,2.971,422,2.831,423,2.971,424,2.086,425,2.971,426,4.181,427,3.167,428,4.181]],["title/interfaces/FormlyLifeCycleFn.html",[132,0.275,369,1.906]],["body/interfaces/FormlyLifeCycleFn.html",[0,0.096,1,0.858,2,0.207,3,0.207,4,0.176,6,0.241,7,0.876,8,0.825,9,1.423,10,0.94,11,0.532,12,1.128,13,0.48,15,1.018,18,1.125,21,3.025,24,1.082,29,0.592,32,2.273,35,2.586,38,0.398,39,0.039,41,1.414,42,0.352,43,2.124,45,0.437,47,0.738,51,1.523,53,1.49,56,0.018,57,0.018,63,1.246,72,0.738,74,0.909,76,3.641,80,2.752,93,1.383,95,0.592,114,0.971,115,1.216,116,1.082,117,1.216,118,1.216,119,1.216,120,1.216,121,1.216,122,1.216,132,0.437,135,1.383,136,1.383,139,0.652,143,0.592,149,0.796,151,1.363,153,0.991,156,1.304,158,1.22,160,0.825,161,1.241,162,1.106,167,0.652,177,0.536,197,0.652,262,0.505,277,2.124,278,2.586,283,1.383,289,1.383,290,1.216,291,1.383,292,1.216,293,1.383,295,1.867,296,1.383,297,1.383,298,1.383,299,1.383,303,1.082,306,2.124,308,1.383,337,1.082,345,2.024,359,2.273,360,3.453,368,1.082,369,3.268,370,2.124,409,1.383,415,1.082,416,1.082,427,2.55,429,1.383,430,1.947,431,2.468,432,2.468,433,2.124,434,1.607,435,2.468,436,1.607,437,1.607,438,1.607,439,1.607,440,1.383,441,1.216,442,1.216,443,3.636,444,1.607,445,1.607,446,3.304,447,3.004,448,3.004,449,2.124,450,1.383,451,1.607,452,1.607,453,1.607,454,1.607,455,1.607,456,1.216,457,1.216,458,1.383,459,1.607,460,1.867,461,1.383,462,1.607,463,3.37,464,2.468,465,1.607,466,2.468,467,1.607,468,1.383,469,1.607,470,1.607,471,2.468,472,1.216,473,1.607,474,1.607,475,1.607,476,1.607,477,1.607,478,1.607,479,2.468,480,1.383,481,1.383,482,1.607,483,2.901,484,1.607,485,2.124,486,1.607,487,1.216,488,2.586,489,2.124,490,2.468,491,3.304,492,1.383,493,1.607,494,1.383,495,1.607,496,1.607,497,1.607,498,1.607,499,2.468,500,1.383,501,1.607,502,3.004,503,2.468,504,1.607,505,1.607,506,1.607,507,1.607,508,1.607,509,1.607,510,1.383,511,1.607,512,1.607,513,1.607,514,1.607,515,1.607,516,1.607,517,2.124,518,3.004,519,2.124,520,2.468,521,1.607,522,1.216,523,1.607,524,2.468,525,2.468,526,1.607,527,1.492,528,1.607,529,1.383,530,1.216,531,2.468,532,1.607,533,1.607,534,1.383,535,1.607,536,1.383,537,1.607,538,1.607,539,1.383,540,1.607,541,1.383,542,1.383,543,1.607,544,1.383,545,1.607,546,1.607,547,1.607,548,1.383,549,1.383,550,1.383,551,1.607,552,3.004,553,1.607,554,1.607,555,3.004,556,1.607,557,1.607,558,1.607,559,1.607,560,3.004,561,1.607,562,1.607,563,1.383,564,1.607,565,1.607,566,1.607,567,1.607,568,1.607,569,1.607,570,1.383,571,1.607,572,3.551,573,1.383,574,1.607,575,1.607,576,1.607,577,1.607,578,1.607,579,1.383,580,1.383,581,1.383,582,1.383,583,1.383,584,1.607,585,1.607,586,1.607,587,1.607,588,1.607,589,1.383]],["title/modules/FormlyModule.html",[590,1.697,591,1.697]],["body/modules/FormlyModule.html",[0,0.102,2,0.339,3,0.339,4,0.287,11,0.339,38,0.535,39,0.039,40,0.511,42,0.574,45,0.463,47,0.769,56,0.026,57,0.026,69,3.514,72,0.574,87,2.624,145,1.718,149,0.574,154,1.294,160,0.642,177,1.412,178,1.772,262,0.393,272,2.67,303,2.971,346,2.96,368,1.768,414,1.768,420,3.299,422,3.007,424,2.96,427,1.986,527,2.848,530,1.986,590,2.367,591,3.414,592,1.986,593,3.961,594,2.259,595,2.624,596,2.624,597,2.624,598,3.514,599,1.768,600,3.179,601,4.257,602,4.231,603,4.799,604,4.799,605,4.257,606,3.179,607,3.514,608,3.179,609,3.179,610,3.179,611,4.257,612,3.179,613,3.179,614,3.179,615,4.257,616,3.179,617,5.343,618,5.343,619,3.179]],["title/components/FormlyValidationMessage.html",[262,0.377,424,1.523]],["body/components/FormlyValidationMessage.html",[0,0.106,1,0.695,2,0.354,3,0.354,4,0.3,6,0.411,7,2.507,10,0.886,11,0.467,12,0.991,13,0.871,20,2.744,24,2.438,38,0.471,39,0.039,40,0.534,42,0.601,44,1.114,45,0.3,47,0.886,49,2.744,53,1.093,56,0.027,57,0.027,66,2.744,67,2.076,71,2.738,72,0.98,80,2.076,88,2.744,100,0.916,149,1.006,150,0.986,153,0.986,154,1.693,156,1.3,160,1.19,161,1.011,262,0.67,272,1.973,274,2.076,275,3.158,344,2.744,345,2.438,346,1.658,347,2.361,348,2.361,353,2.744,368,1.848,388,2.744,414,1.848,415,2.438,416,2.438,417,3.706,418,2.361,419,2.361,420,1.848,421,2.361,422,1.658,423,2.361,424,2.603,425,2.361,446,2.361,491,2.361,620,5.569,621,3.324,622,5.422,623,5.422,624,3.324,625,3.324,626,4.384,627,3.324,628,3.324,629,3.324,630,3.324,631,3.324,632,3.324,633,3.324,634,3.324,635,2.361,636,3.324,637,3.324,638,3.324,639,4.384,640,3.324,641,4.384,642,3.324,643,4.384,644,3.324,645,3.324,646,4.384,647,3.324]],["title/interfaces/FormlyValueChangeEvent.html",[132,0.275,589,2.168]],["body/interfaces/FormlyValueChangeEvent.html",[0,0.095,1,0.86,2,0.206,3,0.206,4,0.174,6,0.239,7,0.87,8,0.732,9,1.411,10,0.887,11,0.588,12,1.136,13,0.653,15,0.903,18,0.998,21,3.017,24,1.075,29,0.588,32,2.263,35,2.574,38,0.396,39,0.039,41,1.41,42,0.349,43,2.112,45,0.436,47,0.655,51,1.521,53,1.496,56,0.018,57,0.018,63,1.204,72,0.735,74,0.904,76,3.633,80,2.541,93,1.373,95,0.588,114,0.964,115,1.207,116,1.075,117,1.207,118,1.207,119,1.207,120,1.207,121,1.207,122,1.207,132,0.436,139,0.648,143,0.588,149,0.793,151,1.361,153,0.987,156,1.301,158,1.214,160,0.822,161,1.237,162,1.101,167,0.648,177,0.533,197,0.648,262,0.503,277,2.112,278,2.574,283,1.373,289,1.373,290,1.207,291,1.373,292,1.207,293,1.373,295,1.857,296,1.373,297,1.373,298,1.373,299,1.373,303,1.075,306,2.112,308,1.373,337,1.075,345,2.015,359,2.263,360,3.537,368,1.075,369,3.194,370,2.112,409,1.373,415,1.075,416,1.075,427,2.541,429,1.373,431,2.454,432,2.454,433,2.112,434,1.595,435,2.454,436,1.595,437,1.595,438,1.595,439,1.595,440,1.373,441,1.207,442,1.207,443,3.625,444,1.595,445,1.595,446,3.294,447,2.991,448,2.991,449,2.112,450,1.373,451,1.595,452,1.595,453,1.595,454,1.595,455,1.595,456,1.207,457,1.207,458,1.373,459,1.595,460,1.857,461,1.373,462,1.595,463,3.358,464,2.454,465,1.595,466,2.454,467,1.595,468,1.373,469,1.595,470,1.595,471,2.454,472,1.207,473,1.595,474,1.595,475,1.595,476,1.595,477,1.595,478,1.595,479,2.454,480,1.373,481,1.373,482,1.595,483,2.89,484,1.595,485,2.112,486,1.595,487,1.207,488,2.574,489,2.112,490,2.454,491,3.294,492,1.373,493,1.595,494,1.373,495,1.595,496,1.595,497,1.595,498,1.595,499,2.454,500,1.373,501,1.595,502,2.991,503,2.454,504,1.595,505,1.595,506,1.595,507,1.595,508,1.595,509,1.595,510,1.373,511,1.595,512,1.595,513,1.595,514,1.595,515,1.595,516,1.595,517,2.112,518,2.991,519,2.112,520,2.454,521,1.595,522,1.207,523,1.595,524,2.454,525,2.454,526,1.595,527,1.483,528,1.595,529,1.373,530,1.207,531,2.454,532,1.595,533,1.595,534,1.373,535,1.595,536,1.373,537,1.595,538,1.595,539,1.373,540,1.595,541,1.373,542,1.373,543,1.595,544,1.373,545,1.595,546,1.595,547,1.595,548,1.373,549,1.373,550,1.373,551,1.595,552,2.991,553,1.595,554,1.595,555,2.991,556,1.595,557,1.595,558,1.595,559,1.595,560,2.991,561,1.595,562,1.595,563,1.373,564,1.595,565,1.595,566,1.595,567,1.595,568,1.595,569,1.595,570,1.373,571,1.595,572,3.542,573,1.373,574,1.595,575,1.595,576,1.595,577,1.595,578,1.595,579,1.373,580,1.373,581,1.373,582,1.373,583,1.373,584,1.595,585,1.595,586,1.595,587,1.595,588,1.595,589,2.112,648,1.932,649,1.932,650,1.932]],["title/interfaces/ManipulatorOption.html",[132,0.275,254,1.127]],["body/interfaces/ManipulatorOption.html",[0,0.149,1,0.802,2,0.235,3,0.235,4,0.199,6,0.273,8,0.446,9,0.55,10,1.021,11,0.576,12,1.092,13,0.528,15,0.82,18,0.906,29,1.195,38,0.42,39,0.039,40,0.355,41,1,42,0.399,44,0.74,45,0.495,47,0.882,51,0.906,53,1.505,56,0.02,57,0.02,61,0.608,63,0.82,64,1.459,72,1.052,74,1,83,0.816,86,0.816,95,0.671,100,0.906,101,1.295,132,0.488,133,1.215,134,0.816,137,0.74,138,1.34,139,0.74,141,1.451,142,0.899,143,0.671,144,0.899,145,0.74,146,0.816,147,0.74,148,0.899,149,0.399,150,0.496,151,0.55,152,0.899,153,0.496,154,0.671,155,1.636,156,1.085,157,1.719,158,1.56,159,1.719,160,0.88,161,1.537,162,1,163,1.601,164,1.719,165,1.601,166,1.34,167,1.317,168,0.899,169,0.899,170,0.899,171,0.899,172,0.899,173,0.899,174,0.899,175,0.899,176,0.899,177,0.608,178,1.451,179,0.899,180,0.899,181,0.899,182,0.899,183,0.899,184,0.899,185,0.899,186,0.899,187,0.899,188,0.899,189,0.899,190,0.899,191,0.899,192,0.899,193,0.899,194,0.899,195,0.899,196,0.899,197,0.74,198,1.34,199,1.34,200,0.899,201,0.899,202,0.899,203,0.899,204,1.34,205,0.899,206,0.899,207,0.899,208,1.34,209,0.899,210,0.899,211,0.899,212,0.899,213,0.899,214,0.899,215,0.899,216,0.899,217,1.601,218,1.773,219,1.773,220,1.34,221,0.899,222,1.34,223,1.601,224,1.601,225,1.34,226,0.899,227,0.899,228,0.899,229,1.773,230,0.899,231,1.34,232,1.601,233,1.34,234,1.601,235,0.899,236,0.899,237,0.899,238,0.899,239,0.899,240,0.899,241,1.34,242,0.899,243,1.34,244,1.34,245,0.899,246,0.899,247,0.899,248,0.899,249,1.34,250,0.899,251,1.34,252,0.899,253,0.899,254,1.608,255,0.899,256,0.74,257,0.899,258,0.899,259,0.899,260,0.899,261,0.899,262,0.407,263,1.215,264,0.899,265,0.899,266,0.899,651,3.289,652,2.208,653,2.208]],["title/interfaces/ManipulatorWrapper.html",[132,0.275,164,1.127]],["body/interfaces/ManipulatorWrapper.html",[0,0.106,1,0.804,2,0.238,3,0.238,4,0.202,6,0.276,8,0.452,9,0.557,10,0.8,11,0.522,12,1.111,13,0.359,15,0.827,18,0.914,29,1.203,38,0.422,39,0.039,40,0.359,41,1.009,42,0.404,44,0.749,45,0.496,47,0.917,51,0.914,53,1.504,56,0.02,57,0.02,61,0.616,63,0.986,64,0.749,72,1.053,74,1.009,83,0.825,86,0.825,95,0.679,100,0.914,101,1.299,132,0.489,133,1.225,134,0.825,135,1.588,136,1.588,137,0.749,138,1.351,139,0.749,141,1.462,142,0.91,143,0.679,144,0.91,145,0.749,146,0.825,147,0.749,148,0.91,149,0.404,150,0.502,151,0.557,152,0.91,153,0.502,154,0.679,155,1.643,156,1.092,157,1.728,158,1.568,159,1.728,160,0.885,161,1.543,162,1.009,163,1.612,164,1.81,165,1.612,166,1.351,167,1.326,168,0.91,169,0.91,170,0.91,171,0.91,172,0.91,173,0.91,174,0.91,175,0.91,176,0.91,177,0.616,178,1.462,179,0.91,180,0.91,181,0.91,182,0.91,183,0.91,184,0.91,185,0.91,186,0.91,187,0.91,188,0.91,189,0.91,190,0.91,191,0.91,192,0.91,193,0.91,194,0.91,195,0.91,196,0.91,197,0.749,198,1.351,199,1.351,200,0.91,201,0.91,202,0.91,203,0.91,204,1.351,205,0.91,206,0.91,207,0.91,208,1.351,209,0.91,210,0.91,211,0.91,212,0.91,213,0.91,214,0.91,215,0.91,216,0.91,217,1.612,218,1.784,219,1.784,220,1.351,221,0.91,222,1.351,223,1.612,224,1.612,225,1.351,226,0.91,227,0.91,228,0.91,229,1.784,230,0.91,231,1.351,232,1.612,233,1.351,234,1.612,235,0.91,236,0.91,237,0.91,238,0.91,239,0.91,240,0.91,241,1.351,242,0.91,243,1.351,244,1.351,245,0.91,246,0.91,247,0.91,248,0.91,249,1.351,250,0.91,251,1.351,252,0.91,253,0.91,254,1.462,255,0.91,256,0.749,257,0.91,258,0.91,259,0.91,260,0.91,261,0.91,262,0.41,263,1.225,264,1.351,265,0.91,266,0.91,654,2.235]],["title/interfaces/TemplateManipulators.html",[132,0.275,162,0.928]],["body/interfaces/TemplateManipulators.html",[0,0.105,1,0.802,2,0.236,3,0.236,4,0.2,6,0.273,8,0.447,9,0.551,10,1.022,11,0.554,12,1.092,13,0.529,15,0.821,18,0.907,29,1.196,38,0.42,39,0.039,40,0.355,41,1.001,42,0.4,44,0.741,45,0.495,47,0.882,51,0.907,53,1.499,56,0.02,57,0.02,61,0.61,63,0.821,64,0.741,72,1.052,74,1.001,83,0.817,86,0.817,95,0.673,100,0.907,101,1.296,132,0.488,133,1.216,134,0.817,137,0.741,138,1.341,139,0.741,141,1.453,142,0.901,143,0.673,144,0.901,145,0.741,146,0.817,147,0.741,148,0.901,149,0.4,150,0.497,151,0.551,152,0.901,153,0.497,154,0.673,155,1.637,156,1.086,157,1.721,158,1.561,159,1.721,160,0.88,161,1.538,162,1.196,163,1.989,164,1.962,165,1.989,166,1.341,167,1.318,168,0.901,169,0.901,170,0.901,171,0.901,172,0.901,173,0.901,174,0.901,175,0.901,176,0.901,177,0.61,178,1.453,179,0.901,180,0.901,181,0.901,182,0.901,183,0.901,184,0.901,185,0.901,186,0.901,187,0.901,188,0.901,189,0.901,190,0.901,191,0.901,192,0.901,193,0.901,194,0.901,195,0.901,196,0.901,197,0.741,198,1.341,199,1.341,200,0.901,201,0.901,202,0.901,203,0.901,204,1.341,205,0.901,206,0.901,207,0.901,208,1.341,209,0.901,210,0.901,211,0.901,212,0.901,213,0.901,214,0.901,215,0.901,216,0.901,217,1.602,218,1.775,219,1.775,220,1.341,221,0.901,222,1.341,223,1.602,224,1.602,225,1.341,226,0.901,227,0.901,228,0.901,229,1.775,230,0.901,231,1.341,232,1.602,233,1.341,234,1.602,235,0.901,236,0.901,237,0.901,238,0.901,239,0.901,240,0.901,241,1.341,242,0.901,243,1.341,244,1.341,245,0.901,246,0.901,247,0.901,248,0.901,249,1.341,250,0.901,251,1.341,252,0.901,253,0.901,254,1.453,255,0.901,256,0.741,257,0.901,258,0.901,259,0.901,260,0.901,261,0.901,262,0.407,263,1.216,264,0.901,265,0.901,266,0.901,655,2.212,656,2.212]],["title/interfaces/TypeOption.html",[132,0.275,155,1.023]],["body/interfaces/TypeOption.html",[0,0.103,1,0.798,2,0.23,3,0.23,4,0.194,6,0.266,8,0.435,9,0.537,10,1.102,11,0.581,12,1.116,13,0.74,15,0.805,18,0.89,29,1.177,38,0.416,39,0.039,40,0.346,41,0.982,42,0.389,44,0.722,45,0.492,47,0.874,51,0.89,53,1.514,56,0.02,57,0.02,61,1.185,63,0.805,64,0.722,72,1.063,74,0.982,83,0.796,86,0.796,95,0.655,100,0.89,101,1.286,132,0.485,133,1.193,134,0.796,137,0.722,138,1.315,139,0.722,141,1.43,142,0.878,143,0.655,144,0.878,145,0.722,146,0.796,147,0.722,148,0.878,149,0.389,150,0.485,151,0.537,152,0.878,153,0.485,154,0.655,155,1.681,156,1.072,157,1.702,158,1.728,159,1.702,160,0.869,161,1.525,162,0.982,163,1.577,164,1.702,165,1.577,166,1.315,167,1.298,168,0.878,169,0.878,170,0.878,171,0.878,172,0.878,173,0.878,174,0.878,175,0.878,176,0.878,177,0.594,178,1.43,179,0.878,180,0.878,181,0.878,182,0.878,183,0.878,184,0.878,185,0.878,186,0.878,187,0.878,188,0.878,189,0.878,190,0.878,191,0.878,192,0.878,193,0.878,194,0.878,195,0.878,196,0.878,197,0.722,198,1.315,199,1.315,200,0.878,201,0.878,202,0.878,203,0.878,204,1.315,205,0.878,206,0.878,207,0.878,208,1.315,209,0.878,210,0.878,211,0.878,212,0.878,213,0.878,214,0.878,215,0.878,216,0.878,217,1.577,218,1.752,219,1.752,220,1.315,221,0.878,222,1.315,223,1.577,224,1.577,225,1.315,226,0.878,227,0.878,228,0.878,229,2.043,230,0.878,231,1.315,232,1.577,233,1.315,234,1.577,235,0.878,236,0.878,237,0.878,238,0.878,239,0.878,240,0.878,241,1.315,242,0.878,243,1.315,244,1.315,245,0.878,246,0.878,247,0.878,248,0.878,249,1.315,250,0.878,251,1.315,252,0.878,253,0.878,254,1.43,255,0.878,256,0.722,257,0.878,258,0.878,259,0.878,260,0.878,261,0.878,262,0.57,263,1.193,264,0.878,265,0.878,266,0.878,657,2.155,658,2.155,659,2.155,660,2.155,661,2.155]],["title/interfaces/ValidationMessageOption.html",[132,0.275,263,1.127]],["body/interfaces/ValidationMessageOption.html",[0,0.105,1,0.803,2,0.236,3,0.236,4,0.2,6,0.274,8,0.448,9,0.552,10,0.796,11,0.554,12,1.093,13,0.53,15,0.822,18,0.909,29,1.197,38,0.421,39,0.039,40,0.356,41,1.003,42,0.4,44,0.743,45,0.495,47,0.883,51,0.909,53,1.512,56,0.02,57,0.02,61,0.611,63,0.822,64,0.743,72,1.067,74,1.003,83,0.819,86,0.819,95,0.674,100,0.909,101,1.296,132,0.488,133,1.218,134,0.819,137,0.743,138,1.343,139,0.743,141,1.454,142,0.903,143,0.674,144,0.903,145,0.743,146,0.819,147,0.743,148,0.903,149,0.4,150,0.498,151,0.552,152,0.903,153,0.498,154,0.674,155,1.638,156,1.087,157,1.722,158,1.562,159,1.722,160,1.023,161,1.539,162,1.003,163,1.604,164,1.722,165,1.604,166,1.343,167,1.32,168,0.903,169,0.903,170,0.903,171,0.903,172,0.903,173,0.903,174,0.903,175,0.903,176,0.903,177,0.611,178,1.454,179,0.903,180,0.903,181,0.903,182,0.903,183,0.903,184,0.903,185,0.903,186,0.903,187,0.903,188,0.903,189,0.903,190,0.903,191,0.903,192,0.903,193,0.903,194,0.903,195,0.903,196,0.903,197,0.743,198,1.343,199,1.343,200,0.903,201,0.903,202,0.903,203,0.903,204,1.343,205,0.903,206,0.903,207,0.903,208,1.343,209,0.903,210,0.903,211,0.903,212,0.903,213,0.903,214,0.903,215,0.903,216,0.903,217,1.604,218,1.777,219,1.777,220,1.343,221,0.903,222,1.343,223,1.604,224,1.604,225,1.343,226,0.903,227,0.903,228,0.903,229,1.777,230,0.903,231,1.343,232,1.604,233,1.343,234,1.604,235,0.903,236,0.903,237,0.903,238,0.903,239,0.903,240,0.903,241,1.343,242,0.903,243,1.343,244,1.343,245,0.903,246,0.903,247,0.903,248,0.903,249,1.343,250,0.903,251,1.343,252,0.903,253,0.903,254,1.454,255,0.903,256,0.743,257,0.903,258,0.903,259,0.903,260,0.903,261,0.903,262,0.408,263,1.454,264,0.903,265,0.903,266,0.903,662,2.216,663,2.216]],["title/interfaces/ValidatorOption.html",[132,0.275,157,1.127]],["body/interfaces/ValidatorOption.html",[0,0.106,1,0.803,2,0.237,3,0.237,4,0.2,6,0.274,8,0.449,9,0.553,10,0.797,11,0.554,12,1.093,13,0.53,15,0.823,18,0.91,29,1.199,38,0.421,39,0.039,40,0.357,41,1.004,42,0.401,44,0.744,45,0.496,47,0.884,51,0.91,53,1.506,56,0.02,57,0.02,61,0.612,63,0.823,64,0.744,72,1.067,74,1.004,83,0.82,86,0.82,95,0.675,100,0.91,101,1.297,132,0.488,133,1.612,134,0.82,137,0.744,138,1.345,139,0.744,141,1.456,142,0.904,143,0.675,144,0.904,145,0.744,146,0.82,147,0.744,148,0.904,149,0.401,150,0.499,151,0.553,152,0.904,153,0.499,154,0.675,155,1.639,156,1.262,157,1.806,158,1.564,159,1.723,160,0.882,161,1.54,162,1.004,163,1.606,164,1.723,165,1.606,166,1.345,167,1.321,168,0.904,169,0.904,170,0.904,171,0.904,172,0.904,173,0.904,174,0.904,175,0.904,176,0.904,177,0.612,178,1.456,179,0.904,180,0.904,181,0.904,182,0.904,183,0.904,184,0.904,185,0.904,186,0.904,187,0.904,188,0.904,189,0.904,190,0.904,191,0.904,192,0.904,193,0.904,194,0.904,195,0.904,196,0.904,197,0.744,198,1.345,199,1.345,200,0.904,201,0.904,202,0.904,203,0.904,204,1.345,205,0.904,206,0.904,207,0.904,208,1.345,209,0.904,210,0.904,211,0.904,212,0.904,213,0.904,214,0.904,215,0.904,216,0.904,217,1.606,218,1.778,219,1.778,220,1.345,221,0.904,222,1.345,223,1.606,224,1.606,225,1.345,226,0.904,227,0.904,228,0.904,229,1.778,230,0.904,231,1.345,232,1.606,233,1.345,234,1.606,235,0.904,236,0.904,237,0.904,238,0.904,239,0.904,240,0.904,241,1.345,242,0.904,243,1.345,244,1.345,245,0.904,246,0.904,247,0.904,248,0.904,249,1.345,250,0.904,251,1.345,252,0.904,253,0.904,254,1.456,255,0.904,256,0.744,257,0.904,258,0.904,259,0.904,260,0.904,261,0.904,262,0.408,263,1.22,264,0.904,265,0.904,266,0.904,664,2.22,665,2.22]],["title/interfaces/WrapperOption.html",[132,0.275,159,1.127]],["body/interfaces/WrapperOption.html",[0,0.105,1,0.802,2,0.235,3,0.235,4,0.199,6,0.272,8,0.445,9,0.549,10,0.939,11,0.591,12,1.091,13,0.63,15,0.818,18,0.904,29,1.193,38,0.42,39,0.039,40,0.354,41,0.998,42,0.398,44,0.738,45,0.495,47,0.881,51,0.904,53,1.511,56,0.02,57,0.02,61,0.607,63,0.818,64,0.738,72,1.066,74,0.998,83,0.813,86,0.813,95,0.67,100,0.904,101,1.294,132,0.487,133,1.212,134,0.813,137,0.738,138,1.337,139,0.738,141,1.449,142,0.897,143,0.67,144,0.897,145,0.738,146,0.813,147,0.738,148,0.897,149,0.398,150,0.495,151,0.549,152,0.897,153,0.495,154,0.67,155,1.634,156,1.084,157,1.717,158,1.558,159,1.801,160,0.878,161,1.536,162,0.998,163,1.598,164,1.717,165,1.598,166,1.337,167,1.315,168,0.897,169,0.897,170,0.897,171,0.897,172,0.897,173,0.897,174,0.897,175,0.897,176,0.897,177,0.607,178,1.449,179,0.897,180,0.897,181,0.897,182,0.897,183,0.897,184,0.897,185,0.897,186,0.897,187,0.897,188,0.897,189,0.897,190,0.897,191,0.897,192,0.897,193,0.897,194,0.897,195,0.897,196,0.897,197,0.738,198,1.337,199,1.337,200,0.897,201,0.897,202,0.897,203,0.897,204,1.337,205,0.897,206,0.897,207,0.897,208,1.337,209,0.897,210,0.897,211,0.897,212,0.897,213,0.897,214,0.897,215,0.897,216,0.897,217,1.598,218,1.771,219,1.771,220,1.337,221,0.897,222,1.337,223,1.598,224,1.598,225,1.337,226,0.897,227,0.897,228,0.897,229,1.771,230,0.897,231,1.337,232,1.598,233,1.337,234,1.598,235,0.897,236,0.897,237,0.897,238,0.897,239,0.897,240,0.897,241,1.337,242,0.897,243,1.337,244,1.337,245,0.897,246,0.897,247,0.897,248,0.897,249,1.337,250,0.897,251,1.337,252,0.897,253,0.897,254,1.449,255,0.897,256,0.738,257,0.897,258,0.897,259,0.897,260,0.897,261,0.897,262,0.575,263,1.212,264,0.897,265,0.897,266,0.897,666,2.202,667,2.202,668,2.202]],["title/contributing.html",[669,1.819,670,1.599,671,2.113]],["body/contributing.html",[2,0.273,3,0.39,4,0.386,8,0.518,38,0.231,39,0.035,56,0.023,57,0.023,64,0.859,65,2.115,101,1.164,114,1.278,147,0.859,149,0.662,151,1.282,160,1.039,295,3.212,375,2.115,440,1.82,441,1.6,442,2.29,450,1.82,456,2.29,457,1.6,458,1.82,468,1.82,472,1.6,480,3.319,485,3.653,487,2.29,488,3.041,489,2.604,492,1.82,494,2.604,500,1.82,510,2.604,522,1.6,527,1.278,534,1.82,536,1.82,539,1.82,544,1.82,548,1.82,549,1.82,550,3.319,563,1.82,570,1.82,599,2.038,635,2.604,671,3.856,672,2.115,673,2.115,674,4.672,675,3.665,676,4.28,677,2.562,678,2.115,679,5.294,680,3.973,681,5.718,682,4.28,683,4.943,684,5.593,685,4.856,686,5.512,687,5.294,688,5.142,689,3.665,690,5.294,691,3.665,692,3.665,693,3.856,694,3.665,695,2.562,696,4.943,697,2.562,698,2.115,699,2.562,700,2.562,701,2.562,702,2.562,703,2.562,704,1.82,705,2.562,706,1.82,707,2.562,708,3.026,709,4.55,710,3.665,711,4.28,712,4.672,713,5.415,714,2.562,715,3.665,716,3.856,717,2.562,718,3.665,719,2.115,720,2.562,721,2.562,722,3.665,723,2.562,724,2.562,725,2.562,726,2.562,727,3.665,728,2.562,729,2.562,730,4.28,731,2.562,732,2.562,733,4.672,734,2.562,735,2.562,736,2.562,737,2.115,738,3.665,739,2.562,740,2.562,741,2.562,742,2.562,743,2.562,744,2.562,745,5.142,746,4.28,747,3.665,748,2.562,749,2.562,750,4.943,751,3.665,752,4.672,753,3.665,754,2.562,755,2.562,756,2.115,757,2.562,758,3.026,759,3.665,760,2.562,761,2.562,762,2.562,763,2.562,764,2.115,765,2.562,766,2.562,767,2.562,768,2.562,769,2.562,770,2.562,771,2.115,772,2.562,773,2.562,774,3.665,775,3.856,776,3.533,777,1.82,778,2.562,779,4.28,780,2.562,781,2.115,782,2.562,783,2.562,784,2.562,785,2.562,786,2.562,787,2.562,788,2.562,789,2.562,790,2.562,791,2.562,792,2.562,793,2.562,794,2.562,795,2.562,796,2.562,797,2.562,798,2.562,799,3.665,800,2.562,801,2.562,802,2.562,803,2.562,804,4.28,805,2.562,806,4.28,807,3.665,808,3.026,809,4.28,810,4.28,811,2.562,812,2.562,813,2.562,814,3.026,815,2.562,816,2.562,817,2.562,818,2.562,819,2.562,820,2.562,821,2.562,822,2.562,823,2.562,824,2.562,825,2.604,826,2.562,827,2.562,828,2.562,829,2.562,830,2.562,831,3.665,832,2.562,833,2.115,834,2.562,835,2.562,836,2.562,837,2.562,838,2.562,839,2.562,840,2.562,841,2.562,842,2.562,843,2.562,844,2.562]],["title/dependencies.html",[592,2.288,777,1.819]],["body/dependencies.html",[39,0.036,56,0.034,57,0.034,592,3.032,845,4.853,846,4.853]],["title/index.html",[6,0.316,669,1.819,670,1.599]],["body/index.html",[0,0.128,1,0.412,7,1.31,8,1.082,9,0.726,11,0.427,12,0.81,13,0.736,15,0.999,21,2.504,38,0.542,39,0.039,40,0.644,42,0.893,45,0.362,56,0.025,57,0.025,101,0.726,110,1.818,137,0.976,147,1.537,149,0.936,151,0.726,153,0.901,177,0.802,262,0.567,275,1.619,290,1.818,292,1.818,303,1.619,441,2.504,442,1.818,449,2.068,456,1.818,457,1.818,460,1.818,461,2.068,472,1.818,487,1.818,522,1.818,529,2.068,542,2.068,573,2.849,591,2.229,594,3.258,599,1.619,602,3.31,607,3.31,635,3.258,670,2.865,672,2.403,673,2.403,678,3.31,680,2.068,685,2.403,693,4.531,704,2.068,706,2.068,708,2.403,709,2.403,716,2.403,737,2.403,756,2.403,764,3.31,775,2.403,776,4.278,777,2.849,781,4.278,808,3.31,814,2.403,825,2.068,833,2.403,847,6.071,848,2.911,849,2.911,850,2.911,851,2.911,852,2.911,853,2.911,854,2.911,855,2.911,856,5.675,857,2.911,858,5.183,859,5.183,860,5.183,861,5.183,862,2.911,863,2.911,864,2.911,865,2.403,866,2.911,867,2.911,868,4.009,869,2.911,870,2.911,871,2.911,872,2.911,873,2.911,874,5.743,875,4.942,876,2.911,877,2.911,878,4.009,879,4.009,880,2.911,881,2.911,882,4.009,883,4.009,884,4.009,885,4.009,886,4.009,887,4.009,888,4.009,889,4.586,890,4.586,891,4.586,892,4.586,893,2.911,894,2.911,895,2.911,896,2.911,897,5.183,898,2.911,899,2.911,900,2.911,901,2.911,902,2.911,903,2.911,904,2.911,905,2.911,906,2.911,907,2.911,908,4.942,909,2.911,910,2.911,911,2.911,912,2.911,913,2.911,914,2.911,915,2.911,916,2.911,917,2.911,918,2.911]],["title/license.html",[669,1.819,670,1.599,919,2.113]],["body/license.html",[4,0.372,39,0.031,56,0.031,57,0.031,137,1.38,151,1.252,337,2.289,433,2.925,481,2.925,483,2.925,517,2.925,519,2.925,527,2.054,541,2.925,599,2.289,680,2.925,698,3.398,719,3.398,758,4.474,771,3.398,825,2.925,919,3.398,920,5.023,921,5.42,922,4.117,923,4.117,924,5.023,925,4.117,926,4.117,927,4.117,928,5.023,929,4.117,930,5.643,931,6.059,932,5.023,933,4.117,934,5.42,935,5.023,936,4.117,937,4.117,938,4.117,939,4.117,940,4.117,941,4.117,942,4.117,943,4.117,944,4.117,945,4.117,946,5.023,947,5.023,948,4.117,949,4.117,950,5.023,951,4.117,952,4.117,953,4.117,954,4.117,955,4.117,956,4.117,957,4.117,958,4.117,959,4.117,960,4.117,961,4.117,962,4.117,963,4.117,964,4.117,965,4.117,966,4.117,967,4.117]],["title/modules.html",[590,2.303]],["body/modules.html",[39,0.034,56,0.034,57,0.034,590,2.688,591,2.688,706,3.435,968,4.834,969,4.834,970,4.834]],["title/overview.html",[971,3.418]],["body/overview.html",[0,0.132,39,0.038,45,0.374,56,0.031,57,0.031,110,3.15,132,0.374,141,1.531,150,0.932,262,0.512,272,2.686,346,2.978,414,2.305,420,3.318,422,2.978,424,2.978,527,2.068,530,2.589,590,2.805,591,3.468,592,2.589,593,3.422,594,2.945,595,3.422,596,3.422,597,3.422,598,4.163,599,2.305,704,2.945,865,4.163,971,3.422,972,4.145]],["title/miscellaneous/typealiases.html",[973,1.599,974,3.664]],["body/miscellaneous/typealiases.html",[6,0.593,11,0.511,39,0.034,56,0.034,57,0.034,345,2.667,429,3.407,572,4.106,973,2.995,975,4.796,976,4.796]],["title/miscellaneous/variables.html",[973,1.599,977,3.024]],["body/miscellaneous/variables.html",[6,0.569,11,0.49,39,0.038,56,0.033,57,0.033,101,1.147,134,1.7,145,1.905,146,1.7,359,3.353,360,3.353,460,2.876,579,3.271,580,3.271,581,3.271,582,3.271,583,3.271,973,2.876,977,3.8,978,4.604,979,5.684,980,4.604,981,4.604]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":93,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["1",{"_index":110,"title":{},"body":{"classes/FieldArrayType.html":{},"directives/FormlyAttributes.html":{},"index.html":{},"overview.html":{}}}],["1.9.0",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":972,"title":{},"body":{"overview.html":{}}}],["2",{"_index":704,"title":{},"body":{"contributing.html":{},"index.html":{},"overview.html":{}}}],["2016",{"_index":922,"title":{},"body":{"license.html":{}}}],["3",{"_index":887,"title":{},"body":{"index.html":{}}}],["3rd",{"_index":762,"title":{},"body":{"contributing.html":{}}}],["4",{"_index":865,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4.0",{"_index":634,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["5",{"_index":863,"title":{},"body":{"index.html":{}}}],["abov",{"_index":945,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":46,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"classes/FieldWrapper.html":{}}}],["abstractcontrol",{"_index":41,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["accept",{"_index":729,"title":{},"body":{"contributing.html":{}}}],["accessor",{"_index":20,"title":{},"body":{"classes/Field.html":{},"components/FormlyValidationMessage.html":{}}}],["action",{"_index":962,"title":{},"body":{"license.html":{}}}],["actual_compon",{"_index":425,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["ad",{"_index":547,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["add",{"_index":65,"title":{},"body":{"classes/FieldArrayType.html":{},"contributing.html":{}}}],["add(i",{"_index":75,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["addconfig(config",{"_index":181,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["addit",{"_index":761,"title":{},"body":{"contributing.html":{}}}],["additionalproperti",{"_index":479,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["address",{"_index":899,"title":{},"body":{"index.html":{}}}],["addvalidatormessage(nam",{"_index":250,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["advanc",{"_index":537,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["aftercontentcheck",{"_index":119,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["aftercontentinit",{"_index":118,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["afterviewcheck",{"_index":121,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["afterviewinit",{"_index":120,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["alias",{"_index":975,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":442,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["alreadi",{"_index":737,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["analyze_for_entry_compon",{"_index":604,"title":{},"body":{"modules/FormlyModule.html":{}}}],["and/or",{"_index":941,"title":{},"body":{"license.html":{}}}],["angular",{"_index":693,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["angular/common",{"_index":606,"title":{},"body":{"modules/FormlyModule.html":{}}}],["angular/cor",{"_index":40,"title":{},"body":{"classes/Field.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["angular/form",{"_index":42,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["anyth",{"_index":493,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["api",{"_index":500,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["app",{"_index":895,"title":{},"body":{"index.html":{}}}],["appcompon",{"_index":896,"title":{},"body":{"index.html":{}}}],["appli",{"_index":531,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["application'",{"_index":855,"title":{},"body":{"index.html":{}}}],["appmodul",{"_index":894,"title":{},"body":{"index.html":{}}}],["approach",{"_index":516,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["aris",{"_index":966,"title":{},"body":{"license.html":{}}}],["array",{"_index":564,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["array.isarray(opt",{"_index":201,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["array.type.t",{"_index":60,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["array.type.ts:13",{"_index":78,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["array.type.ts:30",{"_index":82,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["array.type.ts:7",{"_index":70,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["ask",{"_index":749,"title":{},"body":{"contributing.html":{}}}],["assign",{"_index":524,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["associ",{"_index":541,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["asynchron",{"_index":495,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["asyncvalid",{"_index":504,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["asyncvalidatorfn",{"_index":503,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["attent",{"_index":475,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["attr",{"_index":312,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["attribut",{"_index":289,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["attributes[nam",{"_index":319,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["author",{"_index":956,"title":{},"body":{"license.html":{}}}],["avail",{"_index":741,"title":{},"body":{"contributing.html":{}}}],["back",{"_index":759,"title":{},"body":{"contributing.html":{}}}],["base",{"_index":522,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["befor",{"_index":733,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":676,"title":{},"body":{"contributing.html":{}}}],["bit",{"_index":793,"title":{},"body":{"contributing.html":{}}}],["blog",{"_index":841,"title":{},"body":{"contributing.html":{}}}],["blur",{"_index":277,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["bootstrap",{"_index":594,"title":{},"body":{"modules/FormlyModule.html":{},"index.html":{},"overview.html":{}}}],["bring",{"_index":853,"title":{},"body":{"index.html":{}}}],["brows",{"_index":970,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":968,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":686,"title":{},"body":{"contributing.html":{}}}],["builder",{"_index":73,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["c",{"_index":137,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"license.html":{}}}],["calcul",{"_index":528,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["call",{"_index":473,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["callback",{"_index":412,"title":{},"body":{"components/FormlyField.html":{}}}],["callback(this.form",{"_index":413,"title":{},"body":{"components/FormlyField.html":{}}}],["canapplyrender(fieldchang",{"_index":339,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["case",{"_index":766,"title":{},"body":{"contributing.html":{}}}],["chang",{"_index":295,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["changes.field",{"_index":307,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["charg",{"_index":927,"title":{},"body":{"license.html":{}}}],["chat",{"_index":699,"title":{},"body":{"contributing.html":{}}}],["check",{"_index":872,"title":{},"body":{"index.html":{}}}],["choos",{"_index":877,"title":{},"body":{"index.html":{}}}],["claim",{"_index":959,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"classes/FieldWrapper.html":{}},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"overview.html":{}}}],["classnam",{"_index":532,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["click",{"_index":299,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["clone",{"_index":84,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["clone(initialmodel",{"_index":94,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["clone(this.field.fieldarray",{"_index":97,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["close",{"_index":801,"title":{},"body":{"contributing.html":{}}}],["cluster_formlymodul",{"_index":595,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["cluster_formlymodule_declar",{"_index":596,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["cluster_formlymodule_export",{"_index":597,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["code",{"_index":681,"title":{},"body":{"contributing.html":{}}}],["col",{"_index":576,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["commit",{"_index":690,"title":{},"body":{"contributing.html":{}}}],["commonmodul",{"_index":605,"title":{},"body":{"modules/FormlyModule.html":{}}}],["commun",{"_index":691,"title":{},"body":{"contributing.html":{}}}],["compil",{"_index":562,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["compon",{"_index":262,"title":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"overview.html":{}}}],["component_templ",{"_index":418,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["componentfactori",{"_index":404,"title":{},"body":{"components/FormlyField.html":{}}}],["componentfactoryresolv",{"_index":354,"title":{},"body":{"components/FormlyField.html":{}}}],["componentref",{"_index":367,"title":{},"body":{"components/FormlyField.html":{}}}],["componentref.destroy",{"_index":391,"title":{},"body":{"components/FormlyField.html":{}}}],["components/formly.attribut",{"_index":610,"title":{},"body":{"modules/FormlyModule.html":{}}}],["components/formly.field",{"_index":609,"title":{},"body":{"modules/FormlyModule.html":{}}}],["components/formly.field.config",{"_index":44,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["components/formly.form",{"_index":608,"title":{},"body":{"modules/FormlyModule.html":{}}}],["components/formly.group",{"_index":613,"title":{},"body":{"modules/FormlyModule.html":{}}}],["condit",{"_index":519,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["condition",{"_index":521,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["conduct",{"_index":682,"title":{},"body":{"contributing.html":{}}}],["config",{"_index":177,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["config.extra",{"_index":198,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.manipul",{"_index":191,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.manipulators.foreach(manipul",{"_index":192,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.typ",{"_index":182,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.types.foreach(typ",{"_index":183,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.valid",{"_index":185,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.validationmessag",{"_index":194,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.validationmessages.foreach(valid",{"_index":195,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.validators.foreach(valid",{"_index":186,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.wrapp",{"_index":188,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.wrappers.foreach(wrapp",{"_index":189,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["configopt",{"_index":178,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"modules/FormlyModule.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["configs.foreach(config",{"_index":179,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["confirm",{"_index":746,"title":{},"body":{"contributing.html":{}}}],["connect",{"_index":967,"title":{},"body":{"license.html":{}}}],["consid",{"_index":718,"title":{},"body":{"contributing.html":{}}}],["consist",{"_index":819,"title":{},"body":{"contributing.html":{}}}],["console.log(model",{"_index":902,"title":{},"body":{"index.html":{}}}],["console.warn(`formli",{"_index":631,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["const",{"_index":100,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["constructor",{"_index":67,"title":{},"body":{"classes/FieldArrayType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["constructor(@inject(formly_config_token",{"_index":176,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["constructor(build",{"_index":68,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["constructor(formlyconfig",{"_index":353,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["constructor(priv",{"_index":88,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyValidationMessage.html":{}}}],["constructor(render",{"_index":279,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["contain",{"_index":554,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["content",{"_index":507,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["contract",{"_index":963,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":671,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributor",{"_index":678,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["control",{"_index":491,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["convent",{"_index":806,"title":{},"body":{"contributing.html":{}}}],["coordin",{"_index":723,"title":{},"body":{"contributing.html":{}}}],["copi",{"_index":930,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":921,"title":{},"body":{"license.html":{}}}],["craft",{"_index":727,"title":{},"body":{"contributing.html":{}}}],["creat",{"_index":550,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["createcomponent(fieldcompon",{"_index":403,"title":{},"body":{"components/FormlyField.html":{}}}],["createfieldcompon",{"_index":393,"title":{},"body":{"components/FormlyField.html":{}}}],["currentvalu",{"_index":340,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["custom",{"_index":506,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["damag",{"_index":960,"title":{},"body":{"license.html":{}}}],["data",{"_index":438,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["deal",{"_index":932,"title":{},"body":{"license.html":{}}}],["debounc",{"_index":552,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["declar",{"_index":593,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["decor",{"_index":364,"title":{},"body":{"components/FormlyField.html":{}}}],["default",{"_index":359,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["defaultopt",{"_index":229,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["defaultvalu",{"_index":560,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["defin",{"_index":13,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["demo",{"_index":808,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["demonstr",{"_index":832,"title":{},"body":{"contributing.html":{}}}],["demostr",{"_index":774,"title":{},"body":{"contributing.html":{}}}],["depend",{"_index":592,"title":{"dependencies.html":{}},"body":{"modules/FormlyModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprec",{"_index":633,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["descript",{"_index":577,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["detail",{"_index":826,"title":{},"body":{"contributing.html":{}}}],["develop",{"_index":468,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["differ",{"_index":543,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["direct",{"_index":150,"title":{"directives/FormlyAttributes.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"overview.html":{}}}],["directli",{"_index":732,"title":{},"body":{"contributing.html":{}}}],["disabl",{"_index":574,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["discuss",{"_index":722,"title":{},"body":{"contributing.html":{}}}],["display",{"_index":466,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["distribut",{"_index":939,"title":{},"body":{"license.html":{}}}],["docheck",{"_index":117,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["document",{"_index":825,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["dodd",{"_index":911,"title":{},"body":{"index.html":{}}}],["dom",{"_index":347,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["don't",{"_index":799,"title":{},"body":{"contributing.html":{}}}],["dri",{"_index":904,"title":{},"body":{"index.html":{}}}],["driven",{"_index":844,"title":{},"body":{"contributing.html":{}}}],["duplic",{"_index":726,"title":{},"body":{"contributing.html":{}}}],["dynam",{"_index":848,"title":{},"body":{"index.html":{}}}],["each",{"_index":486,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["easi",{"_index":838,"title":{},"body":{"contributing.html":{}}}],["editorconfig",{"_index":829,"title":{},"body":{"contributing.html":{}}}],["effort",{"_index":724,"title":{},"body":{"contributing.html":{}}}],["element",{"_index":416,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["elementref",{"_index":281,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["email",{"_index":897,"title":{},"body":{"index.html":{}}}],["email@gmail.com",{"_index":898,"title":{},"body":{"index.html":{}}}],["emoji",{"_index":918,"title":{},"body":{"index.html":{}}}],["enhanc",{"_index":907,"title":{},"body":{"index.html":{}}}],["enough",{"_index":802,"title":{},"body":{"contributing.html":{}}}],["ensur",{"_index":814,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["enter",{"_index":900,"title":{},"body":{"index.html":{}}}],["entrycompon",{"_index":601,"title":{},"body":{"modules/FormlyModule.html":{}}}],["error",{"_index":161,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["error(`[formli",{"_index":219,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["errormessag",{"_index":622,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["essenti",{"_index":792,"title":{},"body":{"contributing.html":{}}}],["etc",{"_index":513,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["evalu",{"_index":484,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["even",{"_index":675,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":337,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["eventemitt",{"_index":362,"title":{},"body":{"components/FormlyField.html":{}}}],["exactli",{"_index":498,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["exampl",{"_index":775,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["except",{"_index":501,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["execut",{"_index":565,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["exist",{"_index":738,"title":{},"body":{"contributing.html":{}}}],["expect",{"_index":508,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["experi",{"_index":784,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":45,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":483,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["expressionproperti",{"_index":525,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["extend",{"_index":61,"title":{},"body":{"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"components/FormlyGroup.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extenddefault",{"_index":224,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extendedtyp",{"_index":258,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extendedtype.compon",{"_index":260,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extendedtype.wrapp",{"_index":261,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extra",{"_index":166,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extract",{"_index":791,"title":{},"body":{"contributing.html":{}}}],["f",{"_index":264,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["f.key",{"_index":112,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["fail",{"_index":767,"title":{},"body":{"contributing.html":{}}}],["fals",{"_index":306,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["featur",{"_index":687,"title":{},"body":{"contributing.html":{}}}],["feel",{"_index":697,"title":{},"body":{"contributing.html":{}}}],["few",{"_index":464,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["field",{"_index":1,"title":{"classes/Field.html":{}},"body":{"classes/Field.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["field'},{'nam",{"_index":419,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["field)[prop",{"_index":333,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["field.compon",{"_index":231,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.field.valid",{"_index":174,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.field.validation.show",{"_index":175,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.formcontrol",{"_index":169,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.formcontrol.invalid",{"_index":170,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.formcontrol.touch",{"_index":171,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.hid",{"_index":372,"title":{},"body":{"components/FormlyField.html":{}}}],["field.key",{"_index":99,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["field.options.parentform",{"_index":172,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.options.parentform.submit",{"_index":173,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.optionstyp",{"_index":227,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.optionstypes.foreach(opt",{"_index":228,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.templateopt",{"_index":331,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["field.templateoptions[prop",{"_index":332,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["field.typ",{"_index":83,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.wrapp",{"_index":233,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["fieldarray",{"_index":546,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldarraytyp",{"_index":58,"title":{"classes/FieldArrayType.html":{}},"body":{"classes/FieldArrayType.html":{}}}],["fieldchang",{"_index":308,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldchanges.currentvalu",{"_index":326,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["fieldchanges.previousvalu",{"_index":325,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["fieldcompon",{"_index":269,"title":{},"body":{"classes/FieldWrapper.html":{},"components/FormlyField.html":{}}}],["fieldcomponent.createcomponent(componentfactori",{"_index":407,"title":{},"body":{"components/FormlyField.html":{}}}],["fieldform",{"_index":623,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldform(control",{"_index":630,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldform.error",{"_index":636,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldform.errors.hasownproperty(error",{"_index":637,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldgroup",{"_index":545,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldgroupclassnam",{"_index":533,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldtransform",{"_index":167,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["fieldtyp",{"_index":62,"title":{"classes/FieldType.html":{}},"body":{"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"components/FormlyGroup.html":{}}}],["fieldvalidatorfn",{"_index":133,"title":{"interfaces/FieldValidatorFn.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["fieldwrapp",{"_index":267,"title":{"classes/FieldWrapper.html":{}},"body":{"classes/FieldWrapper.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"license.html":{}}}],["fill",{"_index":803,"title":{},"body":{"contributing.html":{}}}],["filter(attr",{"_index":310,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["filter(stat",{"_index":321,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["find",{"_index":708,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["first",{"_index":510,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["fit",{"_index":953,"title":{},"body":{"license.html":{}}}],["fix",{"_index":713,"title":{},"body":{"contributing.html":{}}}],["fn",{"_index":335,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["fn(this.field",{"_index":338,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["focu",{"_index":278,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["follow",{"_index":680,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["forc",{"_index":469,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["forchild(config",{"_index":619,"title":{},"body":{"modules/FormlyModule.html":{}}}],["foreach(attr",{"_index":313,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["foreach(stat",{"_index":322,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["foreach(wrappernam",{"_index":397,"title":{},"body":{"components/FormlyField.html":{}}}],["form",{"_index":8,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["form'},{'nam",{"_index":421,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["form.at(0",{"_index":107,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["formarray",{"_index":74,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["format",{"_index":835,"title":{},"body":{"contributing.html":{}}}],["formcontrol",{"_index":24,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formcontrol](https://angular.io/api/forms/formcontrol",{"_index":526,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formgroup",{"_index":15,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["formgroupdirect",{"_index":431,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formli",{"_index":149,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["formly.field.config",{"_index":287,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{}}}],["formly/bootstrap",{"_index":883,"title":{},"body":{"index.html":{}}}],["formly/cor",{"_index":875,"title":{},"body":{"index.html":{}}}],["formly/core@2.x",{"_index":866,"title":{},"body":{"index.html":{}}}],["formly/core@3.x",{"_index":864,"title":{},"body":{"index.html":{}}}],["formly/ion",{"_index":884,"title":{},"body":{"index.html":{}}}],["formly/kendo",{"_index":886,"title":{},"body":{"index.html":{}}}],["formly/materi",{"_index":882,"title":{},"body":{"index.html":{}}}],["formly/materialnpm",{"_index":881,"title":{},"body":{"index.html":{}}}],["formly/primeng",{"_index":885,"title":{},"body":{"index.html":{}}}],["formly@1.x",{"_index":867,"title":{},"body":{"index.html":{}}}],["formly_config_token",{"_index":145,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"modules/FormlyModule.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/variables.html":{}}}],["formly_valid",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formlyattribut",{"_index":272,"title":{"directives/FormlyAttributes.html":{}},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyattributeev",{"_index":572,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/typealiases.html":{}}}],["formlybootstrapmodul",{"_index":888,"title":{},"body":{"index.html":{}}}],["formlyconfig",{"_index":154,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["formlyfield",{"_index":346,"title":{"components/FormlyField.html":{}},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyfieldconfig",{"_index":12,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["formlyform",{"_index":420,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyformbuild",{"_index":69,"title":{},"body":{"classes/FieldArrayType.html":{},"modules/FormlyModule.html":{}}}],["formlyformexpress",{"_index":611,"title":{},"body":{"modules/FormlyModule.html":{}}}],["formlyformopt",{"_index":18,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["formlygroup",{"_index":422,"title":{"components/FormlyGroup.html":{}},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyionicmodul",{"_index":890,"title":{},"body":{"index.html":{}}}],["formlyj",{"_index":923,"title":{},"body":{"license.html":{}}}],["formlykendomodul",{"_index":892,"title":{},"body":{"index.html":{}}}],["formlylifecyclefn",{"_index":369,"title":{"interfaces/FormlyLifeCycleFn.html":{}},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formlylifecycleopt",{"_index":370,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formlymaterialmodul",{"_index":889,"title":{},"body":{"index.html":{}}}],["formlymodul",{"_index":591,"title":{"modules/FormlyModule.html":{}},"body":{"modules/FormlyModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["formlymodule.forroot",{"_index":893,"title":{},"body":{"index.html":{}}}],["formlyprimengmodul",{"_index":891,"title":{},"body":{"index.html":{}}}],["formlytemplateopt",{"_index":43,"title":{},"body":{"classes/Field.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formlyvalidationmessag",{"_index":424,"title":{"components/FormlyValidationMessage.html":{}},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyvaluechangeev",{"_index":589,"title":{"interfaces/FormlyValueChangeEvent.html":{}},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formstat",{"_index":35,"title":{},"body":{"classes/Field.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["forroot(config",{"_index":616,"title":{},"body":{"modules/FormlyModule.html":{}}}],["forth",{"_index":760,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":707,"title":{},"body":{"contributing.html":{}}}],["free",{"_index":698,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["function",{"_index":345,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/typealiases.html":{}}}],["function(field",{"_index":168,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["furnish",{"_index":944,"title":{},"body":{"license.html":{}}}],["further",{"_index":873,"title":{},"body":{"index.html":{}}}],["gener",{"_index":445,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["get",{"_index":669,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["geterrormessag",{"_index":628,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["getformcontrol",{"_index":25,"title":{},"body":{"classes/Field.html":{}}}],["getformst",{"_index":36,"title":{},"body":{"classes/Field.html":{}}}],["getid",{"_index":33,"title":{},"body":{"classes/Field.html":{}}}],["getkey",{"_index":22,"title":{},"body":{"classes/Field.html":{}}}],["getmergedfield(field",{"_index":221,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getpropvalue(field",{"_index":329,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["getshowerror",{"_index":30,"title":{},"body":{"classes/Field.html":{}}}],["getstatementvalue(stat",{"_index":334,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["getto",{"_index":27,"title":{},"body":{"classes/Field.html":{}}}],["gettype(nam",{"_index":216,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getvalidator(nam",{"_index":248,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getvalidatormessage(nam",{"_index":252,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getwrapper(nam",{"_index":240,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["git",{"_index":779,"title":{},"body":{"contributing.html":{}}}],["github",{"_index":710,"title":{},"body":{"contributing.html":{}}}],["gitter",{"_index":700,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":756,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["go",{"_index":456,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["goe",{"_index":916,"title":{},"body":{"index.html":{}}}],["good",{"_index":812,"title":{},"body":{"contributing.html":{}}}],["grant",{"_index":926,"title":{},"body":{"license.html":{}}}],["group",{"_index":427,"title":{},"body":{"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["group'},{'nam",{"_index":423,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["guid",{"_index":869,"title":{},"body":{"index.html":{}}}],["guidelin",{"_index":679,"title":{},"body":{"contributing.html":{}}}],["hard",{"_index":790,"title":{},"body":{"contributing.html":{}}}],["have",{"_index":754,"title":{},"body":{"contributing.html":{}}}],["hear",{"_index":800,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":674,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":457,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["herebi",{"_index":925,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":578,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["hide",{"_index":518,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["hideexpress",{"_index":520,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["histori",{"_index":840,"title":{},"body":{"contributing.html":{}}}],["holder",{"_index":957,"title":{},"body":{"license.html":{}}}],["host",{"_index":350,"title":{},"body":{"components/FormlyField.html":{}}}],["hostlisten",{"_index":276,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["hostlistener('blur",{"_index":304,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["hostlistener('focu",{"_index":300,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["html",{"_index":415,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["http://plnkr.co",{"_index":753,"title":{},"body":{"contributing.html":{}}}],["https://material.angular.io/guide/get",{"_index":880,"title":{},"body":{"index.html":{}}}],["id",{"_index":32,"title":{},"body":{"classes/Field.html":{},"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["immedi",{"_index":558,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["implement",{"_index":114,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["impli",{"_index":951,"title":{},"body":{"license.html":{}}}],["import",{"_index":38,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["importantli",{"_index":765,"title":{},"body":{"contributing.html":{}}}],["includ",{"_index":934,"title":{},"body":{"license.html":{}}}],["inclus",{"_index":695,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["inform",{"_index":489,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["initi",{"_index":561,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["initialmodel",{"_index":77,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["inject",{"_index":141,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"overview.html":{}}}],["injectiontoken",{"_index":142,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["injectiontoken('formly_config_token",{"_index":146,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":7,"title":{},"body":{"classes/Field.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["input('formlyattribut",{"_index":288,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["insist",{"_index":780,"title":{},"body":{"contributing.html":{}}}],["instal",{"_index":874,"title":{},"body":{"index.html":{}}}],["instead",{"_index":505,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["integ",{"_index":553,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["interestingli",{"_index":783,"title":{},"body":{"contributing.html":{}}}],["interfac",{"_index":132,"title":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"overview.html":{}}}],["investig",{"_index":798,"title":{},"body":{"contributing.html":{}}}],["ionic",{"_index":858,"title":{},"body":{"index.html":{}}}],["isnullorundefin",{"_index":85,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["isnullorundefined(i",{"_index":90,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["isol",{"_index":796,"title":{},"body":{"contributing.html":{}}}],["issu",{"_index":685,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["it'",{"_index":542,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["javascript",{"_index":903,"title":{},"body":{"index.html":{}}}],["json",{"_index":849,"title":{},"body":{"index.html":{}}}],["keep",{"_index":692,"title":{},"body":{"contributing.html":{}}}],["kendo",{"_index":859,"title":{},"body":{"index.html":{}}}],["kent",{"_index":910,"title":{},"body":{"index.html":{}}}],["key",{"_index":21,"title":{},"body":{"classes/Field.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["keydown",{"_index":296,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["keypress",{"_index":298,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["keyup",{"_index":297,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["khan",{"_index":915,"title":{},"body":{"index.html":{}}}],["kind",{"_index":719,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["know",{"_index":459,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["label",{"_index":573,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["larger",{"_index":794,"title":{},"body":{"contributing.html":{}}}],["layout",{"_index":538,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["lead",{"_index":836,"title":{},"body":{"contributing.html":{}}}],["legend",{"_index":414,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["liabil",{"_index":961,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":958,"title":{},"body":{"license.html":{}}}],["lib",{"_index":857,"title":{},"body":{"index.html":{}}}],["librari",{"_index":764,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["licens",{"_index":919,"title":{"license.html":{}},"body":{"license.html":{}}}],["lifecycl",{"_index":409,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["lifecyclehooks(callback",{"_index":411,"title":{},"body":{"components/FormlyField.html":{}}}],["limit",{"_index":935,"title":{},"body":{"license.html":{}}}],["link",{"_index":441,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["list",{"_index":148,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["liter",{"_index":651,"title":{},"body":{"interfaces/ManipulatorOption.html":{}}}],["live",{"_index":755,"title":{},"body":{"contributing.html":{}}}],["look",{"_index":458,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["love",{"_index":672,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["main",{"_index":523,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["mainli",{"_index":851,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":147,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["major",{"_index":720,"title":{},"body":{"contributing.html":{}}}],["make",{"_index":536,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["manipul",{"_index":266,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["manipulator.class()[manipulator.method](thi",{"_index":255,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["manipulatoropt",{"_index":254,"title":{"interfaces/ManipulatorOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["manipulatorwrapp",{"_index":164,"title":{"interfaces/ManipulatorWrapper.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["map",{"_index":465,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["match",{"_index":57,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["materi",{"_index":871,"title":{},"body":{"index.html":{}}}],["material2",{"_index":860,"title":{},"body":{"index.html":{}}}],["max",{"_index":579,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":582,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["mayb",{"_index":736,"title":{},"body":{"contributing.html":{}}}],["merchant",{"_index":952,"title":{},"body":{"license.html":{}}}],["merg",{"_index":937,"title":{},"body":{"license.html":{}}}],["mergeextendedtype(nam",{"_index":257,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["messag",{"_index":160,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["message(fieldform.errors[error",{"_index":647,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.t",{"_index":621,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:11",{"_index":625,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:12",{"_index":626,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:14",{"_index":624,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:18",{"_index":629,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["messageproperti",{"_index":477,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["metadata",{"_index":274,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["method",{"_index":64,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["millisecond",{"_index":556,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["min",{"_index":580,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["mind",{"_index":821,"title":{},"body":{"contributing.html":{}}}],["minim",{"_index":750,"title":{},"body":{"contributing.html":{}}}],["minlength",{"_index":581,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["miscellan",{"_index":973,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":714,"title":{},"body":{"contributing.html":{}}}],["mit",{"_index":920,"title":{},"body":{"license.html":{}}}],["model",{"_index":9,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["model[key",{"_index":439,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["modelchang",{"_index":352,"title":{},"body":{"components/FormlyField.html":{}}}],["modelopt",{"_index":559,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["modifi",{"_index":936,"title":{},"body":{"license.html":{}}}],["modul",{"_index":590,"title":{"modules/FormlyModule.html":{},"modules.html":{}},"body":{"modules/FormlyModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithprovid",{"_index":603,"title":{},"body":{"modules/FormlyModule.html":{}}}],["moham",{"_index":913,"title":{},"body":{"index.html":{}}}],["more",{"_index":488,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["much",{"_index":497,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["multi",{"_index":618,"title":{},"body":{"modules/FormlyModule.html":{}}}],["name",{"_index":72,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["nativescript",{"_index":862,"title":{},"body":{"index.html":{}}}],["need",{"_index":494,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["new",{"_index":101,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ng",{"_index":673,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ngaftercontentcheck",{"_index":128,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngaftercontentinit",{"_index":127,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngafterviewcheck",{"_index":130,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngafterviewinit",{"_index":129,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngdocheck",{"_index":126,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngform",{"_index":432,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["ngmodul",{"_index":602,"title":{},"body":{"modules/FormlyModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":125,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{}}}],["ngondestroy",{"_index":131,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngoninit",{"_index":124,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngx",{"_index":847,"title":{},"body":{"index.html":{}}}],["none",{"_index":373,"title":{},"body":{"components/FormlyField.html":{}}}],["noninfring",{"_index":955,"title":{},"body":{"license.html":{}}}],["note",{"_index":444,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["notic",{"_index":946,"title":{},"body":{"license.html":{}}}],["npm",{"_index":776,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["null",{"_index":139,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["number",{"_index":76,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["object",{"_index":463,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["object.assign(ref.inst",{"_index":386,"title":{},"body":{"components/FormlyField.html":{}}}],["object.keys(attributes).foreach(nam",{"_index":318,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["observ",{"_index":435,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["obtain",{"_index":929,"title":{},"body":{"license.html":{}}}],["on",{"_index":492,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["onblur",{"_index":305,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["onchang",{"_index":116,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["ondestroy",{"_index":122,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["onfocu",{"_index":301,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["oninit",{"_index":115,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["open",{"_index":694,"title":{},"body":{"contributing.html":{}}}],["opportun",{"_index":912,"title":{},"body":{"index.html":{}}}],["option",{"_index":10,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.compon",{"_index":206,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.defaultopt",{"_index":212,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.extend",{"_index":210,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.foreach((opt",{"_index":202,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.nam",{"_index":208,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.typ",{"_index":237,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.types.foreach((typ",{"_index":238,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.wrapp",{"_index":213,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.wrappers.foreach((wrapp",{"_index":214,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["optionstyp",{"_index":462,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["order",{"_index":747,"title":{},"body":{"contributing.html":{}}}],["origin",{"_index":816,"title":{},"body":{"contributing.html":{}}}],["otherwis",{"_index":965,"title":{},"body":{"license.html":{}}}],["out",{"_index":599,"title":{},"body":{"modules/FormlyModule.html":{},"contributing.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outlin",{"_index":721,"title":{},"body":{"contributing.html":{}}}],["output",{"_index":351,"title":{},"body":{"components/FormlyField.html":{}}}],["over",{"_index":549,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["overflow",{"_index":703,"title":{},"body":{"contributing.html":{}}}],["overview",{"_index":971,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":777,"title":{"dependencies.html":{}},"body":{"contributing.html":{},"index.html":{}}}],["pair",{"_index":482,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["paramet",{"_index":71,"title":{},"body":{"classes/FieldArrayType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["parentform",{"_index":588,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["parser",{"_index":571,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["part",{"_index":514,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["parti",{"_index":763,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":481,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["pass",{"_index":632,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["patient",{"_index":818,"title":{},"body":{"contributing.html":{}}}],["pattern",{"_index":583,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["peopl",{"_index":833,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["permiss",{"_index":924,"title":{},"body":{"license.html":{}}}],["permit",{"_index":943,"title":{},"body":{"license.html":{}}}],["person",{"_index":928,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":566,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["placehold",{"_index":290,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["pleas",{"_index":696,"title":{},"body":{"contributing.html":{}}}],["plugin",{"_index":548,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["plunk",{"_index":787,"title":{},"body":{"contributing.html":{}}}],["plunker",{"_index":772,"title":{},"body":{"contributing.html":{}}}],["point",{"_index":769,"title":{},"body":{"contributing.html":{}}}],["portion",{"_index":949,"title":{},"body":{"license.html":{}}}],["possibl",{"_index":744,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":450,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["postwrapp",{"_index":165,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["power",{"_index":850,"title":{},"body":{"index.html":{}}}],["pr",{"_index":804,"title":{},"body":{"contributing.html":{}}}],["pre",{"_index":878,"title":{},"body":{"index.html":{}}}],["precis",{"_index":834,"title":{},"body":{"contributing.html":{}}}],["prepar",{"_index":786,"title":{},"body":{"contributing.html":{}}}],["pretti",{"_index":496,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["prevent",{"_index":725,"title":{},"body":{"contributing.html":{}}}],["previousvalu",{"_index":341,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["prewrapp",{"_index":163,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["primeng",{"_index":861,"title":{},"body":{"index.html":{}}}],["privat",{"_index":256,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["problem",{"_index":684,"title":{},"body":{"contributing.html":{}}}],["project",{"_index":730,"title":{},"body":{"contributing.html":{}}}],["promis",{"_index":502,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["prompt",{"_index":813,"title":{},"body":{"contributing.html":{}}}],["prop",{"_index":330,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["properti",{"_index":63,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["propos",{"_index":715,"title":{},"body":{"contributing.html":{}}}],["provid",{"_index":527,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"license.html":{},"overview.html":{}}}],["public",{"_index":824,"title":{},"body":{"contributing.html":{}}}],["publish",{"_index":938,"title":{},"body":{"license.html":{}}}],["pull",{"_index":712,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":954,"title":{},"body":{"license.html":{}}}],["push",{"_index":815,"title":{},"body":{"contributing.html":{}}}],["question",{"_index":683,"title":{},"body":{"contributing.html":{}}}],["quick",{"_index":868,"title":{},"body":{"index.html":{}}}],["quickli",{"_index":768,"title":{},"body":{"contributing.html":{}}}],["rais",{"_index":701,"title":{},"body":{"contributing.html":{}}}],["reactiv",{"_index":852,"title":{},"body":{"index.html":{}}}],["reactiveformsmodul",{"_index":607,"title":{},"body":{"modules/FormlyModule.html":{},"index.html":{}}}],["read",{"_index":375,"title":{},"body":{"components/FormlyField.html":{},"contributing.html":{}}}],["readabl",{"_index":837,"title":{},"body":{"contributing.html":{}}}],["readili",{"_index":740,"title":{},"body":{"contributing.html":{}}}],["readm",{"_index":830,"title":{},"body":{"contributing.html":{}}}],["readonli",{"_index":293,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["realli",{"_index":795,"title":{},"body":{"contributing.html":{}}}],["reason",{"_index":476,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["recommend",{"_index":515,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["record",{"_index":842,"title":{},"body":{"contributing.html":{}}}],["ref",{"_index":406,"title":{},"body":{"components/FormlyField.html":{}}}],["regist",{"_index":152,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["relat",{"_index":440,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["remov",{"_index":66,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyValidationMessage.html":{}}}],["remove(i",{"_index":81,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["render",{"_index":283,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["renderer2",{"_index":280,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["replac",{"_index":551,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["repositori",{"_index":711,"title":{},"body":{"contributing.html":{}}}],["reproduc",{"_index":745,"title":{},"body":{"contributing.html":{}}}],["reproduct",{"_index":751,"title":{},"body":{"contributing.html":{}}}],["request",{"_index":688,"title":{},"body":{"contributing.html":{}}}],["requir",{"_index":460,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["reserv",{"_index":455,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["reset",{"_index":530,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"overview.html":{}}}],["resetmodel",{"_index":587,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["rest",{"_index":544,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["restrict",{"_index":933,"title":{},"body":{"license.html":{}}}],["result",{"_index":56,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":47,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["reusabl",{"_index":905,"title":{},"body":{"index.html":{}}}],["reversedeepmerg",{"_index":144,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["reversedeepmerge(field",{"_index":223,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["right",{"_index":771,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["roadmap",{"_index":906,"title":{},"body":{"index.html":{}}}],["row",{"_index":575,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["rule",{"_index":480,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["run",{"_index":485,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["rxjs/observ",{"_index":436,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["rxjs/subject",{"_index":434,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["same",{"_index":499,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["save",{"_index":781,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["save2",{"_index":876,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":752,"title":{},"body":{"contributing.html":{}}}],["screencast",{"_index":843,"title":{},"body":{"contributing.html":{}}}],["search",{"_index":734,"title":{},"body":{"contributing.html":{}}}],["second",{"_index":511,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["see",{"_index":487,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["selector",{"_index":275,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{},"index.html":{}}}],["sell",{"_index":942,"title":{},"body":{"license.html":{}}}],["server",{"_index":451,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["services/formly.config",{"_index":368,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["services/formly.form.build",{"_index":87,"title":{},"body":{"classes/FieldArrayType.html":{},"modules/FormlyModule.html":{}}}],["services/formly.form.express",{"_index":612,"title":{},"body":{"modules/FormlyModule.html":{}}}],["set",{"_index":446,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["setfieldform(control",{"_index":627,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["setmanipulator(manipul",{"_index":253,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["settype(opt",{"_index":200,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["settypewrapper(typ",{"_index":242,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["setvalidator(opt",{"_index":246,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["setwrapper(opt",{"_index":235,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["shall",{"_index":947,"title":{},"body":{"license.html":{}}}],["show",{"_index":478,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["showerror",{"_index":29,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["signatur",{"_index":136,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/ManipulatorWrapper.html":{}}}],["simpl",{"_index":540,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["simplechang",{"_index":123,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{}}}],["small",{"_index":731,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":931,"title":{},"body":{"license.html":{}}}],["sometim",{"_index":789,"title":{},"body":{"contributing.html":{}}}],["soon",{"_index":743,"title":{},"body":{"contributing.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["spec",{"_index":822,"title":{},"body":{"contributing.html":{}}}],["special",{"_index":909,"title":{},"body":{"index.html":{}}}],["specif",{"_index":448,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["specifi",{"_index":443,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["src/.../formly.config.t",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../formly.field.config.t",{"_index":976,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.t",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/src/components/formly.attributes.t",{"_index":273,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:12",{"_index":286,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:16",{"_index":285,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:18",{"_index":282,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:8",{"_index":284,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.field.config.t",{"_index":429,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/src/components/formly.field.config.ts:192",{"_index":430,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{}}}],["src/core/src/components/formly.field.config.ts:218",{"_index":648,"title":{},"body":{"interfaces/FormlyValueChangeEvent.html":{}}}],["src/core/src/components/formly.field.config.ts:219",{"_index":649,"title":{},"body":{"interfaces/FormlyValueChangeEvent.html":{}}}],["src/core/src/components/formly.field.config.ts:220",{"_index":650,"title":{},"body":{"interfaces/FormlyValueChangeEvent.html":{}}}],["src/core/src/components/formly.field.t",{"_index":349,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:21",{"_index":358,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:22",{"_index":357,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:23",{"_index":356,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:24",{"_index":361,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:25",{"_index":363,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:26",{"_index":366,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:28",{"_index":355,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.group.t",{"_index":426,"title":{},"body":{"components/FormlyGroup.html":{}}}],["src/core/src/core.module.t",{"_index":600,"title":{},"body":{"modules/FormlyModule.html":{}}}],["src/core/src/services/formly.config.t",{"_index":134,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/variables.html":{}}}],["src/core/src/services/formly.config.ts:190",{"_index":660,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:191",{"_index":657,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:192",{"_index":661,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:193",{"_index":659,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:194",{"_index":658,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:198",{"_index":667,"title":{},"body":{"interfaces/WrapperOption.html":{}}}],["src/core/src/services/formly.config.ts:199",{"_index":666,"title":{},"body":{"interfaces/WrapperOption.html":{}}}],["src/core/src/services/formly.config.ts:200",{"_index":668,"title":{},"body":{"interfaces/WrapperOption.html":{}}}],["src/core/src/services/formly.config.ts:203",{"_index":140,"title":{},"body":{"interfaces/FieldValidatorFn.html":{}}}],["src/core/src/services/formly.config.ts:208",{"_index":664,"title":{},"body":{"interfaces/ValidatorOption.html":{}}}],["src/core/src/services/formly.config.ts:209",{"_index":665,"title":{},"body":{"interfaces/ValidatorOption.html":{}}}],["src/core/src/services/formly.config.ts:213",{"_index":663,"title":{},"body":{"interfaces/ValidationMessageOption.html":{}}}],["src/core/src/services/formly.config.ts:214",{"_index":662,"title":{},"body":{"interfaces/ValidationMessageOption.html":{}}}],["src/core/src/services/formly.config.ts:218",{"_index":652,"title":{},"body":{"interfaces/ManipulatorOption.html":{}}}],["src/core/src/services/formly.config.ts:219",{"_index":653,"title":{},"body":{"interfaces/ManipulatorOption.html":{}}}],["src/core/src/services/formly.config.ts:222",{"_index":654,"title":{},"body":{"interfaces/ManipulatorWrapper.html":{}}}],["src/core/src/services/formly.config.ts:227",{"_index":656,"title":{},"body":{"interfaces/TemplateManipulators.html":{}}}],["src/core/src/services/formly.config.ts:228",{"_index":655,"title":{},"body":{"interfaces/TemplateManipulators.html":{}}}],["src/core/src/templates/field",{"_index":59,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["src/core/src/templates/field.t",{"_index":5,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:11",{"_index":23,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:13",{"_index":26,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:15",{"_index":28,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:17",{"_index":31,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:19",{"_index":34,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:21",{"_index":37,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:6",{"_index":16,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:7",{"_index":14,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:8",{"_index":17,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:9",{"_index":19,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.type.t",{"_index":113,"title":{},"body":{"classes/FieldType.html":{}}}],["src/core/src/templates/field.wrapper.t",{"_index":268,"title":{},"body":{"classes/FieldWrapper.html":{}}}],["src/core/src/templates/field.wrapper.ts:5",{"_index":271,"title":{},"body":{"classes/FieldWrapper.html":{}}}],["src/core/src/templates/formly.valid",{"_index":620,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["src/core/src/utils.t",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":702,"title":{},"body":{"contributing.html":{}}}],["stackblitz",{"_index":870,"title":{},"body":{"index.html":{}}}],["standalon",{"_index":778,"title":{},"body":{"contributing.html":{}}}],["start",{"_index":670,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":471,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["statement",{"_index":294,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["static",{"_index":615,"title":{},"body":{"modules/FormlyModule.html":{}}}],["statu",{"_index":529,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["step",{"_index":292,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["store",{"_index":437,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["string",{"_index":53,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["string|numb",{"_index":585,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["string|regexp",{"_index":584,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["style",{"_index":828,"title":{},"body":{"contributing.html":{}}}],["style.display",{"_index":371,"title":{},"body":{"components/FormlyField.html":{}}}],["subject",{"_index":433,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["sublicens",{"_index":940,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":689,"title":{},"body":{"contributing.html":{}}}],["submit",{"_index":709,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["submit(model",{"_index":901,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":948,"title":{},"body":{"license.html":{}}}],["successfulli",{"_index":728,"title":{},"body":{"contributing.html":{}}}],["suitabl",{"_index":773,"title":{},"body":{"contributing.html":{}}}],["super",{"_index":89,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["support",{"_index":706,"title":{},"body":{"contributing.html":{},"index.html":{},"modules.html":{}}}],["sure",{"_index":717,"title":{},"body":{"contributing.html":{}}}],["svg",{"_index":969,"title":{},"body":{"modules.html":{}}}],["systemat",{"_index":748,"title":{},"body":{"contributing.html":{}}}],["tabindex",{"_index":291,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["tag",{"_index":705,"title":{},"body":{"contributing.html":{}}}],["tbc",{"_index":827,"title":{},"body":{"contributing.html":{}}}],["techniqu",{"_index":452,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["templat",{"_index":153,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["templatemanipul",{"_index":162,"title":{"interfaces/TemplateManipulators.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["templateopt",{"_index":461,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["templates/field",{"_index":143,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["templates/field.typ",{"_index":428,"title":{},"body":{"components/FormlyGroup.html":{}}}],["templates/formly.valid",{"_index":614,"title":{},"body":{"modules/FormlyModule.html":{}}}],["test",{"_index":810,"title":{},"body":{"contributing.html":{}}}],["thank",{"_index":908,"title":{},"body":{"index.html":{}}}],["themselv",{"_index":785,"title":{},"body":{"contributing.html":{}}}],["third",{"_index":512,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["this.addconfig(config",{"_index":180,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.addvalidatormessage(validation.nam",{"_index":196,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.attribut",{"_index":309,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.builder.buildform(form",{"_index":102,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.canapplyrender(fieldchang",{"_index":311,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.componentfactoryresolver.resolvecomponentfactory(compon",{"_index":405,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentref",{"_index":392,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentrefs.foreach(componentref",{"_index":390,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentrefs.foreach(ref",{"_index":385,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentrefs.push(ref",{"_index":408,"title":{},"body":{"components/FormlyField.html":{}}}],["this.createcomponent(fieldcompon",{"_index":399,"title":{},"body":{"components/FormlyField.html":{}}}],["this.createfieldcompon",{"_index":383,"title":{},"body":{"components/FormlyField.html":{}}}],["this.elementref.nativeel",{"_index":315,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.elementref.nativeelement.focu",{"_index":327,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.elementref.nativeelement[this.field.focu",{"_index":328,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.extra",{"_index":199,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.field",{"_index":388,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["this.field.asyncvalid",{"_index":644,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.asyncvalidators[error",{"_index":645,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.asyncvalidators[error].messag",{"_index":646,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.fieldgroup.foreach((f",{"_index":111,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup.foreach((field",{"_index":98,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup.length",{"_index":91,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup.splice(i",{"_index":96,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup[i",{"_index":103,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.focu",{"_index":302,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.field.formcontrol",{"_index":49,"title":{},"body":{"classes/Field.html":{},"components/FormlyValidationMessage.html":{}}}],["this.field.id",{"_index":54,"title":{},"body":{"classes/Field.html":{}}}],["this.field.key",{"_index":48,"title":{},"body":{"classes/Field.html":{}}}],["this.field.lifecycl",{"_index":410,"title":{},"body":{"components/FormlyField.html":{}}}],["this.field.templ",{"_index":382,"title":{},"body":{"components/FormlyField.html":{}}}],["this.field.templateopt",{"_index":50,"title":{},"body":{"classes/Field.html":{},"directives/FormlyAttributes.html":{}}}],["this.field.templateoptions.attribut",{"_index":317,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.field.templateoptions[stat",{"_index":336,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.field.valid",{"_index":639,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validation.messag",{"_index":640,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validation.messages[error",{"_index":641,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validators[error",{"_index":642,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validators[error].messag",{"_index":643,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.wrapp",{"_index":396,"title":{},"body":{"components/FormlyField.html":{}}}],["this.fieldcompon",{"_index":395,"title":{},"body":{"components/FormlyField.html":{}}}],["this.form",{"_index":387,"title":{},"body":{"components/FormlyField.html":{}}}],["this.formcontrol.insert(i",{"_index":106,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.formcontrol.removeat(i",{"_index":109,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.formlyconfig.gettype(this.field.typ",{"_index":394,"title":{},"body":{"components/FormlyField.html":{}}}],["this.formlyconfig.getvalidatormessage(error",{"_index":638,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.formlyconfig.getwrapper(wrappername).compon",{"_index":400,"title":{},"body":{"components/FormlyField.html":{}}}],["this.getpropvalue(fieldchange.previousvalu",{"_index":342,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.getpropvalue(this.field",{"_index":316,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.getstatementvalue(stat",{"_index":324,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.gettype(option).defaultopt",{"_index":230,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.gettype(this.types[name].extend",{"_index":259,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.gettype(this.types[name].extends).defaultopt",{"_index":226,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.lifecyclehooks(this.lifecycle.aftercontentcheck",{"_index":377,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.aftercontentinit",{"_index":376,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.afterviewcheck",{"_index":379,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.afterviewinit",{"_index":378,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.docheck",{"_index":380,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.onchang",{"_index":384,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.ondestroy",{"_index":389,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.oninit",{"_index":381,"title":{},"body":{"components/FormlyField.html":{}}}],["this.mergeextendedtype(nam",{"_index":220,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.messages[nam",{"_index":251,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.model",{"_index":104,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyField.html":{}}}],["this.model.splice(i",{"_index":92,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.opt",{"_index":105,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyField.html":{}}}],["this.options).resettrackmodelchang",{"_index":108,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.options.formst",{"_index":55,"title":{},"body":{"classes/Field.html":{}}}],["this.options.showerror(thi",{"_index":52,"title":{},"body":{"classes/Field.html":{}}}],["this.renderer.listen",{"_index":323,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.renderer.setattribut",{"_index":314,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.setmanipulator(manipul",{"_index":193,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settype(opt",{"_index":203,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settype(typ",{"_index":184,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settypewrapper(options.nam",{"_index":215,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settypewrapper(typ",{"_index":239,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.setvalidator(valid",{"_index":187,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.setwrapper(wrapp",{"_index":190,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.stat",{"_index":320,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.statements.indexof(prop",{"_index":343,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.types[nam",{"_index":217,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].compon",{"_index":232,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].defaultopt",{"_index":222,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].extend",{"_index":225,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].wrapp",{"_index":234,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.nam",{"_index":204,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].compon",{"_index":205,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].defaultopt",{"_index":211,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].extend",{"_index":209,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].nam",{"_index":207,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[typ",{"_index":243,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[type].wrapp",{"_index":244,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[type].wrappers.push(nam",{"_index":245,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.validators[nam",{"_index":249,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.validators[options.nam",{"_index":247,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.wrappers[nam",{"_index":241,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.wrappers[options.nam",{"_index":236,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["through",{"_index":839,"title":{},"body":{"contributing.html":{}}}],["throughout",{"_index":820,"title":{},"body":{"contributing.html":{}}}],["throw",{"_index":218,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["time",{"_index":563,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["today",{"_index":677,"title":{},"body":{"contributing.html":{}}}],["togeth",{"_index":535,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["tort",{"_index":964,"title":{},"body":{"license.html":{}}}],["tracker",{"_index":735,"title":{},"body":{"contributing.html":{}}}],["tree",{"_index":348,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["tri",{"_index":472,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["trigger",{"_index":557,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["true",{"_index":303,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["ts",{"_index":811,"title":{},"body":{"contributing.html":{}}}],["tslib",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.compon",{"_index":402,"title":{},"body":{"components/FormlyField.html":{}}}],["typealias",{"_index":974,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":344,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyValidationMessage.html":{}}}],["typeopt",{"_index":155,"title":{"interfaces/TypeOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["types/templ",{"_index":879,"title":{},"body":{"index.html":{}}}],["ui",{"_index":856,"title":{},"body":{"index.html":{}}}],["ultim",{"_index":782,"title":{},"body":{"contributing.html":{}}}],["unam",{"_index":135,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/ManipulatorWrapper.html":{}}}],["undefin",{"_index":95,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["understand",{"_index":788,"title":{},"body":{"contributing.html":{}}}],["unfortun",{"_index":797,"title":{},"body":{"contributing.html":{}}}],["unit",{"_index":823,"title":{},"body":{"contributing.html":{}}}],["unmatch",{"_index":854,"title":{},"body":{"index.html":{}}}],["updat",{"_index":555,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["updateinitialvalu",{"_index":586,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["us",{"_index":151,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":570,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["user'",{"_index":474,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["usevalu",{"_index":617,"title":{},"body":{"modules/FormlyModule.html":{}}}],["usual",{"_index":568,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["util",{"_index":86,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["valid",{"_index":156,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validation.messag",{"_index":197,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validation.show",{"_index":467,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["validationerror",{"_index":138,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validationmessag",{"_index":265,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validationmessageopt",{"_index":263,"title":{"interfaces/ValidationMessageOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validatorfn",{"_index":490,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["validatoropt",{"_index":157,"title":{"interfaces/ValidatorOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["valu",{"_index":360,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":417,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["variabl",{"_index":977,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veri",{"_index":539,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["version",{"_index":635,"title":{},"body":{"components/FormlyValidationMessage.html":{},"contributing.html":{},"index.html":{}}}],["via",{"_index":569,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["viewchild",{"_index":365,"title":{},"body":{"components/FormlyField.html":{}}}],["viewchild('fieldcompon",{"_index":374,"title":{},"body":{"components/FormlyField.html":{}}}],["viewcontainerref",{"_index":270,"title":{},"body":{"classes/FieldWrapper.html":{},"components/FormlyField.html":{}}}],["void",{"_index":80,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["wait",{"_index":817,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":742,"title":{},"body":{"contributing.html":{}}}],["warranti",{"_index":950,"title":{},"body":{"license.html":{}}}],["way",{"_index":534,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["wealth",{"_index":757,"title":{},"body":{"contributing.html":{}}}],["websit",{"_index":831,"title":{},"body":{"contributing.html":{}}}],["well",{"_index":770,"title":{},"body":{"contributing.html":{}}}],["whatev",{"_index":470,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["whenev",{"_index":567,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["whether",{"_index":517,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["wish",{"_index":447,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["without",{"_index":758,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["wonder",{"_index":917,"title":{},"body":{"index.html":{}}}],["work",{"_index":716,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["workaround",{"_index":739,"title":{},"body":{"contributing.html":{}}}],["wrap",{"_index":509,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["wrapper",{"_index":158,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["wrapperopt",{"_index":159,"title":{"interfaces/WrapperOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["wrapperref",{"_index":398,"title":{},"body":{"components/FormlyField.html":{}}}],["wrapperref.instance.fieldcompon",{"_index":401,"title":{},"body":{"components/FormlyField.html":{}}}],["write",{"_index":809,"title":{},"body":{"contributing.html":{}}}],["x1f449;pleas",{"_index":805,"title":{},"body":{"contributing.html":{}}}],["yarn",{"_index":807,"title":{},"body":{"contributing.html":{}}}],["ye",{"_index":79,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["year",{"_index":454,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["yester",{"_index":453,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["you'r",{"_index":449,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["zama",{"_index":914,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":598,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                form\n                            \n                            \n                                model\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        field\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:7\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        form\n                    \n                    \n                            \n                            Type:    FormGroup\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:6\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        model\n                    \n                    \n                            \n                            Type:    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:8\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                    \n                            \n                            Type:    FormlyFormOptions\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:9\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n\n                \n                    \n                        getkey()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:11\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        to\n                    \n                \n\n                \n                    \n                        getto()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:15\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showError\n                    \n                \n\n                \n                    \n                        getshowError()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:19\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formState\n                    \n                \n\n                \n                    \n                        getformState()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:21\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Input } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { FormlyTemplateOptions, FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport abstract class Field {\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() model: any;\n  @Input() options: FormlyFormOptions;\n\n  get key() { return this.field.key; }\n\n  get formControl(): AbstractControl { return this.field.formControl; }\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FieldArrayType.html":{"url":"classes/FieldArrayType.html","title":"class - FieldArrayType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  FieldArrayType\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field-array.type.ts\n        \n\n\n            \n                Extends\n            \n            \n                    FieldType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formControl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(builder: FormlyFormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/templates/field-array.type.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    builder\n                                                  \n                                                        \n                                                                    FormlyFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formControl:     FormArray\n\n                    \n                \n                    \n                        \n                            Type :     FormArray\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/src/templates/field-array.type.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \nadd(i?: number, initialModel?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/templates/field-array.type.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        initialModel\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \nremove(i: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/templates/field-array.type.ts:30\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\n\nexport abstract class FieldArrayType extends FieldType {\n  formControl: FormArray;\n\n constructor(private builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n    this.field.fieldGroup.splice(i, 0, { ...clone(this.field.fieldArray) });\n\n    this.field.fieldGroup.forEach((field, index) => {\n      field.key = `${index}`;\n    });\n\n    const form = new FormArray([]);\n    this.builder.buildForm(form, [this.field.fieldGroup[i]], this.model, this.options);\n    this.formControl.insert(i, form.at(0));\n\n    ( this.options).resetTrackModelChanges();\n  }\n\n  remove(i: number) {\n    this.formControl.removeAt(i);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, index) => f.key = `${index}`);\n    this.model.splice(i, 1);\n    ( this.options).resetTrackModelChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FieldType.html":{"url":"classes/FieldType.html","title":"class - FieldType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  FieldType\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field.type.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Field\n            \n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        DoCheck\n                        AfterContentInit\n                        AfterContentChecked\n                        AfterViewInit\n                        AfterViewChecked\n                        OnDestroy\n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from './field';\nimport { OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, AfterViewChecked, SimpleChanges } from '@angular/core';\n\nexport abstract class FieldType extends Field implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  ngOnInit() {}\n  ngOnChanges(changes: SimpleChanges) {}\n  ngDoCheck() {}\n  ngAfterContentInit() {}\n  ngAfterContentChecked() {}\n  ngAfterViewInit() {}\n  ngAfterViewChecked() {}\n  ngOnDestroy() {}\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldValidatorFn.html":{"url":"interfaces/FieldValidatorFn.html","title":"interface - FieldValidatorFn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FieldValidatorFn\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [c: AbstractControl, field: FormlyFieldConfig]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     ValidationErrors | null\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:203\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FieldWrapper.html":{"url":"classes/FieldWrapper.html","title":"class - FieldWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  FieldWrapper\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field.wrapper.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Field\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fieldComponent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fieldComponent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fieldComponent:     ViewContainerRef\n\n                    \n                \n                    \n                        \n                            Type :     ViewContainerRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/src/templates/field.wrapper.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ViewContainerRef } from '@angular/core';\nimport { Field } from './field';\n\nexport abstract class FieldWrapper extends Field {\n  fieldComponent: ViewContainerRef;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormlyAttributes.html":{"url":"directives/FormlyAttributes.html","title":"directive - FormlyAttributes","body":"\n                   \n\n\n\n\n\n\n  Directives\n  FormlyAttributes\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/components/formly.attributes.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [formlyAttributes]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formlyAttributes\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/components/formly.attributes.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        formlyAttributes\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.attributes.ts:8\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            blur\n                            \n                            \n                        \n                    \n                \n                \n                    \nblur()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/components/formly.attributes.ts:16\n                            \n                        \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            focus\n                            \n                            \n                        \n                    \n                \n                \n                    \nfocus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/components/formly.attributes.ts:12\n                            \n                        \n\n            \n        \n\n\n\n\n\n    \n\n\n    \n        import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, SimpleChange, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  private attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];\n  private statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\n  @HostListener('focus') onFocus() {\n    this.field.focus = true;\n  }\n\n  @HostListener('blur') onBlur() {\n    this.field.focus = false;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n      this.attributes\n        .filter(attr => this.canApplyRender(fieldChanges, attr))\n        .forEach(attr => this.renderer.setAttribute(\n          this.elementRef.nativeElement, attr, this.getPropValue(this.field, attr),\n        ));\n\n      if (this.field.templateOptions && this.field.templateOptions.attributes) {\n        const attributes = this.field.templateOptions.attributes;\n        Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n          this.elementRef.nativeElement, name, attributes[name] as string,\n        ));\n      }\n\n      this.statements\n        .filter(statement => this.canApplyRender(fieldChanges, statement))\n        .forEach(statement => this.renderer.listen(\n          this.elementRef.nativeElement, statement, this.getStatementValue(statement),\n        ));\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private getPropValue(field: FormlyFieldConfig, prop: string) {\n    field = field || {};\n    if (field.templateOptions && field.templateOptions[prop]) {\n      return field.templateOptions[prop];\n    }\n\n    return (field)[prop] || '';\n  }\n\n  private getStatementValue(statement: string) {\n    const fn = this.field.templateOptions[statement];\n\n    return (event: any) => fn(this.field, event);\n  }\n\n  private canApplyRender(fieldChange: SimpleChange, prop: string): Boolean {\n    const currentValue = this.getPropValue(this.field, prop),\n      previousValue = this.getPropValue(fieldChange.previousValue, prop);\n\n    if (previousValue !== currentValue) {\n      if (this.statements.indexOf(prop) !== -1) {\n        return typeof currentValue === 'function';\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyField.html":{"url":"components/FormlyField.html","title":"component - FormlyField","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyField\n\n\n\n    \n        Info\n    \n\n    \n        Source\n    \n\n    \n        DOM Tree\n    \n\n\n\n    \n    File\n\n\n    src/core/src/components/formly.field.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                DoCheck\n                AfterContentInit\n                AfterContentChecked\n                AfterViewInit\n                AfterViewChecked\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                formly-field\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fieldComponent\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                form\n                            \n                            \n                                model\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                modelChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formlyConfig: FormlyConfig, componentFactoryResolver: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/components/formly.field.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    formlyConfig\n                                                  \n                                                        \n                                                                    FormlyConfig\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    componentFactoryResolver\n                                                  \n                                                        \n                                                                    ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        field\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        form\n                    \n                    \n                            \n                            Type:    FormGroup\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        model\n                    \n                    \n                            \n                            Type:    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                    \n                            \n                            Type:    FormlyFormOptions\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:24\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        modelChange\n                    \n                    \n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:25\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fieldComponent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fieldComponent:     ViewContainerRef\n\n                    \n                \n                    \n                        \n                            Type :     ViewContainerRef\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n  Component, OnInit, OnChanges, EventEmitter, Input, Output, OnDestroy,\n  ViewContainerRef, ViewChild, ComponentRef, ComponentFactoryResolver, SimpleChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig, TypeOption } from '../services/formly.config';\nimport { Field } from '../templates/field';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyLifeCycleFn, FormlyLifeCycleOptions } from './formly.field.config';\n\n@Component({\n  selector: 'formly-field',\n  template: `\n    \n    \n  `,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() model: any;\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions = {};\n  @Output() modelChange: EventEmitter = new EventEmitter();\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  private componentRefs: ComponentRef[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n  ) {}\n\n  ngAfterContentInit() {\n    this.lifeCycleHooks(this.lifecycle.afterContentInit);\n  }\n\n  ngAfterContentChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterContentChecked);\n  }\n\n  ngAfterViewInit() {\n    this.lifeCycleHooks(this.lifecycle.afterViewInit);\n  }\n\n  ngAfterViewChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterViewChecked);\n  }\n\n  ngDoCheck() {\n    this.lifeCycleHooks(this.lifecycle.doCheck);\n  }\n\n  ngOnInit() {\n    this.lifeCycleHooks(this.lifecycle.onInit);\n    if (!this.field.template) {\n      this.createFieldComponent();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.lifeCycleHooks(this.lifecycle.onChanges);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.lifeCycleHooks(this.lifecycle.onDestroy);\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private createFieldComponent(): ComponentRef {\n    const type = this.formlyConfig.getType(this.field.type);\n\n    let fieldComponent = this.fieldComponent;\n    (this.field.wrappers || []).forEach(wrapperName => {\n      const wrapperRef = this.createComponent(fieldComponent, this.formlyConfig.getWrapper(wrapperName).component);\n      fieldComponent = wrapperRef.instance.fieldComponent;\n    });\n\n    return this.createComponent(fieldComponent, type.component);\n  }\n\n  private createComponent(fieldComponent: ViewContainerRef, component: any): ComponentRef {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    let ref = >fieldComponent.createComponent(componentFactory);\n\n    Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n    });\n\n    this.componentRefs.push(ref);\n\n    return ref;\n  }\n\n  private get lifecycle(): FormlyLifeCycleOptions {\n    return this.field.lifecycle || {};\n  }\n\n  private lifeCycleHooks(callback: FormlyLifeCycleFn) {\n    if (callback) {\n      callback(this.form, this.field, this.model, this.options);\n    }\n  }\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'FormlyField', 'selector': 'formly-field'},{'name': 'FormlyForm', 'selector': 'formly-form'},{'name': 'FormlyGroup', 'selector': 'formly-group'},{'name': 'FormlyValidationMessage', 'selector': 'formly-validation-message'}];\n    var DIRECTIVES = [{'name': 'FormlyAttributes', 'selector': '[formlyAttributes]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyField'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyGroup.html":{"url":"components/FormlyGroup.html","title":"component - FormlyGroup","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyGroup\n\n\n\n    \n        Info\n    \n\n    \n        Source\n    \n\n    \n        DOM Tree\n    \n\n\n\n    \n    File\n\n\n    src/core/src/components/formly.group.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                formly-group\n            \n\n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    \n      \n    \n  `,\n})\nexport class FormlyGroup extends FieldType {}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'FormlyField', 'selector': 'formly-field'},{'name': 'FormlyForm', 'selector': 'formly-form'},{'name': 'FormlyGroup', 'selector': 'formly-group'},{'name': 'FormlyValidationMessage', 'selector': 'formly-validation-message'}];\n    var DIRECTIVES = [{'name': 'FormlyAttributes', 'selector': '[formlyAttributes]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyGroup'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormlyLifeCycleFn.html":{"url":"interfaces/FormlyLifeCycleFn.html","title":"interface - FormlyLifeCycleFn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FormlyLifeCycleFn\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/components/formly.field.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [form: FormGroup, field: FormlyFieldConfig, model: any, options: FormlyFormOptions]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:192\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup, AbstractControl, FormGroupDirective, NgForm, FormArray } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\nimport { Field } from '../templates/field';\nimport { TemplateManipulators } from '../services/formly.config';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface FormlyFieldConfig {\n  /**\n   * The model that stores all the data, where the model[key] is the value of the field\n   */\n  readonly model?: any;\n\n  /**\n   * The key that relates to the model. This will link the field value to the model\n   */\n  key?: string;\n\n  /**\n   * This allows you to specify the `id` of your field. Note, the `id` is generated if not set.\n   */\n  id?: string;\n\n  /**\n   * If you wish, you can specify a specific `name` for your field. This is useful if you're posting the form to a server using techniques of yester-year.\n   */\n  name?: string;\n\n  /**\n   * This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.\n   */\n  templateOptions?: FormlyTemplateOptions;\n\n  optionsTypes?: string[];\n\n  /**\n   * An object with a few useful properties\n   * - `validation.messages`: A map of message names that will be displayed when the field has errors.\n   * - `validation.show`: A boolean you as the developer can set to force displaying errors whatever the state of field. This is useful when you're trying to call the user's attention to some fields for some reason.\n   */\n  validation?: {\n    messages?: {\n      [messageProperties: string]: string | ((error: any, field: FormlyFieldConfig) => string);\n    };\n    show?: boolean;\n    [additionalProperties: string]: any;\n  };\n\n  /**\n   * Used to set validation rules for a particular field.\n   * Should be an object of key - value pairs. The value can either be an expression to evaluate or a function to run.\n   * Each should return a boolean value, returning true when the field is valid. See Validation for more information.\n   *\n   * {\n   *   validation?: (string | ValidatorFn)[] | ValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => boolean) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => boolean, message: string | ((error, field: FormlyFieldConfig) => string) });\n   * }\n   */\n  validators?: any;\n\n  /**\n   * Use this one for anything that needs to validate asynchronously.\n   * Pretty much exactly the same as the validators api, except it must be a function that returns a promise.\n   *\n   * {\n   *   validation?: (string | AsyncValidatorFn)[] | AsyncValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => Promise) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => Promise, message: string });\n   * }\n   */\n  asyncValidators?: any;\n\n  /**\n   * Can be set instead of `type` to render custom html content.\n   */\n  template?: string;\n\n  /**\n   *  It is expected to be the name of the wrappers.\n   *  The formly field template will be wrapped by the first wrapper, then the second, then the third, etc.\n   *  You can also specify these as part of a type (which is the recommended approach).\n   */\n  wrappers?: string[];\n\n  /**\n   * Whether to hide the field. Defaults to false. If you wish this to be conditional use `hideExpression`\n   */\n  hide?: boolean;\n\n  /**\n   * Conditionally hiding Field based on values from other Fields\n   */\n  hideExpression?: boolean | string | ((model: any, formState: any) => boolean);\n\n  /**\n   * An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.\n   */\n  expressionProperties?: { [property: string]: string | ((model: any, formState: any) => boolean) } | any;\n\n  /**\n   * This is the [FormControl](https://angular.io/api/forms/FormControl) for the field.\n   * It provides you more control like running validators, calculating status, and resetting state.\n   */\n  formControl?: AbstractControl;\n\n  /**\n   * You can specify your own class that will be applied to the `formly-field` component.\n   */\n  className?: string;\n\n  /**\n   * Specify your own class that will be applied to the `formly-group` component.\n   */\n  fieldGroupClassName?: string;\n\n  /**\n   * A field group is a way to group fields together, making advanced layout very simple.\n   * It can also be used to group fields that are associated with the same model (useful if it's different than the model for the rest of the fields).\n   */\n  fieldGroup?: FormlyFieldConfig[];\n\n  fieldArray?: FormlyFieldConfig;\n\n  /**\n   * This should be a formly-field type added either by you or a plugin. More information over at Creating Formly Fields.\n   */\n  type?: string;\n\n  /**\n   * Can be set to replace the component that is defined in `type`.\n   */\n  component?: any;\n\n  /**\n   * Whether to focus or blur the element field. Defaults to false. If you wish this to be conditional use `expressionProperties`\n   */\n  focus?: boolean;\n\n  /**\n   * An object with a few useful properties to control the model changes\n   * - `debounce`: integer value which contains the debounce model update value in milliseconds. A value of 0 triggers an immediate update.\n   */\n  modelOptions?: {\n    debounce?: {\n      default: number;\n    };\n  };\n\n  lifecycle?: FormlyLifeCycleOptions;\n\n  /**\n   * Use `defaultValue` to initialize it the model. If this is provided and the value of the model at compile-time is undefined, then the value of the model will be assigned to `defaultValue`.\n   */\n  defaultValue?: any;\n\n  /**\n   * Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.\n   */\n  parsers?: ((value: any) => {})[];\n}\n\nexport type FormlyAttributeEvent = (field: FormlyFieldConfig, event?: any) => void;\n\nexport interface FormlyTemplateOptions {\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  options?: any[] | Observable;\n  rows?: number;\n  cols?: number;\n  description?: string;\n  hidden?: boolean;\n  max?: number;\n  min?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string|RegExp;\n  required?: boolean;\n  tabindex?: number;\n  attributes?: { [key: string]: string|number };\n  step?: number;\n  focus?: FormlyAttributeEvent;\n  blur?: FormlyAttributeEvent;\n  keyup?: FormlyAttributeEvent;\n  keydown?: FormlyAttributeEvent;\n  click?: FormlyAttributeEvent;\n  change?: FormlyAttributeEvent;\n  keypress?: FormlyAttributeEvent;\n  templateManipulators?: TemplateManipulators;\n  [additionalProperties: string]: any;\n}\n\nexport interface FormlyLifeCycleFn {\n  (form?: FormGroup, field?: FormlyFieldConfig, model?: any, options?: FormlyFormOptions): void;\n}\n\nexport interface FormlyLifeCycleOptions {\n  onInit?: FormlyLifeCycleFn;\n  onChanges?: FormlyLifeCycleFn;\n  doCheck?: FormlyLifeCycleFn;\n  afterContentInit?: FormlyLifeCycleFn;\n  afterContentChecked?: FormlyLifeCycleFn;\n  afterViewInit?: FormlyLifeCycleFn;\n  afterViewChecked?: FormlyLifeCycleFn;\n  onDestroy?: FormlyLifeCycleFn;\n}\n\nexport interface FormlyFormOptions {\n  updateInitialValue?: () => void;\n  resetModel?: (model?: any) => void;\n  formState?: any;\n  fieldChanges?: Subject;\n  fieldTransform?: (fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[];\n  showError?: (field: Field) => boolean;\n  parentForm?: FormGroupDirective | NgForm | null;\n}\n\nexport interface FormlyValueChangeEvent {\n  field: FormlyFieldConfig;\n  type: string;\n  value: any;\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FormlyModule.html":{"url":"modules/FormlyModule.html","title":"module - FormlyModule","body":"\n                   \n\n\n\n\n  Modules\n  FormlyModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FormlyModule\n\n\n\ncluster_FormlyModule_declarations\n\n\n\ncluster_FormlyModule_exports\n\n\n\n\nFormlyForm\n\nFormlyForm\n\n\n\nFormlyModule\n\nFormlyModule\n\nFormlyModule -->\n\nFormlyForm->FormlyModule\n\n\n\n\n\nFormlyField\n\nFormlyField\n\nFormlyModule -->\n\nFormlyField->FormlyModule\n\n\n\n\n\nFormlyAttributes\n\nFormlyAttributes\n\nFormlyModule -->\n\nFormlyAttributes->FormlyModule\n\n\n\n\n\nFormlyGroup\n\nFormlyGroup\n\nFormlyModule -->\n\nFormlyGroup->FormlyModule\n\n\n\n\n\nFormlyValidationMessage\n\nFormlyValidationMessage\n\nFormlyModule -->\n\nFormlyValidationMessage->FormlyModule\n\n\n\n\n\nFormlyForm \n\nFormlyForm \n\nFormlyForm  -->\n\nFormlyModule->FormlyForm \n\n\n\n\n\nFormlyField \n\nFormlyField \n\nFormlyField  -->\n\nFormlyModule->FormlyField \n\n\n\n\n\nFormlyAttributes \n\nFormlyAttributes \n\nFormlyAttributes  -->\n\nFormlyModule->FormlyAttributes \n\n\n\n\n\nFormlyGroup \n\nFormlyGroup \n\nFormlyGroup  -->\n\nFormlyModule->FormlyGroup \n\n\n\n\n\nFormlyValidationMessage \n\nFormlyValidationMessage \n\nFormlyValidationMessage  -->\n\nFormlyModule->FormlyValidationMessage \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/src/core.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                FormlyForm\n                            \n                            \n                                FormlyField\n                            \n                            \n                                FormlyAttributes\n                            \n                            \n                                FormlyGroup\n                            \n                            \n                                FormlyValidationMessage\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                FormlyGroup\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    FormlyForm\n                            \n                            \n                                    FormlyField\n                            \n                            \n                                    FormlyAttributes\n                            \n                            \n                                    FormlyGroup\n                            \n                            \n                                    FormlyValidationMessage\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG_TOKEN } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyFormExpression } from './services/formly.form.expression';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\n\n@NgModule({\n  declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  entryComponents: [FormlyGroup],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        FormlyFormBuilder,\n        FormlyFormExpression,\n        FormlyConfig,\n        { provide: FORMLY_CONFIG_TOKEN, useValue: { types: [{ name: 'formly-group', component: FormlyGroup }] }, multi: true },\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyValidationMessage.html":{"url":"components/FormlyValidationMessage.html","title":"component - FormlyValidationMessage","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyValidationMessage\n\n\n\n    \n        Info\n    \n\n    \n        Source\n    \n\n    \n        DOM Tree\n    \n\n\n\n    \n    File\n\n\n    src/core/src/templates/formly.validation-message.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                formly-validation-message\n            \n\n\n\n            \n                template\n                {{ errorMessage }}\n            \n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                fieldForm\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formlyConfig: FormlyConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/templates/formly.validation-message.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    formlyConfig\n                                                  \n                                                        \n                                                                    FormlyConfig\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        field\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/formly.validation-message.ts:11\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        fieldForm\n                    \n                    \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/formly.validation-message.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fieldForm\n                    \n                \n\n\n                \n                    \n                        setfieldForm(control: )\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/formly.validation-message.ts:12\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                        control\n                                                    \n                                                    \n                                                        \n                                                                no\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n                \n                    \n                        geterrorMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/formly.validation-message.ts:18\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n  @Input() set fieldForm(control: FormControl) {\n    console.warn(`formly-validation-message: Passing 'fieldForm' input is deprecated and it will be removed in the 4.0 version.`);\n  }\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ errorMessage }}'\n    var COMPONENTS = [{'name': 'FormlyField', 'selector': 'formly-field'},{'name': 'FormlyForm', 'selector': 'formly-form'},{'name': 'FormlyGroup', 'selector': 'formly-group'},{'name': 'FormlyValidationMessage', 'selector': 'formly-validation-message'}];\n    var DIRECTIVES = [{'name': 'FormlyAttributes', 'selector': '[formlyAttributes]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyValidationMessage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormlyValueChangeEvent.html":{"url":"interfaces/FormlyValueChangeEvent.html","title":"interface - FormlyValueChangeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FormlyValueChangeEvent\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/components/formly.field.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:     FormlyFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormlyFieldConfig\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:218\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:219\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:220\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup, AbstractControl, FormGroupDirective, NgForm, FormArray } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\nimport { Field } from '../templates/field';\nimport { TemplateManipulators } from '../services/formly.config';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface FormlyFieldConfig {\n  /**\n   * The model that stores all the data, where the model[key] is the value of the field\n   */\n  readonly model?: any;\n\n  /**\n   * The key that relates to the model. This will link the field value to the model\n   */\n  key?: string;\n\n  /**\n   * This allows you to specify the `id` of your field. Note, the `id` is generated if not set.\n   */\n  id?: string;\n\n  /**\n   * If you wish, you can specify a specific `name` for your field. This is useful if you're posting the form to a server using techniques of yester-year.\n   */\n  name?: string;\n\n  /**\n   * This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.\n   */\n  templateOptions?: FormlyTemplateOptions;\n\n  optionsTypes?: string[];\n\n  /**\n   * An object with a few useful properties\n   * - `validation.messages`: A map of message names that will be displayed when the field has errors.\n   * - `validation.show`: A boolean you as the developer can set to force displaying errors whatever the state of field. This is useful when you're trying to call the user's attention to some fields for some reason.\n   */\n  validation?: {\n    messages?: {\n      [messageProperties: string]: string | ((error: any, field: FormlyFieldConfig) => string);\n    };\n    show?: boolean;\n    [additionalProperties: string]: any;\n  };\n\n  /**\n   * Used to set validation rules for a particular field.\n   * Should be an object of key - value pairs. The value can either be an expression to evaluate or a function to run.\n   * Each should return a boolean value, returning true when the field is valid. See Validation for more information.\n   *\n   * {\n   *   validation?: (string | ValidatorFn)[] | ValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => boolean) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => boolean, message: string | ((error, field: FormlyFieldConfig) => string) });\n   * }\n   */\n  validators?: any;\n\n  /**\n   * Use this one for anything that needs to validate asynchronously.\n   * Pretty much exactly the same as the validators api, except it must be a function that returns a promise.\n   *\n   * {\n   *   validation?: (string | AsyncValidatorFn)[] | AsyncValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => Promise) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => Promise, message: string });\n   * }\n   */\n  asyncValidators?: any;\n\n  /**\n   * Can be set instead of `type` to render custom html content.\n   */\n  template?: string;\n\n  /**\n   *  It is expected to be the name of the wrappers.\n   *  The formly field template will be wrapped by the first wrapper, then the second, then the third, etc.\n   *  You can also specify these as part of a type (which is the recommended approach).\n   */\n  wrappers?: string[];\n\n  /**\n   * Whether to hide the field. Defaults to false. If you wish this to be conditional use `hideExpression`\n   */\n  hide?: boolean;\n\n  /**\n   * Conditionally hiding Field based on values from other Fields\n   */\n  hideExpression?: boolean | string | ((model: any, formState: any) => boolean);\n\n  /**\n   * An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.\n   */\n  expressionProperties?: { [property: string]: string | ((model: any, formState: any) => boolean) } | any;\n\n  /**\n   * This is the [FormControl](https://angular.io/api/forms/FormControl) for the field.\n   * It provides you more control like running validators, calculating status, and resetting state.\n   */\n  formControl?: AbstractControl;\n\n  /**\n   * You can specify your own class that will be applied to the `formly-field` component.\n   */\n  className?: string;\n\n  /**\n   * Specify your own class that will be applied to the `formly-group` component.\n   */\n  fieldGroupClassName?: string;\n\n  /**\n   * A field group is a way to group fields together, making advanced layout very simple.\n   * It can also be used to group fields that are associated with the same model (useful if it's different than the model for the rest of the fields).\n   */\n  fieldGroup?: FormlyFieldConfig[];\n\n  fieldArray?: FormlyFieldConfig;\n\n  /**\n   * This should be a formly-field type added either by you or a plugin. More information over at Creating Formly Fields.\n   */\n  type?: string;\n\n  /**\n   * Can be set to replace the component that is defined in `type`.\n   */\n  component?: any;\n\n  /**\n   * Whether to focus or blur the element field. Defaults to false. If you wish this to be conditional use `expressionProperties`\n   */\n  focus?: boolean;\n\n  /**\n   * An object with a few useful properties to control the model changes\n   * - `debounce`: integer value which contains the debounce model update value in milliseconds. A value of 0 triggers an immediate update.\n   */\n  modelOptions?: {\n    debounce?: {\n      default: number;\n    };\n  };\n\n  lifecycle?: FormlyLifeCycleOptions;\n\n  /**\n   * Use `defaultValue` to initialize it the model. If this is provided and the value of the model at compile-time is undefined, then the value of the model will be assigned to `defaultValue`.\n   */\n  defaultValue?: any;\n\n  /**\n   * Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.\n   */\n  parsers?: ((value: any) => {})[];\n}\n\nexport type FormlyAttributeEvent = (field: FormlyFieldConfig, event?: any) => void;\n\nexport interface FormlyTemplateOptions {\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  options?: any[] | Observable;\n  rows?: number;\n  cols?: number;\n  description?: string;\n  hidden?: boolean;\n  max?: number;\n  min?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string|RegExp;\n  required?: boolean;\n  tabindex?: number;\n  attributes?: { [key: string]: string|number };\n  step?: number;\n  focus?: FormlyAttributeEvent;\n  blur?: FormlyAttributeEvent;\n  keyup?: FormlyAttributeEvent;\n  keydown?: FormlyAttributeEvent;\n  click?: FormlyAttributeEvent;\n  change?: FormlyAttributeEvent;\n  keypress?: FormlyAttributeEvent;\n  templateManipulators?: TemplateManipulators;\n  [additionalProperties: string]: any;\n}\n\nexport interface FormlyLifeCycleFn {\n  (form?: FormGroup, field?: FormlyFieldConfig, model?: any, options?: FormlyFormOptions): void;\n}\n\nexport interface FormlyLifeCycleOptions {\n  onInit?: FormlyLifeCycleFn;\n  onChanges?: FormlyLifeCycleFn;\n  doCheck?: FormlyLifeCycleFn;\n  afterContentInit?: FormlyLifeCycleFn;\n  afterContentChecked?: FormlyLifeCycleFn;\n  afterViewInit?: FormlyLifeCycleFn;\n  afterViewChecked?: FormlyLifeCycleFn;\n  onDestroy?: FormlyLifeCycleFn;\n}\n\nexport interface FormlyFormOptions {\n  updateInitialValue?: () => void;\n  resetModel?: (model?: any) => void;\n  formState?: any;\n  fieldChanges?: Subject;\n  fieldTransform?: (fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[];\n  showError?: (field: Field) => boolean;\n  parentForm?: FormGroupDirective | NgForm | null;\n}\n\nexport interface FormlyValueChangeEvent {\n  field: FormlyFieldConfig;\n  type: string;\n  value: any;\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ManipulatorOption.html":{"url":"interfaces/ManipulatorOption.html","title":"interface - ManipulatorOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ManipulatorOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        class\n                                \n                                \n                                            Optional\n                                        method\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:218\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                    \n                                \n                                \n                                    \n                                        method:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:219\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ManipulatorWrapper.html":{"url":"interfaces/ManipulatorWrapper.html","title":"interface - ManipulatorWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ManipulatorWrapper\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [f: FormlyFieldConfig]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     string\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:222\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TemplateManipulators.html":{"url":"interfaces/TemplateManipulators.html","title":"interface - TemplateManipulators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TemplateManipulators\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        postWrapper\n                                \n                                \n                                            Optional\n                                        preWrapper\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        postWrapper\n                                    \n                                \n                                \n                                    \n                                        postWrapper:     ManipulatorWrapper[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ManipulatorWrapper[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:228\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preWrapper\n                                    \n                                \n                                \n                                    \n                                        preWrapper:     ManipulatorWrapper[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ManipulatorWrapper[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:227\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TypeOption.html":{"url":"interfaces/TypeOption.html","title":"interface - TypeOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TypeOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        component\n                                \n                                \n                                            Optional\n                                        defaultOptions\n                                \n                                \n                                            Optional\n                                        extends\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        wrappers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:191\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultOptions\n                                    \n                                \n                                \n                                    \n                                        defaultOptions:     FormlyFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormlyFieldConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:194\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extends\n                                    \n                                \n                                \n                                    \n                                        extends:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:193\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:190\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wrappers\n                                    \n                                \n                                \n                                    \n                                        wrappers:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:192\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationMessageOption.html":{"url":"interfaces/ValidationMessageOption.html","title":"interface - ValidationMessageOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationMessageOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | \n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:214\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:213\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidatorOption.html":{"url":"interfaces/ValidatorOption.html","title":"interface - ValidatorOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidatorOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:208\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:     FieldValidatorFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FieldValidatorFn\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:209\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WrapperOption.html":{"url":"interfaces/WrapperOption.html","title":"interface - WrapperOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WrapperOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        component\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        types\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:199\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:198\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:200\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\nWe would love for you to contribute to ng-formly and help make it even better than it is\ntoday! As a contributor, here are the guidelines we would like you to follow:\n\nCode of Conduct\nQuestion or Problem?\nIssues and Bugs\nFeature Requests\nSubmission Guidelines\nCoding Rules\nCommit Message Guidelines\nContributing to Community\n\n Code of Conduct\nHelp us keep Angular open and inclusive. Please read and follow our Code of Conduct.\n Got a Question or Problem?\nFeel free to chat on gitter and raise questions on Stack overflow using angular 2 formly tag. We also support questions or problems from the issues\n Found a Bug?\nIf you find a bug in the source code, you can help us by\nsubmitting an issue to our GitHub Repository. Even better, you can\nsubmit a Pull Request with a fix.\n Missing a Feature?\nYou can request a new feature by submitting an issue to our GitHub\nRepository. If you would like to implement a new feature, please submit an issue with\na proposal for your work first, to be sure that we can use it.\nPlease consider what kind of change it is:\n\nFor a Major Feature, first open an issue and outline your proposal so that it can be\ndiscussed. This will also allow us to better coordinate our efforts, prevent duplication of work,\nand help you to craft the change so that it is successfully accepted into the project.\nSmall Features can be crafted and directly submitted as a Pull Request.\n\n Submission Guidelines\n Submitting an Issue\nBefore you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available.\nWe want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using http://plnkr.co. Having a live, reproducible scenario gives us wealth of important information without going back & forth to you with additional questions like:\n\nversion of Angular used\n3rd-party libraries and their versions\nand most importantly - a use-case that fails\n\nA minimal reproduce scenario using http://plnkr.co/ allows us to quickly confirm a bug (or point out coding problem) as well as confirm that we are fixing the right problem. If plunker is not a suitable way to demostrate the problem (for example for issues related to our npm packaging), please create a standalone git repository demostrating the problem.\nWe will be insisting on a minimal reproduce scenario in order to save maintainers time and ultimately be able to fix more bugs. Interestingly, from our experience users often find coding problems themselves while preparing a minimal plunk. We understand that sometimes it might be hard to extract essentials bits of code from a larger code-base but we really need to isolate the problem before we can fix it.\nUnfortunately we are not able to investigate / fix bugs without a minimal reproduction, so if we don't hear back from you we are going to close an issue that don't have enough info to be reproduced.\nYou can file new issues by filling out our new issue form.\n Submitting a Pull Request (PR)\nBefore you submit your Pull Request (PR) consider the following guidelines:\n‼️‼️‼️  &#x1F449;Please follow commit message conventions\nDevelopment\n\nrun yarn\nrun npm run demo or yarn demo\nwrite tests & code in TS goodness :-)\nrun git add .\nrun npm run commit and follow the prompt (this ensures that your commit message follows our conventions).\npush your changes\ncreate a PR with a link to the original issue\nwait patiently :-)\n\n Coding Rules\nTo ensure consistency throughout the source code, keep these rules in mind as you are working:\n\nAll features or bug fixes must be tested by one or more specs (unit-tests).\nAll public API methods must be documented. (Details TBC).\nFollow the existing styles (we have an .editorconfig file)\nDocument your changes in the README (try to follow the convention you see in the rest of the file)\nCreate an example for the website that demonstrates your changes so people can see how your changes work\n\n Commit Message Guidelines\nWe have very precise rules over how our git commit messages can be formatted.  This leads to more\nreadable messages that are easy to follow when looking through the project history. We follow Angular project Commit Guidelines\n Contributing to community\n\nCreate plugins!\nWrite blog posts!\nRecord screencasts\nWrite examples. The website is driven by examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^1.9.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n@ngx-formly\n\n\n\nStatus:\n\n\n\n\n\n\nLinks:\n\n\nNgx Formly is a dynamic JSON powered form library for Angular (mainly based an on Angular Reactive Forms) that bring unmatched maintainability to your application's forms.\nSupported UI libs\n\n\n\nUI\n\n\n\n\n\nBootstrap\n✅\n\n\nIonic\n✅\n\n\nKendo\n✅\n\n\nMaterial2\n✅\n\n\nPrimeNG\n✅\n\n\nNativeScript\n❌\n\n\n\nWhich Version to use?\n\n\n\nAngular version\nFormly version\n\n\n\n\nAngular >= 5\n@ngx-formly/core@3.x\n\n\nAngular >= 4\n@ngx-formly/core@2.x\n\n\nAngular >= 2\n`ng-formly@1.x`\n\n\n\nQuick links\n\nDocumentation, demos, and guides\nStackBlitz Template\nUI Bootstrap\nUI Material\nUI Ionic\nUI PrimeNG\nUI Kendo\n\n\n\nQuick Start\nFollow these steps to get started with Ngx Formly. Also check out our demos for further examples.\n1. Install @angular/forms and @ngx-formly/core packages:\n  npm install @angular/forms @ngx-formly/core --save2. Choose and install your UI (pre-defined types/templates) package:\n\nMaterial2:\n\nEnsure you have already installed material2 https://material.angular.io/guide/getting-started\nInstall @ngx-formly/materialnpm install @ngx-formly/material --save\n\n\nBootstrap:\n  npm install @ngx-formly/bootstrap --save\nIonic:\n  npm install @ngx-formly/ionic --save\nPrimeNG:\n  npm install @ngx-formly/primeng --save\nKendo:\n  npm install @ngx-formly/kendo --save\n\n3. Import the FormlyModule and UI (pre-defined types/templates):\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {FormlyModule} from '@ngx-formly/core';\nimport {FormlyBootstrapModule} from '@ngx-formly/bootstrap';\n\n// for material2 import `FormlyMaterialModule`:\n// import {FormlyMaterialModule} from '@ngx-formly/material';\n\n// for ionic import `FormlyIonicModule`:\n// import {FormlyIonicModule} from '@ngx-formly/ionic';\n\n// for primeng import `FormlyPrimeNGModule`:\n// import {FormlyPrimeNGModule} from '@ngx-formly/primeng';\n\n// for kendo import `FormlyKendoModule`:\n// import {FormlyKendoModule} from '@ngx-formly/kendo';\n\n@NgModule({\n  imports: [\n    ...,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(),\n    FormlyBootstrapModule,\n\n    // for material2:\n    // FormlyMaterialModule\n\n    // for ionic:\n    // FormlyIonicModule\n\n    // for primeng:\n    // FormlyPrimeNGModule\n\n    // for kendo:\n    // FormlyKendoModule\n  ],\n})\nexport class AppModule {}3. Define the form config in your component:\nimport {Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormlyFieldConfig} from '@ngx-formly/core';\n\n@Component({\n  selector: 'app',\n  template: `\n    \n      \n        Submit\n      \n    \n  `,\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model = { email: 'email@gmail.com' };\n  fields: FormlyFieldConfig[] = [{\n    key: 'email',\n    type: 'input',\n    templateOptions: {\n      type: 'email',\n      label: 'Email address',\n      placeholder: 'Enter email',\n      required: true,\n    }\n  }];\n\n  submit(model) {\n    console.log(model);\n  }\n}From there, it's just JavaScript. Allowing for DRY, maintainable, reusable forms.\nRoadmap\nSee the issues labeled enhancement\nThanks\nA special thanks to Kent C. Dodds for giving me opportunity to work on this.\nThis library is maintained (with love) by me, Mohammed Zama Khan.\nThanks to all contributors!\nIf you're trying to find angular-formly, go here\nContributors\nThanks goes to these wonderful people (emoji key):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 FormlyJS\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FormlyModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FormlyModule\n\n\n\ncluster_FormlyModule_declarations\n\n\n\ncluster_FormlyModule_exports\n\n\n\n\nFormlyForm\n\nFormlyForm\n\n\n\nFormlyModule\n\nFormlyModule\n\nFormlyModule -->\n\nFormlyForm->FormlyModule\n\n\n\n\n\nFormlyField\n\nFormlyField\n\nFormlyModule -->\n\nFormlyField->FormlyModule\n\n\n\n\n\nFormlyAttributes\n\nFormlyAttributes\n\nFormlyModule -->\n\nFormlyAttributes->FormlyModule\n\n\n\n\n\nFormlyGroup\n\nFormlyGroup\n\nFormlyModule -->\n\nFormlyGroup->FormlyModule\n\n\n\n\n\nFormlyValidationMessage\n\nFormlyValidationMessage\n\nFormlyModule -->\n\nFormlyValidationMessage->FormlyModule\n\n\n\n\n\nFormlyForm \n\nFormlyForm \n\nFormlyForm  -->\n\nFormlyModule->FormlyForm \n\n\n\n\n\nFormlyField \n\nFormlyField \n\nFormlyField  -->\n\nFormlyModule->FormlyField \n\n\n\n\n\nFormlyAttributes \n\nFormlyAttributes \n\nFormlyAttributes  -->\n\nFormlyModule->FormlyAttributes \n\n\n\n\n\nFormlyGroup \n\nFormlyGroup \n\nFormlyGroup  -->\n\nFormlyModule->FormlyGroup \n\n\n\n\n\nFormlyValidationMessage \n\nFormlyValidationMessage \n\nFormlyValidationMessage  -->\n\nFormlyModule->FormlyValidationMessage \n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            1 module\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        4 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 directive\n                    \n                \n            \n            \n                \n                    \n                        \n                        2 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        15 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FormlyAttributeEvent   (src/.../formly.field.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/src/components/formly.field.config.ts\n    \n        \n            \n                \n                    \n                        \n                        FormlyAttributeEvent\n                    \n                \n                \n                    \n                        FormlyAttributeEvent:     function\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FORMLY_CONFIG_TOKEN   (src/.../formly.config.ts)\n                        \n                        \n                            FORMLY_VALIDATORS   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/src/services/formly.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FORMLY_CONFIG_TOKEN\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        FORMLY_CONFIG_TOKEN:     \n\n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('FORMLY_CONFIG_TOKEN')\n                        \n                    \n\n\n            \n        \n\n    src/core/src/utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FORMLY_VALIDATORS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        FORMLY_VALIDATORS:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max']\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
