var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.6","fields":["title","body"],"fieldVectors":[["title/classes/Field.html",[0,0.098,1,0.432]],["body/classes/Field.html",[0,0.155,1,0.807,2,0.415,3,0.415,4,0.352,5,3.897,6,0.482,7,2.651,8,1.189,9,1.318,10,1.069,11,0.59,12,1.069,13,0.971,14,3.897,15,1.318,16,3.897,17,3.897,18,1.457,19,3.897,20,3.217,21,3.033,22,3.897,23,3.897,24,2.7,25,3.897,26,3.897,27,3.897,28,3.897,29,1.476,30,3.897,31,3.897,32,3.033,33,3.897,34,3.897,35,3.45,36,3.897,37,3.897,38,0.477,39,0.039,40,0.626,41,1.476,42,0.704,43,3.45,44,1.306,45,0.352,46,2.434,47,1.049,48,3.897,49,3.217,50,3.217,51,1.074,52,3.897,53,0.971,54,3.897,55,3.897,56,0.03,57,0.03]],["title/classes/FieldArrayType.html",[0,0.098,58,2.519]],["body/classes/FieldArrayType.html",[0,0.15,2,0.392,3,0.392,4,0.332,6,0.692,10,1.041,11,0.577,13,0.871,24,3.014,38,0.489,39,0.039,42,0.664,45,0.332,46,2.297,47,0.846,56,0.029,57,0.029,58,3.864,59,5.598,60,3.677,61,1.29,62,3.217,63,1.167,64,1.569,65,3.864,66,3.864,67,2.297,68,3.677,69,4.475,70,4.681,71,3.217,72,0.931,73,4.681,74,1.648,75,4.681,76,4.066,77,5.421,78,3.677,79,4.681,80,2.924,81,4.681,82,3.677,83,1.358,84,3.677,85,3.677,86,1.358,87,3.035,88,3.035,89,3.677,90,3.677,91,3.677,92,4.681,93,3.326,94,3.677,95,1.118,96,4.681,97,3.677,98,3.677,99,3.677,100,3.677,101,3.677,102,3.035,103,3.035,104,4.681,105,3.677,106,2.924,107,3.677,108,3.677]],["title/classes/FieldType.html",[0,0.098,62,1.906]],["body/classes/FieldType.html",[0,0.165,1,0.81,2,0.457,3,0.457,4,0.387,38,0.465,39,0.038,40,0.689,45,0.387,46,2.681,56,0.032,57,0.032,61,1.419,62,3.217,109,4.292,110,2.57,111,3.447,112,3.069,113,3.447,114,3.447,115,3.447,116,3.447,117,3.447,118,3.447,119,3.66,120,3.543,121,3.05,122,3.543,123,3.543,124,3.543,125,3.543,126,3.543,127,3.543]],["title/interfaces/FieldValidatorFn.html",[128,0.275,129,1.127]],["body/interfaces/FieldValidatorFn.html",[0,0.106,1,0.81,2,0.237,3,0.237,4,0.201,6,0.275,8,0.5,9,0.555,10,0.798,11,0.521,12,1.11,13,0.357,15,0.824,18,0.911,29,1.2,38,0.422,39,0.039,40,0.357,41,1.2,42,0.402,44,0.746,45,0.496,47,0.916,51,0.911,53,1.5,56,0.02,57,0.02,61,0.613,63,0.984,64,0.746,72,1.053,74,1.006,83,0.822,86,0.822,95,0.677,128,0.489,129,1.458,130,0.822,131,1.581,132,1.581,133,1.109,134,1.608,135,1.109,136,2.226,137,1.458,138,0.907,139,0.677,140,0.907,141,1.006,142,0.746,143,1.435,144,0.822,145,0.746,146,0.907,147,0.402,148,0.5,149,0.555,150,0.907,151,0.5,152,0.677,153,1.64,154,1.089,155,1.725,156,1.565,157,1.725,158,0.883,159,1.541,160,1.006,161,1.608,162,1.725,163,1.608,164,1.347,165,1.323,166,0.907,167,0.907,168,0.907,169,0.907,170,0.907,171,0.907,172,0.907,173,0.907,174,0.907,175,0.613,176,1.458,177,0.907,178,0.907,179,0.907,180,0.907,181,0.907,182,0.907,183,0.907,184,0.907,185,0.907,186,0.907,187,0.907,188,0.907,189,0.907,190,0.907,191,0.907,192,0.907,193,0.907,194,0.907,195,0.746,196,1.347,197,1.347,198,0.907,199,0.907,200,0.907,201,0.907,202,1.347,203,0.907,204,0.907,205,0.907,206,1.347,207,0.907,208,0.907,209,0.907,210,0.907,211,0.907,212,0.907,213,0.907,214,0.907,215,1.608,216,1.78,217,1.78,218,1.347,219,0.907,220,1.347,221,1.608,222,1.608,223,1.347,224,0.907,225,0.907,226,0.907,227,1.78,228,0.907,229,1.347,230,1.608,231,1.347,232,1.608,233,0.907,234,0.907,235,0.907,236,0.907,237,0.907,238,0.907,239,1.347,240,0.907,241,1.347,242,1.347,243,0.907,244,0.907,245,0.907,246,0.907,247,1.347,248,0.907,249,1.347,250,0.907,251,0.907,252,1.458,253,0.907,254,0.746,255,0.907,256,0.907,257,0.907,258,0.907,259,0.907,260,0.409,261,1.222,262,0.907,263,0.907,264,0.907]],["title/classes/FieldWrapper.html",[0,0.098,265,2.519]],["body/classes/FieldWrapper.html",[0,0.17,1,0.825,2,0.482,3,0.482,4,0.408,6,0.559,11,0.482,13,0.727,38,0.48,39,0.038,40,0.727,45,0.408,46,2.827,56,0.033,57,0.033,61,1.465,63,1.325,265,4.388,266,4.526,267,4.807,268,4.807,269,4.526]],["title/directives/FormlyAttributes.html",[148,0.686,270,1.373]],["body/directives/FormlyAttributes.html",[0,0.102,1,0.681,2,0.34,3,0.34,4,0.288,6,0.394,7,2.164,10,0.645,11,0.455,12,1.037,13,0.824,32,1.993,38,0.385,39,0.039,40,0.512,45,0.288,47,0.995,50,2.634,51,0.879,53,1.279,56,0.026,57,0.026,67,2.665,71,1.993,72,0.869,106,1.993,110,2.129,112,2.673,119,3.647,121,2.267,141,1.561,148,1.081,254,1.884,270,2.478,271,3.191,272,1.993,273,2.373,274,4.808,275,3.801,276,3.994,277,3.191,278,5.133,279,5.621,280,3.191,281,3.032,282,3.191,283,3.191,284,3.191,285,2.634,286,3.191,287,3.032,288,1.993,289,2.267,290,1.993,291,2.267,292,4.808,293,1.993,294,2.267,295,2.267,296,2.267,297,2.267,298,3.191,299,3.191,300,4.267,301,2.373,302,3.191,303,3.191,304,3.032,305,4.267,306,2.267,307,3.191,308,3.191,309,4.267,310,4.808,311,3.191,312,4.267,313,4.808,314,4.267,315,4.267,316,3.191,317,3.191,318,3.191,319,3.191,320,3.191,321,3.191,322,3.191,323,3.191,324,3.191,325,3.191,326,3.191,327,3.191,328,5.133,329,3.191,330,4.267,331,3.191,332,3.191,333,3.191,334,3.191,335,2.373,336,3.191,337,3.191,338,4.808,339,4.267,340,3.191,341,3.191,342,2.634,343,1.774]],["title/components/FormlyField.html",[260,0.377,344,1.523]],["body/components/FormlyField.html",[0,0.088,1,0.781,2,0.293,3,0.293,4,0.249,6,0.34,7,2.433,8,1.142,9,1.266,10,1.064,11,0.588,12,0.9,13,0.868,15,1.11,18,1.227,38,0.458,39,0.039,40,0.442,42,0.498,45,0.249,47,0.805,56,0.024,57,0.024,63,0.962,67,2.41,71,1.72,72,0.872,102,3.676,103,3.676,110,1.925,111,2.781,112,2.476,113,2.781,114,2.781,115,2.781,116,2.781,117,2.781,118,2.781,119,2.741,120,2.273,121,1.957,122,2.273,123,2.273,124,2.273,125,2.273,126,2.273,127,2.273,139,0.837,141,1.173,143,0.759,147,0.951,148,0.867,151,0.867,152,1.601,153,0.923,154,0.686,158,0.556,254,1.812,260,0.651,267,4.346,268,4.346,270,1.736,272,1.72,273,3.006,285,2.273,335,1.531,344,2.408,345,1.957,346,1.957,347,2.754,348,3.858,349,4.825,350,4.453,351,2.273,352,5.406,353,2.754,354,2.754,355,2.754,356,2.754,357,1.72,358,1.72,359,2.754,360,4.825,361,2.754,362,2.754,363,3.858,364,2.754,365,5.079,366,1.531,367,2.41,368,2.741,369,2.754,370,2.754,371,2.754,372,2.754,373,2.273,374,2.754,375,2.754,376,2.754,377,2.754,378,2.754,379,2.754,380,2.754,381,2.754,382,2.754,383,2.754,384,3.858,385,3.858,386,3.676,387,2.754,388,2.754,389,2.754,390,2.754,391,2.754,392,2.754,393,2.754,394,2.754,395,2.754,396,2.754,397,3.858,398,2.754,399,2.754,400,2.754,401,2.754,402,2.754,403,2.754,404,3.858,405,2.754,406,2.754,407,1.957,408,2.754,409,2.754,410,2.754,411,2.754,412,1.531,413,2.145,414,2.145,415,3.428,416,1.957,417,1.957,418,1.531,419,1.957,420,1.374,421,1.957,422,1.374,423,1.957]],["title/components/FormlyGroup.html",[260,0.377,420,1.523]],["body/components/FormlyGroup.html",[0,0.134,2,0.445,3,0.445,4,0.377,38,0.458,39,0.038,40,0.671,45,0.377,56,0.031,57,0.031,61,1.397,62,3.408,72,0.986,147,1.067,148,1.14,151,1.14,154,1.042,158,0.845,260,0.718,270,2.282,272,2.611,273,3.324,344,2.086,345,2.97,346,2.97,412,2.325,413,2.819,414,2.819,415,4.03,416,2.97,417,2.97,418,2.325,419,2.97,420,2.831,421,2.97,422,2.086,423,2.97,424,4.181,425,3.167,426,4.181]],["title/interfaces/FormlyLifeCycleFn.html",[128,0.275,367,1.906]],["body/interfaces/FormlyLifeCycleFn.html",[0,0.095,1,0.858,2,0.207,3,0.207,4,0.176,6,0.241,7,0.876,8,0.918,9,1.422,10,0.939,11,0.532,12,1.127,13,0.48,15,1.017,18,1.125,21,3.024,24,1.082,29,0.592,32,2.272,35,2.585,38,0.398,39,0.039,41,1.414,42,0.352,43,2.123,45,0.437,47,0.738,51,1.523,53,1.49,56,0.018,57,0.018,63,1.245,72,0.738,74,0.909,76,3.641,80,2.751,93,1.382,95,0.592,110,0.971,111,1.215,112,1.082,113,1.215,114,1.215,115,1.215,116,1.215,117,1.215,118,1.215,128,0.437,131,1.382,132,1.382,135,0.652,139,0.592,147,0.796,149,1.363,151,0.99,154,1.304,156,1.219,158,0.825,159,1.241,160,1.106,165,0.652,175,0.536,195,0.652,260,0.505,275,2.123,276,2.585,281,1.382,287,1.382,288,1.215,289,1.382,290,1.215,291,1.382,293,1.867,294,1.382,295,1.382,296,1.382,297,1.382,301,1.082,304,2.123,306,1.382,335,1.082,343,2.023,357,2.272,358,3.452,366,1.082,367,3.267,368,2.123,407,1.382,413,1.082,414,1.082,425,2.55,427,1.382,428,1.946,429,2.467,430,2.467,431,2.123,432,1.606,433,2.467,434,1.606,435,1.606,436,1.606,437,1.606,438,1.382,439,1.215,440,1.215,441,3.636,442,1.606,443,1.606,444,3.303,445,3.003,446,3.003,447,2.123,448,1.382,449,1.606,450,1.606,451,1.606,452,1.606,453,1.606,454,1.215,455,1.215,456,1.382,457,1.606,458,1.867,459,1.382,460,1.606,461,3.37,462,2.467,463,1.606,464,2.467,465,1.606,466,1.382,467,1.606,468,1.606,469,2.467,470,1.215,471,1.606,472,1.606,473,1.606,474,1.606,475,1.606,476,1.606,477,2.467,478,1.382,479,1.382,480,1.606,481,2.9,482,1.606,483,2.123,484,1.606,485,1.215,486,2.585,487,2.123,488,2.467,489,3.303,490,1.382,491,1.606,492,1.382,493,1.606,494,1.606,495,1.606,496,1.606,497,2.467,498,1.382,499,1.606,500,3.003,501,2.467,502,1.606,503,1.606,504,1.606,505,1.606,506,1.606,507,1.606,508,1.382,509,1.606,510,1.606,511,1.606,512,1.606,513,1.606,514,1.606,515,2.123,516,3.003,517,2.123,518,2.467,519,1.606,520,1.215,521,1.606,522,2.467,523,2.467,524,1.606,525,1.491,526,1.606,527,1.382,528,1.215,529,2.467,530,1.606,531,1.606,532,1.382,533,1.606,534,1.382,535,1.606,536,1.606,537,1.382,538,1.606,539,1.382,540,1.382,541,1.606,542,1.382,543,1.606,544,1.606,545,1.606,546,1.382,547,1.382,548,1.382,549,1.606,550,3.003,551,1.606,552,1.606,553,3.003,554,1.606,555,1.606,556,1.606,557,1.606,558,3.003,559,1.606,560,1.606,561,1.382,562,1.606,563,1.606,564,1.606,565,1.606,566,1.606,567,1.606,568,1.382,569,1.606,570,3.55,571,1.382,572,1.606,573,1.606,574,1.606,575,1.606,576,1.606,577,1.382,578,1.382,579,1.382,580,1.382,581,1.382,582,1.606,583,1.606,584,1.606,585,1.606,586,1.606,587,1.382]],["title/modules/FormlyModule.html",[588,1.697,589,1.697]],["body/modules/FormlyModule.html",[0,0.102,2,0.339,3,0.339,4,0.287,11,0.339,38,0.535,39,0.039,40,0.51,42,0.574,45,0.463,47,0.769,56,0.026,57,0.026,69,3.513,72,0.574,87,2.624,142,1.717,147,0.574,152,1.294,158,0.642,175,1.412,176,1.772,260,0.393,270,2.67,301,2.971,344,2.96,366,1.767,412,1.767,418,3.298,420,3.007,422,2.96,425,1.985,525,2.848,528,1.985,588,2.367,589,3.414,590,1.985,591,3.961,592,2.258,593,2.624,594,2.624,595,2.624,596,3.513,597,1.767,598,3.178,599,4.256,600,4.23,601,4.798,602,4.798,603,4.256,604,3.178,605,3.513,606,3.178,607,3.178,608,3.178,609,4.256,610,3.178,611,3.178,612,3.178,613,4.256,614,3.178,615,5.343,616,5.343,617,3.178]],["title/components/FormlyValidationMessage.html",[260,0.377,422,1.523]],["body/components/FormlyValidationMessage.html",[0,0.106,1,0.695,2,0.354,3,0.354,4,0.3,6,0.411,7,2.506,10,0.886,11,0.467,12,0.991,13,0.871,20,2.743,24,2.437,38,0.471,39,0.039,40,0.534,42,0.6,44,1.114,45,0.3,47,0.886,49,2.743,53,1.093,56,0.027,57,0.027,66,2.743,67,2.076,71,2.738,72,0.98,80,2.076,88,2.743,141,1.01,147,1.006,148,0.986,151,0.986,152,1.693,154,1.3,158,1.189,159,1.01,260,0.67,270,1.973,272,2.076,273,3.157,342,2.743,343,2.437,344,1.658,345,2.361,346,2.361,351,2.743,366,1.848,386,2.743,412,1.848,413,2.437,414,2.437,415,3.706,416,2.361,417,2.361,418,1.848,419,2.361,420,1.658,421,2.361,422,2.603,423,2.361,444,2.361,489,2.361,618,5.568,619,3.323,620,5.422,621,5.422,622,3.323,623,3.323,624,4.383,625,3.323,626,3.323,627,3.323,628,3.323,629,3.323,630,3.323,631,3.323,632,3.323,633,2.361,634,3.323,635,3.323,636,3.323,637,4.383,638,3.323,639,4.383,640,3.323,641,4.383,642,3.323,643,3.323,644,4.383,645,3.323]],["title/interfaces/FormlyValueChangeEvent.html",[128,0.275,587,2.168]],["body/interfaces/FormlyValueChangeEvent.html",[0,0.095,1,0.86,2,0.206,3,0.206,4,0.174,6,0.239,7,0.869,8,0.814,9,1.411,10,0.887,11,0.588,12,1.135,13,0.653,15,0.903,18,0.998,21,3.016,24,1.074,29,0.587,32,2.262,35,2.573,38,0.396,39,0.039,41,1.41,42,0.349,43,2.111,45,0.436,47,0.654,51,1.521,53,1.496,56,0.018,57,0.018,63,1.204,72,0.735,74,0.904,76,3.633,80,2.54,93,1.372,95,0.587,110,0.964,111,1.207,112,1.074,113,1.207,114,1.207,115,1.207,116,1.207,117,1.207,118,1.207,128,0.436,135,0.647,139,0.587,147,0.793,149,1.361,151,0.987,154,1.301,156,1.214,158,0.822,159,1.236,160,1.101,165,0.647,175,0.532,195,0.647,260,0.503,275,2.111,276,2.573,281,1.372,287,1.372,288,1.207,289,1.372,290,1.207,291,1.372,293,1.856,294,1.372,295,1.372,296,1.372,297,1.372,301,1.074,304,2.111,306,1.372,335,1.074,343,2.014,357,2.262,358,3.536,366,1.074,367,3.194,368,2.111,407,1.372,413,1.074,414,1.074,425,2.54,427,1.372,429,2.453,430,2.453,431,2.111,432,1.594,433,2.453,434,1.594,435,1.594,436,1.594,437,1.594,438,1.372,439,1.207,440,1.207,441,3.624,442,1.594,443,1.594,444,3.294,445,2.99,446,2.99,447,2.111,448,1.372,449,1.594,450,1.594,451,1.594,452,1.594,453,1.594,454,1.207,455,1.207,456,1.372,457,1.594,458,1.856,459,1.372,460,1.594,461,3.357,462,2.453,463,1.594,464,2.453,465,1.594,466,1.372,467,1.594,468,1.594,469,2.453,470,1.207,471,1.594,472,1.594,473,1.594,474,1.594,475,1.594,476,1.594,477,2.453,478,1.372,479,1.372,480,1.594,481,2.889,482,1.594,483,2.111,484,1.594,485,1.207,486,2.573,487,2.111,488,2.453,489,3.294,490,1.372,491,1.594,492,1.372,493,1.594,494,1.594,495,1.594,496,1.594,497,2.453,498,1.372,499,1.594,500,2.99,501,2.453,502,1.594,503,1.594,504,1.594,505,1.594,506,1.594,507,1.594,508,1.372,509,1.594,510,1.594,511,1.594,512,1.594,513,1.594,514,1.594,515,2.111,516,2.99,517,2.111,518,2.453,519,1.594,520,1.207,521,1.594,522,2.453,523,2.453,524,1.594,525,1.483,526,1.594,527,1.372,528,1.207,529,2.453,530,1.594,531,1.594,532,1.372,533,1.594,534,1.372,535,1.594,536,1.594,537,1.372,538,1.594,539,1.372,540,1.372,541,1.594,542,1.372,543,1.594,544,1.594,545,1.594,546,1.372,547,1.372,548,1.372,549,1.594,550,2.99,551,1.594,552,1.594,553,2.99,554,1.594,555,1.594,556,1.594,557,1.594,558,2.99,559,1.594,560,1.594,561,1.372,562,1.594,563,1.594,564,1.594,565,1.594,566,1.594,567,1.594,568,1.372,569,1.594,570,3.542,571,1.372,572,1.594,573,1.594,574,1.594,575,1.594,576,1.594,577,1.372,578,1.372,579,1.372,580,1.372,581,1.372,582,1.594,583,1.594,584,1.594,585,1.594,586,1.594,587,2.111,646,1.932,647,1.932,648,1.932]],["title/interfaces/ManipulatorOption.html",[128,0.275,252,1.127]],["body/interfaces/ManipulatorOption.html",[0,0.149,1,0.802,2,0.235,3,0.235,4,0.199,6,0.273,8,0.496,9,0.55,10,1.021,11,0.576,12,1.092,13,0.528,15,0.819,18,0.906,29,1.194,38,0.42,39,0.039,40,0.354,41,1,42,0.399,44,0.74,45,0.495,47,0.882,51,0.906,53,1.505,56,0.02,57,0.02,61,0.608,63,0.819,64,1.459,72,1.051,74,1,83,0.815,86,0.815,95,0.671,128,0.488,129,1.214,130,0.815,133,0.74,134,1.339,135,0.74,137,1.451,138,0.899,139,0.671,140,0.899,141,1,142,0.74,143,1.431,144,0.815,145,0.74,146,0.899,147,0.399,148,0.496,149,0.55,150,0.899,151,0.496,152,0.671,153,1.635,154,1.085,155,1.719,156,1.56,157,1.719,158,0.879,159,1.537,160,1,161,1.6,162,1.719,163,1.6,164,1.339,165,1.317,166,0.899,167,0.899,168,0.899,169,0.899,170,0.899,171,0.899,172,0.899,173,0.899,174,0.899,175,0.608,176,1.451,177,0.899,178,0.899,179,0.899,180,0.899,181,0.899,182,0.899,183,0.899,184,0.899,185,0.899,186,0.899,187,0.899,188,0.899,189,0.899,190,0.899,191,0.899,192,0.899,193,0.899,194,0.899,195,0.74,196,1.339,197,1.339,198,0.899,199,0.899,200,0.899,201,0.899,202,1.339,203,0.899,204,0.899,205,0.899,206,1.339,207,0.899,208,0.899,209,0.899,210,0.899,211,0.899,212,0.899,213,0.899,214,0.899,215,1.6,216,1.773,217,1.773,218,1.339,219,0.899,220,1.339,221,1.6,222,1.6,223,1.339,224,0.899,225,0.899,226,0.899,227,1.773,228,0.899,229,1.339,230,1.6,231,1.339,232,1.6,233,0.899,234,0.899,235,0.899,236,0.899,237,0.899,238,0.899,239,1.339,240,0.899,241,1.339,242,1.339,243,0.899,244,0.899,245,0.899,246,0.899,247,1.339,248,0.899,249,1.339,250,0.899,251,0.899,252,1.608,253,0.899,254,0.74,255,0.899,256,0.899,257,0.899,258,0.899,259,0.899,260,0.406,261,1.214,262,0.899,263,0.899,264,0.899,649,3.288,650,2.207,651,2.207]],["title/interfaces/ManipulatorWrapper.html",[128,0.275,162,1.127]],["body/interfaces/ManipulatorWrapper.html",[0,0.106,1,0.804,2,0.238,3,0.238,4,0.202,6,0.276,8,0.502,9,0.557,10,0.799,11,0.522,12,1.111,13,0.359,15,0.827,18,0.914,29,1.203,38,0.422,39,0.039,40,0.359,41,1.008,42,0.404,44,0.749,45,0.496,47,0.917,51,0.914,53,1.504,56,0.02,57,0.02,61,0.616,63,0.986,64,0.749,72,1.053,74,1.008,83,0.825,86,0.825,95,0.679,128,0.489,129,1.225,130,0.825,131,1.587,132,1.587,133,0.749,134,1.351,135,0.749,137,1.461,138,0.91,139,0.679,140,0.91,141,1.008,142,0.749,143,1.436,144,0.825,145,0.749,146,0.91,147,0.404,148,0.502,149,0.557,150,0.91,151,0.502,152,0.679,153,1.643,154,1.091,155,1.728,156,1.568,157,1.728,158,0.885,159,1.543,160,1.008,161,1.612,162,1.81,163,1.612,164,1.351,165,1.326,166,0.91,167,0.91,168,0.91,169,0.91,170,0.91,171,0.91,172,0.91,173,0.91,174,0.91,175,0.616,176,1.461,177,0.91,178,0.91,179,0.91,180,0.91,181,0.91,182,0.91,183,0.91,184,0.91,185,0.91,186,0.91,187,0.91,188,0.91,189,0.91,190,0.91,191,0.91,192,0.91,193,0.91,194,0.91,195,0.749,196,1.351,197,1.351,198,0.91,199,0.91,200,0.91,201,0.91,202,1.351,203,0.91,204,0.91,205,0.91,206,1.351,207,0.91,208,0.91,209,0.91,210,0.91,211,0.91,212,0.91,213,0.91,214,0.91,215,1.612,216,1.783,217,1.783,218,1.351,219,0.91,220,1.351,221,1.612,222,1.612,223,1.351,224,0.91,225,0.91,226,0.91,227,1.783,228,0.91,229,1.351,230,1.612,231,1.351,232,1.612,233,0.91,234,0.91,235,0.91,236,0.91,237,0.91,238,0.91,239,1.351,240,0.91,241,1.351,242,1.351,243,0.91,244,0.91,245,0.91,246,0.91,247,1.351,248,0.91,249,1.351,250,0.91,251,0.91,252,1.461,253,0.91,254,0.749,255,0.91,256,0.91,257,0.91,258,0.91,259,0.91,260,0.41,261,1.225,262,1.351,263,0.91,264,0.91,652,2.234]],["title/interfaces/TemplateManipulators.html",[128,0.275,160,0.928]],["body/interfaces/TemplateManipulators.html",[0,0.105,1,0.802,2,0.236,3,0.236,4,0.2,6,0.273,8,0.497,9,0.551,10,1.022,11,0.554,12,1.092,13,0.529,15,0.821,18,0.907,29,1.196,38,0.42,39,0.039,40,0.355,41,1.001,42,0.4,44,0.741,45,0.495,47,0.882,51,0.907,53,1.499,56,0.02,57,0.02,61,0.609,63,0.821,64,0.741,72,1.052,74,1.001,83,0.817,86,0.817,95,0.672,128,0.488,129,1.216,130,0.817,133,0.741,134,1.341,135,0.741,137,1.452,138,0.901,139,0.672,140,0.901,141,1.001,142,0.741,143,1.432,144,0.817,145,0.741,146,0.901,147,0.4,148,0.497,149,0.551,150,0.901,151,0.497,152,0.672,153,1.636,154,1.086,155,1.72,156,1.561,157,1.72,158,0.88,159,1.538,160,1.196,161,1.989,162,1.961,163,1.989,164,1.341,165,1.318,166,0.901,167,0.901,168,0.901,169,0.901,170,0.901,171,0.901,172,0.901,173,0.901,174,0.901,175,0.609,176,1.452,177,0.901,178,0.901,179,0.901,180,0.901,181,0.901,182,0.901,183,0.901,184,0.901,185,0.901,186,0.901,187,0.901,188,0.901,189,0.901,190,0.901,191,0.901,192,0.901,193,0.901,194,0.901,195,0.741,196,1.341,197,1.341,198,0.901,199,0.901,200,0.901,201,0.901,202,1.341,203,0.901,204,0.901,205,0.901,206,1.341,207,0.901,208,0.901,209,0.901,210,0.901,211,0.901,212,0.901,213,0.901,214,0.901,215,1.602,216,1.775,217,1.775,218,1.341,219,0.901,220,1.341,221,1.602,222,1.602,223,1.341,224,0.901,225,0.901,226,0.901,227,1.775,228,0.901,229,1.341,230,1.602,231,1.341,232,1.602,233,0.901,234,0.901,235,0.901,236,0.901,237,0.901,238,0.901,239,1.341,240,0.901,241,1.341,242,1.341,243,0.901,244,0.901,245,0.901,246,0.901,247,1.341,248,0.901,249,1.341,250,0.901,251,0.901,252,1.452,253,0.901,254,0.741,255,0.901,256,0.901,257,0.901,258,0.901,259,0.901,260,0.407,261,1.216,262,0.901,263,0.901,264,0.901,653,2.211,654,2.211]],["title/interfaces/TypeOption.html",[128,0.275,153,1.023]],["body/interfaces/TypeOption.html",[0,0.103,1,0.798,2,0.229,3,0.229,4,0.194,6,0.266,8,0.484,9,0.537,10,1.102,11,0.581,12,1.116,13,0.74,15,0.805,18,0.89,29,1.177,38,0.416,39,0.039,40,0.346,41,0.981,42,0.389,44,0.722,45,0.492,47,0.874,51,0.89,53,1.514,56,0.02,57,0.02,61,1.185,63,0.805,64,0.722,72,1.063,74,0.981,83,0.796,86,0.796,95,0.655,128,0.485,129,1.192,130,0.796,133,0.722,134,1.315,135,0.722,137,1.43,138,0.877,139,0.655,140,0.877,141,0.981,142,0.722,143,1.421,144,0.796,145,0.722,146,0.877,147,0.389,148,0.484,149,0.537,150,0.877,151,0.484,152,0.655,153,1.68,154,1.072,155,1.701,156,1.728,157,1.701,158,0.869,159,1.524,160,0.981,161,1.577,162,1.701,163,1.577,164,1.315,165,1.297,166,0.877,167,0.877,168,0.877,169,0.877,170,0.877,171,0.877,172,0.877,173,0.877,174,0.877,175,0.594,176,1.43,177,0.877,178,0.877,179,0.877,180,0.877,181,0.877,182,0.877,183,0.877,184,0.877,185,0.877,186,0.877,187,0.877,188,0.877,189,0.877,190,0.877,191,0.877,192,0.877,193,0.877,194,0.877,195,0.722,196,1.315,197,1.315,198,0.877,199,0.877,200,0.877,201,0.877,202,1.315,203,0.877,204,0.877,205,0.877,206,1.315,207,0.877,208,0.877,209,0.877,210,0.877,211,0.877,212,0.877,213,0.877,214,0.877,215,1.577,216,1.752,217,1.752,218,1.315,219,0.877,220,1.315,221,1.577,222,1.577,223,1.315,224,0.877,225,0.877,226,0.877,227,2.042,228,0.877,229,1.315,230,1.577,231,1.315,232,1.577,233,0.877,234,0.877,235,0.877,236,0.877,237,0.877,238,0.877,239,1.315,240,0.877,241,1.315,242,1.315,243,0.877,244,0.877,245,0.877,246,0.877,247,1.315,248,0.877,249,1.315,250,0.877,251,0.877,252,1.43,253,0.877,254,0.722,255,0.877,256,0.877,257,0.877,258,0.877,259,0.877,260,0.569,261,1.192,262,0.877,263,0.877,264,0.877,655,2.154,656,2.154,657,2.154,658,2.154,659,2.154]],["title/interfaces/ValidationMessageOption.html",[128,0.275,261,1.127]],["body/interfaces/ValidationMessageOption.html",[0,0.105,1,0.802,2,0.236,3,0.236,4,0.2,6,0.274,8,0.498,9,0.552,10,0.795,11,0.554,12,1.093,13,0.529,15,0.822,18,0.908,29,1.197,38,0.421,39,0.039,40,0.356,41,1.002,42,0.4,44,0.742,45,0.495,47,0.883,51,0.908,53,1.512,56,0.02,57,0.02,61,0.61,63,0.822,64,0.742,72,1.067,74,1.002,83,0.818,86,0.818,95,0.674,128,0.488,129,1.217,130,0.818,133,0.742,134,1.343,135,0.742,137,1.454,138,0.902,139,0.674,140,0.902,141,1.002,142,0.742,143,1.433,144,0.818,145,0.742,146,0.902,147,0.4,148,0.498,149,0.552,150,0.902,151,0.498,152,0.674,153,1.638,154,1.087,155,1.722,156,1.562,157,1.722,158,1.023,159,1.539,160,1.002,161,1.604,162,1.722,163,1.604,164,1.343,165,1.319,166,0.902,167,0.902,168,0.902,169,0.902,170,0.902,171,0.902,172,0.902,173,0.902,174,0.902,175,0.61,176,1.454,177,0.902,178,0.902,179,0.902,180,0.902,181,0.902,182,0.902,183,0.902,184,0.902,185,0.902,186,0.902,187,0.902,188,0.902,189,0.902,190,0.902,191,0.902,192,0.902,193,0.902,194,0.902,195,0.742,196,1.343,197,1.343,198,0.902,199,0.902,200,0.902,201,0.902,202,1.343,203,0.902,204,0.902,205,0.902,206,1.343,207,0.902,208,0.902,209,0.902,210,0.902,211,0.902,212,0.902,213,0.902,214,0.902,215,1.604,216,1.776,217,1.776,218,1.343,219,0.902,220,1.343,221,1.604,222,1.604,223,1.343,224,0.902,225,0.902,226,0.902,227,1.776,228,0.902,229,1.343,230,1.604,231,1.343,232,1.604,233,0.902,234,0.902,235,0.902,236,0.902,237,0.902,238,0.902,239,1.343,240,0.902,241,1.343,242,1.343,243,0.902,244,0.902,245,0.902,246,0.902,247,1.343,248,0.902,249,1.343,250,0.902,251,0.902,252,1.454,253,0.902,254,0.742,255,0.902,256,0.902,257,0.902,258,0.902,259,0.902,260,0.407,261,1.454,262,0.902,263,0.902,264,0.902,660,2.215,661,2.215]],["title/interfaces/ValidatorOption.html",[128,0.275,155,1.127]],["body/interfaces/ValidatorOption.html",[0,0.105,1,0.803,2,0.236,3,0.236,4,0.2,6,0.274,8,0.499,9,0.553,10,0.796,11,0.554,12,1.093,13,0.53,15,0.823,18,0.91,29,1.198,38,0.421,39,0.039,40,0.356,41,1.004,42,0.401,44,0.744,45,0.495,47,0.884,51,0.91,53,1.506,56,0.02,57,0.02,61,0.612,63,0.823,64,0.744,72,1.067,74,1.004,83,0.82,86,0.82,95,0.675,128,0.488,129,1.612,130,0.82,133,0.744,134,1.345,135,0.744,137,1.456,138,0.904,139,0.675,140,0.904,141,1.004,142,0.744,143,1.434,144,0.82,145,0.744,146,0.904,147,0.401,148,0.499,149,0.553,150,0.904,151,0.499,152,0.675,153,1.639,154,1.262,155,1.806,156,1.563,157,1.723,158,0.882,159,1.54,160,1.004,161,1.605,162,1.723,163,1.605,164,1.345,165,1.321,166,0.904,167,0.904,168,0.904,169,0.904,170,0.904,171,0.904,172,0.904,173,0.904,174,0.904,175,0.612,176,1.456,177,0.904,178,0.904,179,0.904,180,0.904,181,0.904,182,0.904,183,0.904,184,0.904,185,0.904,186,0.904,187,0.904,188,0.904,189,0.904,190,0.904,191,0.904,192,0.904,193,0.904,194,0.904,195,0.744,196,1.345,197,1.345,198,0.904,199,0.904,200,0.904,201,0.904,202,1.345,203,0.904,204,0.904,205,0.904,206,1.345,207,0.904,208,0.904,209,0.904,210,0.904,211,0.904,212,0.904,213,0.904,214,0.904,215,1.605,216,1.778,217,1.778,218,1.345,219,0.904,220,1.345,221,1.605,222,1.605,223,1.345,224,0.904,225,0.904,226,0.904,227,1.778,228,0.904,229,1.345,230,1.605,231,1.345,232,1.605,233,0.904,234,0.904,235,0.904,236,0.904,237,0.904,238,0.904,239,1.345,240,0.904,241,1.345,242,1.345,243,0.904,244,0.904,245,0.904,246,0.904,247,1.345,248,0.904,249,1.345,250,0.904,251,0.904,252,1.456,253,0.904,254,0.744,255,0.904,256,0.904,257,0.904,258,0.904,259,0.904,260,0.408,261,1.219,262,0.904,263,0.904,264,0.904,662,2.219,663,2.219]],["title/interfaces/WrapperOption.html",[128,0.275,157,1.127]],["body/interfaces/WrapperOption.html",[0,0.105,1,0.802,2,0.234,3,0.234,4,0.199,6,0.272,8,0.495,9,0.549,10,0.939,11,0.591,12,1.091,13,0.63,15,0.818,18,0.904,29,1.192,38,0.42,39,0.039,40,0.353,41,0.998,42,0.398,44,0.738,45,0.495,47,0.881,51,0.904,53,1.511,56,0.02,57,0.02,61,0.607,63,0.818,64,0.738,72,1.066,74,0.998,83,0.813,86,0.813,95,0.669,128,0.487,129,1.212,130,0.813,133,0.738,134,1.336,135,0.738,137,1.448,138,0.897,139,0.669,140,0.897,141,0.998,142,0.738,143,1.43,144,0.813,145,0.738,146,0.897,147,0.398,148,0.495,149,0.549,150,0.897,151,0.495,152,0.669,153,1.634,154,1.083,155,1.717,156,1.558,157,1.8,158,0.878,159,1.535,160,0.998,161,1.598,162,1.717,163,1.598,164,1.336,165,1.314,166,0.897,167,0.897,168,0.897,169,0.897,170,0.897,171,0.897,172,0.897,173,0.897,174,0.897,175,0.607,176,1.448,177,0.897,178,0.897,179,0.897,180,0.897,181,0.897,182,0.897,183,0.897,184,0.897,185,0.897,186,0.897,187,0.897,188,0.897,189,0.897,190,0.897,191,0.897,192,0.897,193,0.897,194,0.897,195,0.738,196,1.336,197,1.336,198,0.897,199,0.897,200,0.897,201,0.897,202,1.336,203,0.897,204,0.897,205,0.897,206,1.336,207,0.897,208,0.897,209,0.897,210,0.897,211,0.897,212,0.897,213,0.897,214,0.897,215,1.598,216,1.771,217,1.771,218,1.336,219,0.897,220,1.336,221,1.598,222,1.598,223,1.336,224,0.897,225,0.897,226,0.897,227,1.771,228,0.897,229,1.336,230,1.598,231,1.336,232,1.598,233,0.897,234,0.897,235,0.897,236,0.897,237,0.897,238,0.897,239,1.336,240,0.897,241,1.336,242,1.336,243,0.897,244,0.897,245,0.897,246,0.897,247,1.336,248,0.897,249,1.336,250,0.897,251,0.897,252,1.448,253,0.897,254,0.738,255,0.897,256,0.897,257,0.897,258,0.897,259,0.897,260,0.575,261,1.212,262,0.897,263,0.897,264,0.897,664,2.201,665,2.201,666,2.201]],["title/contributing.html",[667,1.819,668,1.599,669,2.113]],["body/contributing.html",[2,0.273,3,0.39,4,0.386,8,0.576,38,0.231,39,0.035,56,0.023,57,0.023,64,0.858,65,2.114,110,1.278,143,1.287,145,0.858,147,0.662,149,1.282,158,1.039,293,3.211,373,2.114,438,1.82,439,1.6,440,2.289,448,1.82,454,2.289,455,1.6,456,1.82,466,1.82,470,1.6,478,3.319,483,3.653,485,2.289,486,3.04,487,2.604,490,1.82,492,2.604,498,1.82,508,2.604,520,1.6,525,1.278,532,1.82,534,1.82,537,1.82,542,1.82,546,1.82,547,1.82,548,3.319,561,1.82,568,1.82,597,2.038,633,2.604,669,3.856,670,2.114,671,2.114,672,4.671,673,3.664,674,4.279,675,2.561,676,2.114,677,5.294,678,3.973,679,5.717,680,4.279,681,4.942,682,5.592,683,4.855,684,5.512,685,5.294,686,5.141,687,3.664,688,5.294,689,3.664,690,3.664,691,3.856,692,3.664,693,2.561,694,4.942,695,2.561,696,2.114,697,2.561,698,2.561,699,2.561,700,2.561,701,2.561,702,1.82,703,2.561,704,1.82,705,2.561,706,3.025,707,4.55,708,3.664,709,4.279,710,4.671,711,5.414,712,2.561,713,3.664,714,3.856,715,2.561,716,3.664,717,2.114,718,2.561,719,2.561,720,3.664,721,2.561,722,2.561,723,2.561,724,2.561,725,3.664,726,2.561,727,2.561,728,4.279,729,2.561,730,2.561,731,4.671,732,2.561,733,2.561,734,2.561,735,2.114,736,3.664,737,2.561,738,2.561,739,2.561,740,2.561,741,2.561,742,2.561,743,5.141,744,4.279,745,3.664,746,2.561,747,2.561,748,4.942,749,3.664,750,4.671,751,3.664,752,2.561,753,2.561,754,2.114,755,2.561,756,3.025,757,3.664,758,2.561,759,2.561,760,2.561,761,2.561,762,2.114,763,2.561,764,2.561,765,2.561,766,2.561,767,2.561,768,2.561,769,2.114,770,2.561,771,2.561,772,3.664,773,3.856,774,3.532,775,1.82,776,2.561,777,4.279,778,2.561,779,2.114,780,2.561,781,2.561,782,2.561,783,2.561,784,2.561,785,2.561,786,2.561,787,2.561,788,2.561,789,2.561,790,2.561,791,2.561,792,2.561,793,2.561,794,2.561,795,2.561,796,2.561,797,3.664,798,2.561,799,2.561,800,2.561,801,2.561,802,4.279,803,2.561,804,4.279,805,3.664,806,3.025,807,4.279,808,4.279,809,2.561,810,2.561,811,2.561,812,3.025,813,2.561,814,2.561,815,2.561,816,2.561,817,2.561,818,2.561,819,2.561,820,2.561,821,2.561,822,2.561,823,2.604,824,2.561,825,2.561,826,2.561,827,2.561,828,2.561,829,3.664,830,2.561,831,2.114,832,2.561,833,2.561,834,2.561,835,2.561,836,2.561,837,2.561,838,2.561,839,2.561,840,2.561,841,2.561,842,2.561]],["title/dependencies.html",[590,2.288,775,1.819]],["body/dependencies.html",[39,0.036,56,0.034,57,0.034,590,3.032,843,4.853,844,4.853]],["title/index.html",[6,0.316,667,1.819,668,1.599]],["body/index.html",[0,0.128,1,0.412,7,1.31,8,1.204,9,0.725,11,0.427,12,0.81,13,0.736,15,0.999,21,2.504,38,0.542,39,0.039,40,0.644,42,0.893,45,0.362,56,0.025,57,0.025,106,1.818,133,0.975,143,0.802,145,1.537,147,0.936,149,0.725,151,0.901,175,0.802,260,0.567,273,1.618,288,1.818,290,1.818,301,1.618,439,2.504,440,1.818,447,2.068,454,1.818,455,1.818,458,1.818,459,2.068,470,1.818,485,1.818,520,1.818,527,2.068,540,2.068,571,2.848,589,2.229,592,3.258,597,1.618,600,3.309,605,3.309,633,3.258,668,2.864,670,2.402,671,2.402,676,3.309,678,2.068,683,2.402,691,4.53,702,2.068,704,2.068,706,2.402,707,2.402,714,2.402,735,2.402,754,2.402,762,3.309,773,2.402,774,4.278,775,2.848,779,4.278,806,3.309,812,2.402,823,2.068,831,2.402,845,6.071,846,2.91,847,2.91,848,2.91,849,2.91,850,2.91,851,2.91,852,2.91,853,2.91,854,5.674,855,2.91,856,5.182,857,5.182,858,5.182,859,5.182,860,2.91,861,2.91,862,2.91,863,2.402,864,2.91,865,2.91,866,4.008,867,2.91,868,2.91,869,2.91,870,2.91,871,2.91,872,5.742,873,4.941,874,2.91,875,2.91,876,4.008,877,4.008,878,2.91,879,2.91,880,4.008,881,4.008,882,4.008,883,4.008,884,4.008,885,4.008,886,4.008,887,4.585,888,4.585,889,4.585,890,4.585,891,2.91,892,2.91,893,2.91,894,2.91,895,5.182,896,2.91,897,2.91,898,2.91,899,2.91,900,2.91,901,2.91,902,2.91,903,2.91,904,2.91,905,2.91,906,4.941,907,2.91,908,2.91,909,2.91,910,2.91,911,2.91,912,2.91,913,2.91,914,2.91,915,2.91,916,2.91]],["title/license.html",[667,1.819,668,1.599,917,2.113]],["body/license.html",[4,0.372,39,0.031,56,0.031,57,0.031,133,1.38,149,1.252,335,2.289,431,2.925,479,2.925,481,2.925,515,2.925,517,2.925,525,2.054,539,2.925,597,2.289,678,2.925,696,3.398,717,3.398,756,4.474,769,3.398,823,2.925,917,3.398,918,5.022,919,5.42,920,4.116,921,4.116,922,5.022,923,4.116,924,4.116,925,4.116,926,5.022,927,4.116,928,5.643,929,6.059,930,5.022,931,4.116,932,5.42,933,5.022,934,4.116,935,4.116,936,4.116,937,4.116,938,4.116,939,4.116,940,4.116,941,4.116,942,4.116,943,4.116,944,5.022,945,5.022,946,4.116,947,4.116,948,5.022,949,4.116,950,4.116,951,4.116,952,4.116,953,4.116,954,4.116,955,4.116,956,4.116,957,4.116,958,4.116,959,4.116,960,4.116,961,4.116,962,4.116,963,4.116,964,4.116,965,4.116]],["title/modules.html",[588,2.303]],["body/modules.html",[39,0.034,56,0.034,57,0.034,588,2.688,589,2.688,704,3.434,966,4.834,967,4.834,968,4.834]],["title/overview.html",[969,3.418]],["body/overview.html",[0,0.132,39,0.038,45,0.374,56,0.031,57,0.031,106,3.15,128,0.374,137,1.531,148,0.932,260,0.512,270,2.686,344,2.977,412,2.305,418,3.318,420,2.977,422,2.977,525,2.068,528,2.589,588,2.804,589,3.468,590,2.589,591,3.421,592,2.945,593,3.421,594,3.421,595,3.421,596,4.163,597,2.305,702,2.945,863,4.163,969,3.421,970,4.145]],["title/miscellaneous/typealiases.html",[971,1.599,972,3.664]],["body/miscellaneous/typealiases.html",[6,0.593,11,0.511,39,0.034,56,0.034,57,0.034,343,2.667,427,3.407,570,4.106,971,2.995,973,4.795,974,4.795]],["title/miscellaneous/variables.html",[971,1.599,975,3.024]],["body/miscellaneous/variables.html",[6,0.569,11,0.49,39,0.038,56,0.033,57,0.033,130,1.7,142,1.905,143,1.268,144,1.7,357,3.353,358,3.353,458,2.875,577,3.271,578,3.271,579,3.271,580,3.271,581,3.271,971,2.875,975,3.8,976,4.603,977,5.683,978,4.603,979,4.603]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":93,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["1",{"_index":106,"title":{},"body":{"classes/FieldArrayType.html":{},"directives/FormlyAttributes.html":{},"index.html":{},"overview.html":{}}}],["1.9.0",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":970,"title":{},"body":{"overview.html":{}}}],["2",{"_index":702,"title":{},"body":{"contributing.html":{},"index.html":{},"overview.html":{}}}],["2016",{"_index":920,"title":{},"body":{"license.html":{}}}],["3",{"_index":885,"title":{},"body":{"index.html":{}}}],["3rd",{"_index":760,"title":{},"body":{"contributing.html":{}}}],["4",{"_index":863,"title":{},"body":{"index.html":{},"overview.html":{}}}],["4.0",{"_index":632,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["5",{"_index":861,"title":{},"body":{"index.html":{}}}],["abov",{"_index":943,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":46,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"classes/FieldWrapper.html":{}}}],["abstractcontrol",{"_index":41,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["accept",{"_index":727,"title":{},"body":{"contributing.html":{}}}],["accessor",{"_index":20,"title":{},"body":{"classes/Field.html":{},"components/FormlyValidationMessage.html":{}}}],["action",{"_index":960,"title":{},"body":{"license.html":{}}}],["actual_compon",{"_index":423,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["ad",{"_index":545,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["add",{"_index":65,"title":{},"body":{"classes/FieldArrayType.html":{},"contributing.html":{}}}],["add(i",{"_index":75,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["addconfig(config",{"_index":179,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["addit",{"_index":759,"title":{},"body":{"contributing.html":{}}}],["additionalproperti",{"_index":477,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["address",{"_index":897,"title":{},"body":{"index.html":{}}}],["addvalidatormessage(nam",{"_index":248,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["advanc",{"_index":535,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["aftercontentcheck",{"_index":115,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["aftercontentinit",{"_index":114,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["afterviewcheck",{"_index":117,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["afterviewinit",{"_index":116,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["alias",{"_index":973,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":440,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["alreadi",{"_index":735,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["analyze_for_entry_compon",{"_index":602,"title":{},"body":{"modules/FormlyModule.html":{}}}],["and/or",{"_index":939,"title":{},"body":{"license.html":{}}}],["angular",{"_index":691,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["angular/common",{"_index":604,"title":{},"body":{"modules/FormlyModule.html":{}}}],["angular/cor",{"_index":40,"title":{},"body":{"classes/Field.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["angular/form",{"_index":42,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["anyth",{"_index":491,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["api",{"_index":498,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["app",{"_index":893,"title":{},"body":{"index.html":{}}}],["appcompon",{"_index":894,"title":{},"body":{"index.html":{}}}],["appli",{"_index":529,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["application'",{"_index":853,"title":{},"body":{"index.html":{}}}],["appmodul",{"_index":892,"title":{},"body":{"index.html":{}}}],["approach",{"_index":514,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["aris",{"_index":964,"title":{},"body":{"license.html":{}}}],["array",{"_index":562,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["array.isarray(opt",{"_index":199,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["array.type.t",{"_index":60,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["array.type.ts:13",{"_index":78,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["array.type.ts:27",{"_index":82,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["array.type.ts:7",{"_index":70,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["ask",{"_index":747,"title":{},"body":{"contributing.html":{}}}],["assign",{"_index":522,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["associ",{"_index":539,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["asynchron",{"_index":493,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["asyncvalid",{"_index":502,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["asyncvalidatorfn",{"_index":501,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["attent",{"_index":473,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["attr",{"_index":310,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["attribut",{"_index":287,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["attributes[nam",{"_index":317,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["author",{"_index":954,"title":{},"body":{"license.html":{}}}],["avail",{"_index":739,"title":{},"body":{"contributing.html":{}}}],["back",{"_index":757,"title":{},"body":{"contributing.html":{}}}],["base",{"_index":520,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["befor",{"_index":731,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":674,"title":{},"body":{"contributing.html":{}}}],["bit",{"_index":791,"title":{},"body":{"contributing.html":{}}}],["blog",{"_index":839,"title":{},"body":{"contributing.html":{}}}],["blur",{"_index":275,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["bootstrap",{"_index":592,"title":{},"body":{"modules/FormlyModule.html":{},"index.html":{},"overview.html":{}}}],["bring",{"_index":851,"title":{},"body":{"index.html":{}}}],["brows",{"_index":968,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":966,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":684,"title":{},"body":{"contributing.html":{}}}],["builder",{"_index":73,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["c",{"_index":133,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"license.html":{}}}],["calcul",{"_index":526,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["call",{"_index":471,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["callback",{"_index":410,"title":{},"body":{"components/FormlyField.html":{}}}],["callback(this.form",{"_index":411,"title":{},"body":{"components/FormlyField.html":{}}}],["canapplyrender(fieldchang",{"_index":337,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["case",{"_index":764,"title":{},"body":{"contributing.html":{}}}],["chang",{"_index":293,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["changes.field",{"_index":305,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["charg",{"_index":925,"title":{},"body":{"license.html":{}}}],["chat",{"_index":697,"title":{},"body":{"contributing.html":{}}}],["check",{"_index":870,"title":{},"body":{"index.html":{}}}],["choos",{"_index":875,"title":{},"body":{"index.html":{}}}],["claim",{"_index":957,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"classes/FieldWrapper.html":{}},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"overview.html":{}}}],["classnam",{"_index":530,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["click",{"_index":297,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["clone",{"_index":84,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["clone(initialmodel",{"_index":94,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["clone(this.field.fieldarray",{"_index":97,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["close",{"_index":799,"title":{},"body":{"contributing.html":{}}}],["cluster_formlymodul",{"_index":593,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["cluster_formlymodule_declar",{"_index":594,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["cluster_formlymodule_export",{"_index":595,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["code",{"_index":679,"title":{},"body":{"contributing.html":{}}}],["col",{"_index":574,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["commit",{"_index":688,"title":{},"body":{"contributing.html":{}}}],["commonmodul",{"_index":603,"title":{},"body":{"modules/FormlyModule.html":{}}}],["commun",{"_index":689,"title":{},"body":{"contributing.html":{}}}],["compil",{"_index":560,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["compon",{"_index":260,"title":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"overview.html":{}}}],["component_templ",{"_index":416,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["componentfactori",{"_index":402,"title":{},"body":{"components/FormlyField.html":{}}}],["componentfactoryresolv",{"_index":352,"title":{},"body":{"components/FormlyField.html":{}}}],["componentref",{"_index":365,"title":{},"body":{"components/FormlyField.html":{}}}],["componentref.destroy",{"_index":389,"title":{},"body":{"components/FormlyField.html":{}}}],["components/formly.attribut",{"_index":608,"title":{},"body":{"modules/FormlyModule.html":{}}}],["components/formly.field",{"_index":607,"title":{},"body":{"modules/FormlyModule.html":{}}}],["components/formly.field.config",{"_index":44,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["components/formly.form",{"_index":606,"title":{},"body":{"modules/FormlyModule.html":{}}}],["components/formly.group",{"_index":611,"title":{},"body":{"modules/FormlyModule.html":{}}}],["condit",{"_index":517,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["condition",{"_index":519,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["conduct",{"_index":680,"title":{},"body":{"contributing.html":{}}}],["config",{"_index":175,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["config.extra",{"_index":196,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.manipul",{"_index":189,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.manipulators.foreach(manipul",{"_index":190,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.typ",{"_index":180,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.types.foreach(typ",{"_index":181,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.valid",{"_index":183,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.validationmessag",{"_index":192,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.validationmessages.foreach(valid",{"_index":193,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.validators.foreach(valid",{"_index":184,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.wrapp",{"_index":186,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["config.wrappers.foreach(wrapp",{"_index":187,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["configopt",{"_index":176,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"modules/FormlyModule.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["configs.foreach(config",{"_index":177,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["confirm",{"_index":744,"title":{},"body":{"contributing.html":{}}}],["connect",{"_index":965,"title":{},"body":{"license.html":{}}}],["consid",{"_index":716,"title":{},"body":{"contributing.html":{}}}],["consist",{"_index":817,"title":{},"body":{"contributing.html":{}}}],["console.log(model",{"_index":900,"title":{},"body":{"index.html":{}}}],["console.warn(`formli",{"_index":629,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["const",{"_index":141,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["constructor",{"_index":67,"title":{},"body":{"classes/FieldArrayType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["constructor(@inject(formly_config_token",{"_index":174,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["constructor(build",{"_index":68,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["constructor(formlyconfig",{"_index":351,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["constructor(priv",{"_index":88,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyValidationMessage.html":{}}}],["constructor(render",{"_index":277,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["contain",{"_index":552,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["content",{"_index":505,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["contract",{"_index":961,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":669,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributor",{"_index":676,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["control",{"_index":489,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["convent",{"_index":804,"title":{},"body":{"contributing.html":{}}}],["coordin",{"_index":721,"title":{},"body":{"contributing.html":{}}}],["copi",{"_index":928,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":919,"title":{},"body":{"license.html":{}}}],["craft",{"_index":725,"title":{},"body":{"contributing.html":{}}}],["creat",{"_index":548,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["createcomponent(fieldcompon",{"_index":401,"title":{},"body":{"components/FormlyField.html":{}}}],["createfieldcompon",{"_index":391,"title":{},"body":{"components/FormlyField.html":{}}}],["currentvalu",{"_index":338,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["custom",{"_index":504,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["damag",{"_index":958,"title":{},"body":{"license.html":{}}}],["data",{"_index":436,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["deal",{"_index":930,"title":{},"body":{"license.html":{}}}],["debounc",{"_index":550,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["declar",{"_index":591,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}],["decor",{"_index":362,"title":{},"body":{"components/FormlyField.html":{}}}],["default",{"_index":357,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["defaultopt",{"_index":227,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["defaultvalu",{"_index":558,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["defin",{"_index":13,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["demo",{"_index":806,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["demonstr",{"_index":830,"title":{},"body":{"contributing.html":{}}}],["demostr",{"_index":772,"title":{},"body":{"contributing.html":{}}}],["depend",{"_index":590,"title":{"dependencies.html":{}},"body":{"modules/FormlyModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprec",{"_index":631,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["descript",{"_index":575,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["detail",{"_index":824,"title":{},"body":{"contributing.html":{}}}],["develop",{"_index":466,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["differ",{"_index":541,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["direct",{"_index":148,"title":{"directives/FormlyAttributes.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"overview.html":{}}}],["directli",{"_index":730,"title":{},"body":{"contributing.html":{}}}],["disabl",{"_index":572,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["discuss",{"_index":720,"title":{},"body":{"contributing.html":{}}}],["display",{"_index":464,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["distribut",{"_index":937,"title":{},"body":{"license.html":{}}}],["docheck",{"_index":113,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["document",{"_index":823,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["dodd",{"_index":909,"title":{},"body":{"index.html":{}}}],["dom",{"_index":345,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["don't",{"_index":797,"title":{},"body":{"contributing.html":{}}}],["dri",{"_index":902,"title":{},"body":{"index.html":{}}}],["driven",{"_index":842,"title":{},"body":{"contributing.html":{}}}],["duplic",{"_index":724,"title":{},"body":{"contributing.html":{}}}],["dynam",{"_index":846,"title":{},"body":{"index.html":{}}}],["each",{"_index":484,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["easi",{"_index":836,"title":{},"body":{"contributing.html":{}}}],["editorconfig",{"_index":827,"title":{},"body":{"contributing.html":{}}}],["effort",{"_index":722,"title":{},"body":{"contributing.html":{}}}],["element",{"_index":414,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["elementref",{"_index":279,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["email",{"_index":895,"title":{},"body":{"index.html":{}}}],["email@gmail.com",{"_index":896,"title":{},"body":{"index.html":{}}}],["emoji",{"_index":916,"title":{},"body":{"index.html":{}}}],["enhanc",{"_index":905,"title":{},"body":{"index.html":{}}}],["enough",{"_index":800,"title":{},"body":{"contributing.html":{}}}],["ensur",{"_index":812,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["enter",{"_index":898,"title":{},"body":{"index.html":{}}}],["entrycompon",{"_index":599,"title":{},"body":{"modules/FormlyModule.html":{}}}],["error",{"_index":159,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["error(`[formli",{"_index":217,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["errormessag",{"_index":620,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["essenti",{"_index":790,"title":{},"body":{"contributing.html":{}}}],["etc",{"_index":511,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["evalu",{"_index":482,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["even",{"_index":673,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":335,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["eventemitt",{"_index":360,"title":{},"body":{"components/FormlyField.html":{}}}],["exactli",{"_index":496,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["exampl",{"_index":773,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["except",{"_index":499,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["execut",{"_index":563,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["exist",{"_index":736,"title":{},"body":{"contributing.html":{}}}],["expect",{"_index":506,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["experi",{"_index":782,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":45,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":481,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["expressionproperti",{"_index":523,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["extend",{"_index":61,"title":{},"body":{"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"components/FormlyGroup.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extenddefault",{"_index":222,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extendedtyp",{"_index":256,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extendedtype.compon",{"_index":258,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extendedtype.wrapp",{"_index":259,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extra",{"_index":164,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["extract",{"_index":789,"title":{},"body":{"contributing.html":{}}}],["f",{"_index":262,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["f.key",{"_index":108,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["fail",{"_index":765,"title":{},"body":{"contributing.html":{}}}],["fals",{"_index":304,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["featur",{"_index":685,"title":{},"body":{"contributing.html":{}}}],["feel",{"_index":695,"title":{},"body":{"contributing.html":{}}}],["few",{"_index":462,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["field",{"_index":1,"title":{"classes/Field.html":{}},"body":{"classes/Field.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["field'},{'nam",{"_index":417,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["field)[prop",{"_index":331,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["field.compon",{"_index":229,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.field.valid",{"_index":172,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.field.validation.show",{"_index":173,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.formcontrol",{"_index":167,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.formcontrol.invalid",{"_index":168,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.formcontrol.touch",{"_index":169,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.hid",{"_index":370,"title":{},"body":{"components/FormlyField.html":{}}}],["field.key",{"_index":99,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["field.options.parentform",{"_index":170,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.options.parentform.submit",{"_index":171,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.optionstyp",{"_index":225,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.optionstypes.foreach(opt",{"_index":226,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.templateopt",{"_index":329,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["field.templateoptions[prop",{"_index":330,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["field.typ",{"_index":83,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["field.wrapp",{"_index":231,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["fieldarray",{"_index":544,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldarraytyp",{"_index":58,"title":{"classes/FieldArrayType.html":{}},"body":{"classes/FieldArrayType.html":{}}}],["fieldchang",{"_index":306,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldchanges.currentvalu",{"_index":324,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["fieldchanges.previousvalu",{"_index":323,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["fieldcompon",{"_index":267,"title":{},"body":{"classes/FieldWrapper.html":{},"components/FormlyField.html":{}}}],["fieldcomponent.createcomponent(componentfactori",{"_index":405,"title":{},"body":{"components/FormlyField.html":{}}}],["fieldform",{"_index":621,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldform(control",{"_index":628,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldform.error",{"_index":634,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldform.errors.hasownproperty(error",{"_index":635,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["fieldgroup",{"_index":543,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldgroupclassnam",{"_index":531,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["fieldtransform",{"_index":165,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["fieldtyp",{"_index":62,"title":{"classes/FieldType.html":{}},"body":{"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"components/FormlyGroup.html":{}}}],["fieldvalidatorfn",{"_index":129,"title":{"interfaces/FieldValidatorFn.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["fieldwrapp",{"_index":265,"title":{"classes/FieldWrapper.html":{}},"body":{"classes/FieldWrapper.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"license.html":{}}}],["fill",{"_index":801,"title":{},"body":{"contributing.html":{}}}],["filter(attr",{"_index":308,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["filter(stat",{"_index":319,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["find",{"_index":706,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["first",{"_index":508,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["fit",{"_index":951,"title":{},"body":{"license.html":{}}}],["fix",{"_index":711,"title":{},"body":{"contributing.html":{}}}],["fn",{"_index":333,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["fn(this.field",{"_index":336,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["focu",{"_index":276,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["follow",{"_index":678,"title":{},"body":{"contributing.html":{},"index.html":{},"license.html":{}}}],["forc",{"_index":467,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["forchild(config",{"_index":617,"title":{},"body":{"modules/FormlyModule.html":{}}}],["foreach(attr",{"_index":311,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["foreach(stat",{"_index":320,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["foreach(wrappernam",{"_index":395,"title":{},"body":{"components/FormlyField.html":{}}}],["form",{"_index":8,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["form'},{'nam",{"_index":419,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["formarray",{"_index":74,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["format",{"_index":833,"title":{},"body":{"contributing.html":{}}}],["formcontrol",{"_index":24,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formcontrol](https://angular.io/api/forms/formcontrol",{"_index":524,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formgroup",{"_index":15,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["formgroupdirect",{"_index":429,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formli",{"_index":147,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["formly.field.config",{"_index":285,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{}}}],["formly/bootstrap",{"_index":881,"title":{},"body":{"index.html":{}}}],["formly/cor",{"_index":873,"title":{},"body":{"index.html":{}}}],["formly/core@2.x",{"_index":864,"title":{},"body":{"index.html":{}}}],["formly/core@3.x",{"_index":862,"title":{},"body":{"index.html":{}}}],["formly/ion",{"_index":882,"title":{},"body":{"index.html":{}}}],["formly/kendo",{"_index":884,"title":{},"body":{"index.html":{}}}],["formly/materi",{"_index":880,"title":{},"body":{"index.html":{}}}],["formly/materialnpm",{"_index":879,"title":{},"body":{"index.html":{}}}],["formly/primeng",{"_index":883,"title":{},"body":{"index.html":{}}}],["formly@1.x",{"_index":865,"title":{},"body":{"index.html":{}}}],["formly_config_token",{"_index":142,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"modules/FormlyModule.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/variables.html":{}}}],["formly_valid",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formlyattribut",{"_index":270,"title":{"directives/FormlyAttributes.html":{}},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyattributeev",{"_index":570,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/typealiases.html":{}}}],["formlybootstrapmodul",{"_index":886,"title":{},"body":{"index.html":{}}}],["formlyconfig",{"_index":152,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["formlyfield",{"_index":344,"title":{"components/FormlyField.html":{}},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyfieldconfig",{"_index":12,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["formlyform",{"_index":418,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyformbuild",{"_index":69,"title":{},"body":{"classes/FieldArrayType.html":{},"modules/FormlyModule.html":{}}}],["formlyformexpress",{"_index":609,"title":{},"body":{"modules/FormlyModule.html":{}}}],["formlyformopt",{"_index":18,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["formlygroup",{"_index":420,"title":{"components/FormlyGroup.html":{}},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyionicmodul",{"_index":888,"title":{},"body":{"index.html":{}}}],["formlyj",{"_index":921,"title":{},"body":{"license.html":{}}}],["formlykendomodul",{"_index":890,"title":{},"body":{"index.html":{}}}],["formlylifecyclefn",{"_index":367,"title":{"interfaces/FormlyLifeCycleFn.html":{}},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formlylifecycleopt",{"_index":368,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formlymaterialmodul",{"_index":887,"title":{},"body":{"index.html":{}}}],["formlymodul",{"_index":589,"title":{"modules/FormlyModule.html":{}},"body":{"modules/FormlyModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["formlymodule.forroot",{"_index":891,"title":{},"body":{"index.html":{}}}],["formlyprimengmodul",{"_index":889,"title":{},"body":{"index.html":{}}}],["formlytemplateopt",{"_index":43,"title":{},"body":{"classes/Field.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formlyvalidationmessag",{"_index":422,"title":{"components/FormlyValidationMessage.html":{}},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["formlyvaluechangeev",{"_index":587,"title":{"interfaces/FormlyValueChangeEvent.html":{}},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["formstat",{"_index":35,"title":{},"body":{"classes/Field.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["forroot(config",{"_index":614,"title":{},"body":{"modules/FormlyModule.html":{}}}],["forth",{"_index":758,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":705,"title":{},"body":{"contributing.html":{}}}],["free",{"_index":696,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["function",{"_index":343,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/typealiases.html":{}}}],["function(field",{"_index":166,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["furnish",{"_index":942,"title":{},"body":{"license.html":{}}}],["further",{"_index":871,"title":{},"body":{"index.html":{}}}],["gener",{"_index":443,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["get",{"_index":667,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["geterrormessag",{"_index":626,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["getformcontrol",{"_index":25,"title":{},"body":{"classes/Field.html":{}}}],["getformst",{"_index":36,"title":{},"body":{"classes/Field.html":{}}}],["getid",{"_index":33,"title":{},"body":{"classes/Field.html":{}}}],["getkey",{"_index":22,"title":{},"body":{"classes/Field.html":{}}}],["getmergedfield(field",{"_index":219,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getpropvalue(field",{"_index":327,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["getshowerror",{"_index":30,"title":{},"body":{"classes/Field.html":{}}}],["getstatementvalue(stat",{"_index":332,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["getto",{"_index":27,"title":{},"body":{"classes/Field.html":{}}}],["gettype(nam",{"_index":214,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getvalidator(nam",{"_index":246,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getvalidatormessage(nam",{"_index":250,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["getwrapper(nam",{"_index":238,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["git",{"_index":777,"title":{},"body":{"contributing.html":{}}}],["github",{"_index":708,"title":{},"body":{"contributing.html":{}}}],["gitter",{"_index":698,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":754,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["go",{"_index":454,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["goe",{"_index":914,"title":{},"body":{"index.html":{}}}],["good",{"_index":810,"title":{},"body":{"contributing.html":{}}}],["grant",{"_index":924,"title":{},"body":{"license.html":{}}}],["group",{"_index":425,"title":{},"body":{"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["group'},{'nam",{"_index":421,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["guid",{"_index":867,"title":{},"body":{"index.html":{}}}],["guidelin",{"_index":677,"title":{},"body":{"contributing.html":{}}}],["hard",{"_index":788,"title":{},"body":{"contributing.html":{}}}],["have",{"_index":752,"title":{},"body":{"contributing.html":{}}}],["hear",{"_index":798,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":672,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":455,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["herebi",{"_index":923,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":576,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["hide",{"_index":516,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["hideexpress",{"_index":518,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["histori",{"_index":838,"title":{},"body":{"contributing.html":{}}}],["holder",{"_index":955,"title":{},"body":{"license.html":{}}}],["host",{"_index":348,"title":{},"body":{"components/FormlyField.html":{}}}],["hostlisten",{"_index":274,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["hostlistener('blur",{"_index":302,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["hostlistener('focu",{"_index":298,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["html",{"_index":413,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["http://plnkr.co",{"_index":751,"title":{},"body":{"contributing.html":{}}}],["https://material.angular.io/guide/get",{"_index":878,"title":{},"body":{"index.html":{}}}],["id",{"_index":32,"title":{},"body":{"classes/Field.html":{},"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["immedi",{"_index":556,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["implement",{"_index":110,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["impli",{"_index":949,"title":{},"body":{"license.html":{}}}],["import",{"_index":38,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["importantli",{"_index":763,"title":{},"body":{"contributing.html":{}}}],["includ",{"_index":932,"title":{},"body":{"license.html":{}}}],["inclus",{"_index":693,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["inform",{"_index":487,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["initi",{"_index":559,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["initialmodel",{"_index":77,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["inject",{"_index":137,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"overview.html":{}}}],["injectiontoken",{"_index":138,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["injectiontoken('formly_config_token",{"_index":144,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":7,"title":{},"body":{"classes/Field.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["input('formlyattribut",{"_index":286,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["insist",{"_index":778,"title":{},"body":{"contributing.html":{}}}],["instal",{"_index":872,"title":{},"body":{"index.html":{}}}],["instead",{"_index":503,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["integ",{"_index":551,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["interestingli",{"_index":781,"title":{},"body":{"contributing.html":{}}}],["interfac",{"_index":128,"title":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"overview.html":{}}}],["investig",{"_index":796,"title":{},"body":{"contributing.html":{}}}],["ionic",{"_index":856,"title":{},"body":{"index.html":{}}}],["isnullorundefin",{"_index":85,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["isnullorundefined(i",{"_index":90,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["isol",{"_index":794,"title":{},"body":{"contributing.html":{}}}],["issu",{"_index":683,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["it'",{"_index":540,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["javascript",{"_index":901,"title":{},"body":{"index.html":{}}}],["json",{"_index":847,"title":{},"body":{"index.html":{}}}],["keep",{"_index":690,"title":{},"body":{"contributing.html":{}}}],["kendo",{"_index":857,"title":{},"body":{"index.html":{}}}],["kent",{"_index":908,"title":{},"body":{"index.html":{}}}],["key",{"_index":21,"title":{},"body":{"classes/Field.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["keydown",{"_index":294,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["keypress",{"_index":296,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["keyup",{"_index":295,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["khan",{"_index":913,"title":{},"body":{"index.html":{}}}],["kind",{"_index":717,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["know",{"_index":457,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["label",{"_index":571,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["larger",{"_index":792,"title":{},"body":{"contributing.html":{}}}],["layout",{"_index":536,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["lead",{"_index":834,"title":{},"body":{"contributing.html":{}}}],["legend",{"_index":412,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"overview.html":{}}}],["liabil",{"_index":959,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":956,"title":{},"body":{"license.html":{}}}],["lib",{"_index":855,"title":{},"body":{"index.html":{}}}],["librari",{"_index":762,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["licens",{"_index":917,"title":{"license.html":{}},"body":{"license.html":{}}}],["lifecycl",{"_index":407,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["lifecyclehooks(callback",{"_index":409,"title":{},"body":{"components/FormlyField.html":{}}}],["limit",{"_index":933,"title":{},"body":{"license.html":{}}}],["link",{"_index":439,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["list",{"_index":146,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["liter",{"_index":649,"title":{},"body":{"interfaces/ManipulatorOption.html":{}}}],["live",{"_index":753,"title":{},"body":{"contributing.html":{}}}],["look",{"_index":456,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["love",{"_index":670,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["main",{"_index":521,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["mainli",{"_index":849,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":145,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{}}}],["major",{"_index":718,"title":{},"body":{"contributing.html":{}}}],["make",{"_index":534,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["manipul",{"_index":264,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["manipulator.class()[manipulator.method](thi",{"_index":253,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["manipulatoropt",{"_index":252,"title":{"interfaces/ManipulatorOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["manipulatorwrapp",{"_index":162,"title":{"interfaces/ManipulatorWrapper.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["map",{"_index":463,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["match",{"_index":57,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["materi",{"_index":869,"title":{},"body":{"index.html":{}}}],["material2",{"_index":858,"title":{},"body":{"index.html":{}}}],["max",{"_index":577,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":580,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["mayb",{"_index":734,"title":{},"body":{"contributing.html":{}}}],["merchant",{"_index":950,"title":{},"body":{"license.html":{}}}],["merg",{"_index":935,"title":{},"body":{"license.html":{}}}],["mergeextendedtype(nam",{"_index":255,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["messag",{"_index":158,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["message(fieldform.errors[error",{"_index":645,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.t",{"_index":619,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:11",{"_index":623,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:12",{"_index":624,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:14",{"_index":622,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["message.ts:18",{"_index":627,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["messageproperti",{"_index":475,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["metadata",{"_index":272,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["method",{"_index":64,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["millisecond",{"_index":554,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["min",{"_index":578,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["mind",{"_index":819,"title":{},"body":{"contributing.html":{}}}],["minim",{"_index":748,"title":{},"body":{"contributing.html":{}}}],["minlength",{"_index":579,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["miscellan",{"_index":971,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":712,"title":{},"body":{"contributing.html":{}}}],["mit",{"_index":918,"title":{},"body":{"license.html":{}}}],["model",{"_index":9,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["model[key",{"_index":437,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["modelchang",{"_index":350,"title":{},"body":{"components/FormlyField.html":{}}}],["modelopt",{"_index":557,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["modifi",{"_index":934,"title":{},"body":{"license.html":{}}}],["modul",{"_index":588,"title":{"modules/FormlyModule.html":{},"modules.html":{}},"body":{"modules/FormlyModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithprovid",{"_index":601,"title":{},"body":{"modules/FormlyModule.html":{}}}],["moham",{"_index":911,"title":{},"body":{"index.html":{}}}],["more",{"_index":486,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["much",{"_index":495,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["multi",{"_index":616,"title":{},"body":{"modules/FormlyModule.html":{}}}],["name",{"_index":72,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["nativescript",{"_index":860,"title":{},"body":{"index.html":{}}}],["need",{"_index":492,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["new",{"_index":143,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ng",{"_index":671,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ngaftercontentcheck",{"_index":124,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngaftercontentinit",{"_index":123,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngafterviewcheck",{"_index":126,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngafterviewinit",{"_index":125,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngdocheck",{"_index":122,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngform",{"_index":430,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["ngmodul",{"_index":600,"title":{},"body":{"modules/FormlyModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":121,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{}}}],["ngondestroy",{"_index":127,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngoninit",{"_index":120,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{}}}],["ngx",{"_index":845,"title":{},"body":{"index.html":{}}}],["none",{"_index":371,"title":{},"body":{"components/FormlyField.html":{}}}],["noninfring",{"_index":953,"title":{},"body":{"license.html":{}}}],["note",{"_index":442,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["notic",{"_index":944,"title":{},"body":{"license.html":{}}}],["npm",{"_index":774,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["null",{"_index":135,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["number",{"_index":76,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["object",{"_index":461,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["object.assign(ref.inst",{"_index":384,"title":{},"body":{"components/FormlyField.html":{}}}],["object.keys(attributes).foreach(nam",{"_index":316,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["observ",{"_index":433,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["obtain",{"_index":927,"title":{},"body":{"license.html":{}}}],["on",{"_index":490,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["onblur",{"_index":303,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["onchang",{"_index":112,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["ondestroy",{"_index":118,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["onfocu",{"_index":299,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["oninit",{"_index":111,"title":{},"body":{"classes/FieldType.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["open",{"_index":692,"title":{},"body":{"contributing.html":{}}}],["opportun",{"_index":910,"title":{},"body":{"index.html":{}}}],["option",{"_index":10,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.compon",{"_index":204,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.defaultopt",{"_index":210,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.extend",{"_index":208,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.foreach((opt",{"_index":200,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.nam",{"_index":206,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.typ",{"_index":235,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.types.foreach((typ",{"_index":236,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.wrapp",{"_index":211,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["options.wrappers.foreach((wrapp",{"_index":212,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["optionstyp",{"_index":460,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["order",{"_index":745,"title":{},"body":{"contributing.html":{}}}],["origin",{"_index":814,"title":{},"body":{"contributing.html":{}}}],["otherwis",{"_index":963,"title":{},"body":{"license.html":{}}}],["out",{"_index":597,"title":{},"body":{"modules/FormlyModule.html":{},"contributing.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outlin",{"_index":719,"title":{},"body":{"contributing.html":{}}}],["output",{"_index":349,"title":{},"body":{"components/FormlyField.html":{}}}],["over",{"_index":547,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["overflow",{"_index":701,"title":{},"body":{"contributing.html":{}}}],["overview",{"_index":969,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":775,"title":{"dependencies.html":{}},"body":{"contributing.html":{},"index.html":{}}}],["pair",{"_index":480,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["paramet",{"_index":71,"title":{},"body":{"classes/FieldArrayType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["parentform",{"_index":586,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["parser",{"_index":569,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["part",{"_index":512,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["parti",{"_index":761,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":479,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["pass",{"_index":630,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["patient",{"_index":816,"title":{},"body":{"contributing.html":{}}}],["pattern",{"_index":581,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["peopl",{"_index":831,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["permiss",{"_index":922,"title":{},"body":{"license.html":{}}}],["permit",{"_index":941,"title":{},"body":{"license.html":{}}}],["person",{"_index":926,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":564,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["placehold",{"_index":288,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["pleas",{"_index":694,"title":{},"body":{"contributing.html":{}}}],["plugin",{"_index":546,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["plunk",{"_index":785,"title":{},"body":{"contributing.html":{}}}],["plunker",{"_index":770,"title":{},"body":{"contributing.html":{}}}],["point",{"_index":767,"title":{},"body":{"contributing.html":{}}}],["portion",{"_index":947,"title":{},"body":{"license.html":{}}}],["possibl",{"_index":742,"title":{},"body":{"contributing.html":{}}}],["post",{"_index":448,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["postwrapp",{"_index":163,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["power",{"_index":848,"title":{},"body":{"index.html":{}}}],["pr",{"_index":802,"title":{},"body":{"contributing.html":{}}}],["pre",{"_index":876,"title":{},"body":{"index.html":{}}}],["precis",{"_index":832,"title":{},"body":{"contributing.html":{}}}],["prepar",{"_index":784,"title":{},"body":{"contributing.html":{}}}],["pretti",{"_index":494,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["prevent",{"_index":723,"title":{},"body":{"contributing.html":{}}}],["previousvalu",{"_index":339,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["prewrapp",{"_index":161,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["primeng",{"_index":859,"title":{},"body":{"index.html":{}}}],["privat",{"_index":254,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["problem",{"_index":682,"title":{},"body":{"contributing.html":{}}}],["project",{"_index":728,"title":{},"body":{"contributing.html":{}}}],["promis",{"_index":500,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["prompt",{"_index":811,"title":{},"body":{"contributing.html":{}}}],["prop",{"_index":328,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["properti",{"_index":63,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["propos",{"_index":713,"title":{},"body":{"contributing.html":{}}}],["provid",{"_index":525,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"license.html":{},"overview.html":{}}}],["public",{"_index":822,"title":{},"body":{"contributing.html":{}}}],["publish",{"_index":936,"title":{},"body":{"license.html":{}}}],["pull",{"_index":710,"title":{},"body":{"contributing.html":{}}}],["purpos",{"_index":952,"title":{},"body":{"license.html":{}}}],["push",{"_index":813,"title":{},"body":{"contributing.html":{}}}],["question",{"_index":681,"title":{},"body":{"contributing.html":{}}}],["quick",{"_index":866,"title":{},"body":{"index.html":{}}}],["quickli",{"_index":766,"title":{},"body":{"contributing.html":{}}}],["rais",{"_index":699,"title":{},"body":{"contributing.html":{}}}],["reactiv",{"_index":850,"title":{},"body":{"index.html":{}}}],["reactiveformsmodul",{"_index":605,"title":{},"body":{"modules/FormlyModule.html":{},"index.html":{}}}],["read",{"_index":373,"title":{},"body":{"components/FormlyField.html":{},"contributing.html":{}}}],["readabl",{"_index":835,"title":{},"body":{"contributing.html":{}}}],["readili",{"_index":738,"title":{},"body":{"contributing.html":{}}}],["readm",{"_index":828,"title":{},"body":{"contributing.html":{}}}],["readonli",{"_index":291,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["realli",{"_index":793,"title":{},"body":{"contributing.html":{}}}],["reason",{"_index":474,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["recommend",{"_index":513,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["record",{"_index":840,"title":{},"body":{"contributing.html":{}}}],["ref",{"_index":404,"title":{},"body":{"components/FormlyField.html":{}}}],["regist",{"_index":150,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["relat",{"_index":438,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["remov",{"_index":66,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyValidationMessage.html":{}}}],["remove(i",{"_index":81,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["render",{"_index":281,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["renderer2",{"_index":278,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["replac",{"_index":549,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["repositori",{"_index":709,"title":{},"body":{"contributing.html":{}}}],["reproduc",{"_index":743,"title":{},"body":{"contributing.html":{}}}],["reproduct",{"_index":749,"title":{},"body":{"contributing.html":{}}}],["request",{"_index":686,"title":{},"body":{"contributing.html":{}}}],["requir",{"_index":458,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["reserv",{"_index":453,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["reset",{"_index":528,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"overview.html":{}}}],["resetmodel",{"_index":585,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["rest",{"_index":542,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["restrict",{"_index":931,"title":{},"body":{"license.html":{}}}],["result",{"_index":56,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":47,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["reusabl",{"_index":903,"title":{},"body":{"index.html":{}}}],["reversedeepmerg",{"_index":140,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["reversedeepmerge(field",{"_index":221,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["right",{"_index":769,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["roadmap",{"_index":904,"title":{},"body":{"index.html":{}}}],["row",{"_index":573,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["rule",{"_index":478,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["run",{"_index":483,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["rxjs/observ",{"_index":434,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["rxjs/subject",{"_index":432,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["same",{"_index":497,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["save",{"_index":779,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["save2",{"_index":874,"title":{},"body":{"index.html":{}}}],["scenario",{"_index":750,"title":{},"body":{"contributing.html":{}}}],["screencast",{"_index":841,"title":{},"body":{"contributing.html":{}}}],["search",{"_index":732,"title":{},"body":{"contributing.html":{}}}],["second",{"_index":509,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["see",{"_index":485,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["selector",{"_index":273,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{},"index.html":{}}}],["sell",{"_index":940,"title":{},"body":{"license.html":{}}}],["server",{"_index":449,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["services/formly.config",{"_index":366,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["services/formly.form.build",{"_index":87,"title":{},"body":{"classes/FieldArrayType.html":{},"modules/FormlyModule.html":{}}}],["services/formly.form.express",{"_index":610,"title":{},"body":{"modules/FormlyModule.html":{}}}],["set",{"_index":444,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["setfieldform(control",{"_index":625,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["setmanipulator(manipul",{"_index":251,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["settype(opt",{"_index":198,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["settypewrapper(typ",{"_index":240,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["setvalidator(opt",{"_index":244,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["setwrapper(opt",{"_index":233,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["shall",{"_index":945,"title":{},"body":{"license.html":{}}}],["show",{"_index":476,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["showerror",{"_index":29,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["signatur",{"_index":132,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/ManipulatorWrapper.html":{}}}],["simpl",{"_index":538,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["simplechang",{"_index":119,"title":{},"body":{"classes/FieldType.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{}}}],["small",{"_index":729,"title":{},"body":{"contributing.html":{}}}],["softwar",{"_index":929,"title":{},"body":{"license.html":{}}}],["sometim",{"_index":787,"title":{},"body":{"contributing.html":{}}}],["soon",{"_index":741,"title":{},"body":{"contributing.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"classes/FieldType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{}}}],["spec",{"_index":820,"title":{},"body":{"contributing.html":{}}}],["special",{"_index":907,"title":{},"body":{"index.html":{}}}],["specif",{"_index":446,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["specifi",{"_index":441,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["src/.../formly.config.t",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../formly.field.config.t",{"_index":974,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.t",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/src/components/formly.attributes.t",{"_index":271,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:12",{"_index":284,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:16",{"_index":283,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:18",{"_index":280,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.attributes.ts:8",{"_index":282,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["src/core/src/components/formly.field.config.t",{"_index":427,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/src/components/formly.field.config.ts:192",{"_index":428,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{}}}],["src/core/src/components/formly.field.config.ts:218",{"_index":646,"title":{},"body":{"interfaces/FormlyValueChangeEvent.html":{}}}],["src/core/src/components/formly.field.config.ts:219",{"_index":647,"title":{},"body":{"interfaces/FormlyValueChangeEvent.html":{}}}],["src/core/src/components/formly.field.config.ts:220",{"_index":648,"title":{},"body":{"interfaces/FormlyValueChangeEvent.html":{}}}],["src/core/src/components/formly.field.t",{"_index":347,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:21",{"_index":356,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:22",{"_index":355,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:23",{"_index":354,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:24",{"_index":359,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:25",{"_index":361,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:26",{"_index":364,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.field.ts:28",{"_index":353,"title":{},"body":{"components/FormlyField.html":{}}}],["src/core/src/components/formly.group.t",{"_index":424,"title":{},"body":{"components/FormlyGroup.html":{}}}],["src/core/src/core.module.t",{"_index":598,"title":{},"body":{"modules/FormlyModule.html":{}}}],["src/core/src/services/formly.config.t",{"_index":130,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"miscellaneous/variables.html":{}}}],["src/core/src/services/formly.config.ts:190",{"_index":658,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:191",{"_index":655,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:192",{"_index":659,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:193",{"_index":657,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:194",{"_index":656,"title":{},"body":{"interfaces/TypeOption.html":{}}}],["src/core/src/services/formly.config.ts:198",{"_index":665,"title":{},"body":{"interfaces/WrapperOption.html":{}}}],["src/core/src/services/formly.config.ts:199",{"_index":664,"title":{},"body":{"interfaces/WrapperOption.html":{}}}],["src/core/src/services/formly.config.ts:200",{"_index":666,"title":{},"body":{"interfaces/WrapperOption.html":{}}}],["src/core/src/services/formly.config.ts:203",{"_index":136,"title":{},"body":{"interfaces/FieldValidatorFn.html":{}}}],["src/core/src/services/formly.config.ts:208",{"_index":662,"title":{},"body":{"interfaces/ValidatorOption.html":{}}}],["src/core/src/services/formly.config.ts:209",{"_index":663,"title":{},"body":{"interfaces/ValidatorOption.html":{}}}],["src/core/src/services/formly.config.ts:213",{"_index":661,"title":{},"body":{"interfaces/ValidationMessageOption.html":{}}}],["src/core/src/services/formly.config.ts:214",{"_index":660,"title":{},"body":{"interfaces/ValidationMessageOption.html":{}}}],["src/core/src/services/formly.config.ts:218",{"_index":650,"title":{},"body":{"interfaces/ManipulatorOption.html":{}}}],["src/core/src/services/formly.config.ts:219",{"_index":651,"title":{},"body":{"interfaces/ManipulatorOption.html":{}}}],["src/core/src/services/formly.config.ts:222",{"_index":652,"title":{},"body":{"interfaces/ManipulatorWrapper.html":{}}}],["src/core/src/services/formly.config.ts:227",{"_index":654,"title":{},"body":{"interfaces/TemplateManipulators.html":{}}}],["src/core/src/services/formly.config.ts:228",{"_index":653,"title":{},"body":{"interfaces/TemplateManipulators.html":{}}}],["src/core/src/templates/field",{"_index":59,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["src/core/src/templates/field.t",{"_index":5,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:11",{"_index":23,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:13",{"_index":26,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:15",{"_index":28,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:17",{"_index":31,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:19",{"_index":34,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:21",{"_index":37,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:6",{"_index":16,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:7",{"_index":14,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:8",{"_index":17,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.ts:9",{"_index":19,"title":{},"body":{"classes/Field.html":{}}}],["src/core/src/templates/field.type.t",{"_index":109,"title":{},"body":{"classes/FieldType.html":{}}}],["src/core/src/templates/field.wrapper.t",{"_index":266,"title":{},"body":{"classes/FieldWrapper.html":{}}}],["src/core/src/templates/field.wrapper.ts:5",{"_index":269,"title":{},"body":{"classes/FieldWrapper.html":{}}}],["src/core/src/templates/formly.valid",{"_index":618,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["src/core/src/utils.t",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":700,"title":{},"body":{"contributing.html":{}}}],["stackblitz",{"_index":868,"title":{},"body":{"index.html":{}}}],["standalon",{"_index":776,"title":{},"body":{"contributing.html":{}}}],["start",{"_index":668,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["state",{"_index":469,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["statement",{"_index":292,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["static",{"_index":613,"title":{},"body":{"modules/FormlyModule.html":{}}}],["statu",{"_index":527,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["step",{"_index":290,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["store",{"_index":435,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["string",{"_index":53,"title":{},"body":{"classes/Field.html":{},"interfaces/FieldValidatorFn.html":{},"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["string|numb",{"_index":583,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["string|regexp",{"_index":582,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["style",{"_index":826,"title":{},"body":{"contributing.html":{}}}],["style.display",{"_index":369,"title":{},"body":{"components/FormlyField.html":{}}}],["subject",{"_index":431,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["sublicens",{"_index":938,"title":{},"body":{"license.html":{}}}],["submiss",{"_index":687,"title":{},"body":{"contributing.html":{}}}],["submit",{"_index":707,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["submit(model",{"_index":899,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":946,"title":{},"body":{"license.html":{}}}],["successfulli",{"_index":726,"title":{},"body":{"contributing.html":{}}}],["suitabl",{"_index":771,"title":{},"body":{"contributing.html":{}}}],["super",{"_index":89,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["support",{"_index":704,"title":{},"body":{"contributing.html":{},"index.html":{},"modules.html":{}}}],["sure",{"_index":715,"title":{},"body":{"contributing.html":{}}}],["svg",{"_index":967,"title":{},"body":{"modules.html":{}}}],["systemat",{"_index":746,"title":{},"body":{"contributing.html":{}}}],["tabindex",{"_index":289,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["tag",{"_index":703,"title":{},"body":{"contributing.html":{}}}],["tbc",{"_index":825,"title":{},"body":{"contributing.html":{}}}],["techniqu",{"_index":450,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["templat",{"_index":151,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{}}}],["templatemanipul",{"_index":160,"title":{"interfaces/TemplateManipulators.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["templateopt",{"_index":459,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["templates/field",{"_index":139,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["templates/field.typ",{"_index":426,"title":{},"body":{"components/FormlyGroup.html":{}}}],["templates/formly.valid",{"_index":612,"title":{},"body":{"modules/FormlyModule.html":{}}}],["test",{"_index":808,"title":{},"body":{"contributing.html":{}}}],["thank",{"_index":906,"title":{},"body":{"index.html":{}}}],["themselv",{"_index":783,"title":{},"body":{"contributing.html":{}}}],["third",{"_index":510,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["this.addconfig(config",{"_index":178,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.addvalidatormessage(validation.nam",{"_index":194,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.attribut",{"_index":307,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.builder.buildform(this.formcontrol",{"_index":100,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.canapplyrender(fieldchang",{"_index":309,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.componentfactoryresolver.resolvecomponentfactory(compon",{"_index":403,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentref",{"_index":390,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentrefs.foreach(componentref",{"_index":388,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentrefs.foreach(ref",{"_index":383,"title":{},"body":{"components/FormlyField.html":{}}}],["this.componentrefs.push(ref",{"_index":406,"title":{},"body":{"components/FormlyField.html":{}}}],["this.createcomponent(fieldcompon",{"_index":397,"title":{},"body":{"components/FormlyField.html":{}}}],["this.createfieldcompon",{"_index":381,"title":{},"body":{"components/FormlyField.html":{}}}],["this.elementref.nativeel",{"_index":313,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.elementref.nativeelement.focu",{"_index":325,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.elementref.nativeelement[this.field.focu",{"_index":326,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.extra",{"_index":197,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.field",{"_index":386,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyValidationMessage.html":{}}}],["this.field.asyncvalid",{"_index":642,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.asyncvalidators[error",{"_index":643,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.asyncvalidators[error].messag",{"_index":644,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.fieldgroup.foreach((f",{"_index":107,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup.foreach((field",{"_index":98,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup.length",{"_index":91,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup.splice(i",{"_index":96,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.fieldgroup[i",{"_index":101,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.field.focu",{"_index":300,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.field.formcontrol",{"_index":49,"title":{},"body":{"classes/Field.html":{},"components/FormlyValidationMessage.html":{}}}],["this.field.id",{"_index":54,"title":{},"body":{"classes/Field.html":{}}}],["this.field.key",{"_index":48,"title":{},"body":{"classes/Field.html":{}}}],["this.field.lifecycl",{"_index":408,"title":{},"body":{"components/FormlyField.html":{}}}],["this.field.templ",{"_index":380,"title":{},"body":{"components/FormlyField.html":{}}}],["this.field.templateopt",{"_index":50,"title":{},"body":{"classes/Field.html":{},"directives/FormlyAttributes.html":{}}}],["this.field.templateoptions.attribut",{"_index":315,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.field.templateoptions[stat",{"_index":334,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.field.valid",{"_index":637,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validation.messag",{"_index":638,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validation.messages[error",{"_index":639,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validators[error",{"_index":640,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.validators[error].messag",{"_index":641,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.field.wrapp",{"_index":394,"title":{},"body":{"components/FormlyField.html":{}}}],["this.fieldcompon",{"_index":393,"title":{},"body":{"components/FormlyField.html":{}}}],["this.form",{"_index":385,"title":{},"body":{"components/FormlyField.html":{}}}],["this.formcontrol.removeat(i",{"_index":105,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.formlyconfig.gettype(this.field.typ",{"_index":392,"title":{},"body":{"components/FormlyField.html":{}}}],["this.formlyconfig.getvalidatormessage(error",{"_index":636,"title":{},"body":{"components/FormlyValidationMessage.html":{}}}],["this.formlyconfig.getwrapper(wrappername).compon",{"_index":398,"title":{},"body":{"components/FormlyField.html":{}}}],["this.getpropvalue(fieldchange.previousvalu",{"_index":340,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.getpropvalue(this.field",{"_index":314,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.getstatementvalue(stat",{"_index":322,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.gettype(option).defaultopt",{"_index":228,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.gettype(this.types[name].extend",{"_index":257,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.gettype(this.types[name].extends).defaultopt",{"_index":224,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.lifecyclehooks(this.lifecycle.aftercontentcheck",{"_index":375,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.aftercontentinit",{"_index":374,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.afterviewcheck",{"_index":377,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.afterviewinit",{"_index":376,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.docheck",{"_index":378,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.onchang",{"_index":382,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.ondestroy",{"_index":387,"title":{},"body":{"components/FormlyField.html":{}}}],["this.lifecyclehooks(this.lifecycle.oninit",{"_index":379,"title":{},"body":{"components/FormlyField.html":{}}}],["this.mergeextendedtype(nam",{"_index":218,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.messages[nam",{"_index":249,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.model",{"_index":102,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyField.html":{}}}],["this.model.splice(i",{"_index":92,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.opt",{"_index":103,"title":{},"body":{"classes/FieldArrayType.html":{},"components/FormlyField.html":{}}}],["this.options).resettrackmodelchang",{"_index":104,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["this.options.formst",{"_index":55,"title":{},"body":{"classes/Field.html":{}}}],["this.options.showerror(thi",{"_index":52,"title":{},"body":{"classes/Field.html":{}}}],["this.renderer.listen",{"_index":321,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.renderer.setattribut",{"_index":312,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.setmanipulator(manipul",{"_index":191,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settype(opt",{"_index":201,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settype(typ",{"_index":182,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settypewrapper(options.nam",{"_index":213,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.settypewrapper(typ",{"_index":237,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.setvalidator(valid",{"_index":185,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.setwrapper(wrapp",{"_index":188,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.stat",{"_index":318,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.statements.indexof(prop",{"_index":341,"title":{},"body":{"directives/FormlyAttributes.html":{}}}],["this.types[nam",{"_index":215,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].compon",{"_index":230,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].defaultopt",{"_index":220,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].extend",{"_index":223,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[name].wrapp",{"_index":232,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.nam",{"_index":202,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].compon",{"_index":203,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].defaultopt",{"_index":209,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].extend",{"_index":207,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[options.name].nam",{"_index":205,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[typ",{"_index":241,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[type].wrapp",{"_index":242,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.types[type].wrappers.push(nam",{"_index":243,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.validators[nam",{"_index":247,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.validators[options.nam",{"_index":245,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.wrappers[nam",{"_index":239,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["this.wrappers[options.nam",{"_index":234,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["through",{"_index":837,"title":{},"body":{"contributing.html":{}}}],["throughout",{"_index":818,"title":{},"body":{"contributing.html":{}}}],["throw",{"_index":216,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["time",{"_index":561,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["today",{"_index":675,"title":{},"body":{"contributing.html":{}}}],["togeth",{"_index":533,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["tort",{"_index":962,"title":{},"body":{"license.html":{}}}],["tracker",{"_index":733,"title":{},"body":{"contributing.html":{}}}],["tree",{"_index":346,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["tri",{"_index":470,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{},"index.html":{}}}],["trigger",{"_index":555,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["true",{"_index":301,"title":{},"body":{"directives/FormlyAttributes.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["ts",{"_index":809,"title":{},"body":{"contributing.html":{}}}],["tslib",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/Field.html":{},"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"classes/FieldWrapper.html":{},"directives/FormlyAttributes.html":{},"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"modules/FormlyModule.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.compon",{"_index":400,"title":{},"body":{"components/FormlyField.html":{}}}],["typealias",{"_index":972,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":342,"title":{},"body":{"directives/FormlyAttributes.html":{},"components/FormlyValidationMessage.html":{}}}],["typeopt",{"_index":153,"title":{"interfaces/TypeOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["types/templ",{"_index":877,"title":{},"body":{"index.html":{}}}],["ui",{"_index":854,"title":{},"body":{"index.html":{}}}],["ultim",{"_index":780,"title":{},"body":{"contributing.html":{}}}],["unam",{"_index":131,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/ManipulatorWrapper.html":{}}}],["undefin",{"_index":95,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["understand",{"_index":786,"title":{},"body":{"contributing.html":{}}}],["unfortun",{"_index":795,"title":{},"body":{"contributing.html":{}}}],["unit",{"_index":821,"title":{},"body":{"contributing.html":{}}}],["unmatch",{"_index":852,"title":{},"body":{"index.html":{}}}],["updat",{"_index":553,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["updateinitialvalu",{"_index":584,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["us",{"_index":149,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":568,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["user'",{"_index":472,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["usevalu",{"_index":615,"title":{},"body":{"modules/FormlyModule.html":{}}}],["usual",{"_index":566,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["util",{"_index":86,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["valid",{"_index":154,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"components/FormlyField.html":{},"components/FormlyGroup.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validation.messag",{"_index":195,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validation.show",{"_index":465,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["validationerror",{"_index":134,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validationmessag",{"_index":263,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validationmessageopt",{"_index":261,"title":{"interfaces/ValidationMessageOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["validatorfn",{"_index":488,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["validatoropt",{"_index":155,"title":{"interfaces/ValidatorOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["valu",{"_index":358,"title":{},"body":{"components/FormlyField.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":415,"title":{},"body":{"components/FormlyField.html":{},"components/FormlyGroup.html":{},"components/FormlyValidationMessage.html":{}}}],["variabl",{"_index":975,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veri",{"_index":537,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["version",{"_index":633,"title":{},"body":{"components/FormlyValidationMessage.html":{},"contributing.html":{},"index.html":{}}}],["via",{"_index":567,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["viewchild",{"_index":363,"title":{},"body":{"components/FormlyField.html":{}}}],["viewchild('fieldcompon",{"_index":372,"title":{},"body":{"components/FormlyField.html":{}}}],["viewcontainerref",{"_index":268,"title":{},"body":{"classes/FieldWrapper.html":{},"components/FormlyField.html":{}}}],["void",{"_index":80,"title":{},"body":{"classes/FieldArrayType.html":{},"interfaces/FormlyLifeCycleFn.html":{},"components/FormlyValidationMessage.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["wait",{"_index":815,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":740,"title":{},"body":{"contributing.html":{}}}],["warranti",{"_index":948,"title":{},"body":{"license.html":{}}}],["way",{"_index":532,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"contributing.html":{}}}],["wealth",{"_index":755,"title":{},"body":{"contributing.html":{}}}],["websit",{"_index":829,"title":{},"body":{"contributing.html":{}}}],["well",{"_index":768,"title":{},"body":{"contributing.html":{}}}],["whatev",{"_index":468,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["whenev",{"_index":565,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["whether",{"_index":515,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"license.html":{}}}],["wish",{"_index":445,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["without",{"_index":756,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["wonder",{"_index":915,"title":{},"body":{"index.html":{}}}],["work",{"_index":714,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["workaround",{"_index":737,"title":{},"body":{"contributing.html":{}}}],["wrap",{"_index":507,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["wrapper",{"_index":156,"title":{},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["wrapperopt",{"_index":157,"title":{"interfaces/WrapperOption.html":{}},"body":{"interfaces/FieldValidatorFn.html":{},"interfaces/ManipulatorOption.html":{},"interfaces/ManipulatorWrapper.html":{},"interfaces/TemplateManipulators.html":{},"interfaces/TypeOption.html":{},"interfaces/ValidationMessageOption.html":{},"interfaces/ValidatorOption.html":{},"interfaces/WrapperOption.html":{}}}],["wrapperref",{"_index":396,"title":{},"body":{"components/FormlyField.html":{}}}],["wrapperref.instance.fieldcompon",{"_index":399,"title":{},"body":{"components/FormlyField.html":{}}}],["write",{"_index":807,"title":{},"body":{"contributing.html":{}}}],["x1f449;pleas",{"_index":803,"title":{},"body":{"contributing.html":{}}}],["yarn",{"_index":805,"title":{},"body":{"contributing.html":{}}}],["ye",{"_index":79,"title":{},"body":{"classes/FieldArrayType.html":{}}}],["year",{"_index":452,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["yester",{"_index":451,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{}}}],["you'r",{"_index":447,"title":{},"body":{"interfaces/FormlyLifeCycleFn.html":{},"interfaces/FormlyValueChangeEvent.html":{},"index.html":{}}}],["zama",{"_index":912,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":596,"title":{},"body":{"modules/FormlyModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                form\n                            \n                            \n                                model\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        field\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:7\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        form\n                    \n                    \n                            \n                            Type:    FormGroup\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:6\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        model\n                    \n                    \n                            \n                            Type:    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:8\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                    \n                            \n                            Type:    FormlyFormOptions\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/field.ts:9\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n\n                \n                    \n                        getkey()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:11\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formControl\n                    \n                \n\n                \n                    \n                        getformControl()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        to\n                    \n                \n\n                \n                    \n                        getto()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:15\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        showError\n                    \n                \n\n                \n                    \n                        getshowError()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:19\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formState\n                    \n                \n\n                \n                    \n                        getformState()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/field.ts:21\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Input } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { FormlyTemplateOptions, FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport abstract class Field {\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() model: any;\n  @Input() options: FormlyFormOptions;\n\n  get key() { return this.field.key; }\n\n  get formControl(): AbstractControl { return this.field.formControl; }\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FieldArrayType.html":{"url":"classes/FieldArrayType.html","title":"class - FieldArrayType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  FieldArrayType\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field-array.type.ts\n        \n\n\n            \n                Extends\n            \n            \n                    FieldType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formControl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(builder: FormlyFormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/templates/field-array.type.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    builder\n                                                  \n                                                        \n                                                                    FormlyFormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formControl:     FormArray\n\n                    \n                \n                    \n                        \n                            Type :     FormArray\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/src/templates/field-array.type.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \nadd(i?: number, initialModel?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/templates/field-array.type.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        initialModel\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \nremove(i: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/templates/field-array.type.ts:27\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\n\nexport abstract class FieldArrayType extends FieldType {\n  formControl: FormArray;\n\n constructor(private builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n    this.field.fieldGroup.splice(i, 0, { ...clone(this.field.fieldArray) });\n\n    this.field.fieldGroup.forEach((field, index) => {\n      field.key = `${index}`;\n    });\n\n    this.builder.buildForm(this.formControl, [this.field.fieldGroup[i]], this.model, this.options);\n    ( this.options).resetTrackModelChanges();\n  }\n\n  remove(i: number) {\n    this.formControl.removeAt(i);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, index) => f.key = `${index}`);\n    this.model.splice(i, 1);\n    ( this.options).resetTrackModelChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FieldType.html":{"url":"classes/FieldType.html","title":"class - FieldType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  FieldType\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field.type.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Field\n            \n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        DoCheck\n                        AfterContentInit\n                        AfterContentChecked\n                        AfterViewInit\n                        AfterViewChecked\n                        OnDestroy\n            \n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from './field';\nimport { OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, AfterViewChecked, SimpleChanges } from '@angular/core';\n\nexport abstract class FieldType extends Field implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  ngOnInit() {}\n  ngOnChanges(changes: SimpleChanges) {}\n  ngDoCheck() {}\n  ngAfterContentInit() {}\n  ngAfterContentChecked() {}\n  ngAfterViewInit() {}\n  ngAfterViewChecked() {}\n  ngOnDestroy() {}\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldValidatorFn.html":{"url":"interfaces/FieldValidatorFn.html","title":"interface - FieldValidatorFn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FieldValidatorFn\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [c: AbstractControl, field: FormlyFieldConfig]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     ValidationErrors | null\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:203\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FieldWrapper.html":{"url":"classes/FieldWrapper.html","title":"class - FieldWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  FieldWrapper\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/templates/field.wrapper.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Field\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fieldComponent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fieldComponent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fieldComponent:     ViewContainerRef\n\n                    \n                \n                    \n                        \n                            Type :     ViewContainerRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/src/templates/field.wrapper.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ViewContainerRef } from '@angular/core';\nimport { Field } from './field';\n\nexport abstract class FieldWrapper extends Field {\n  fieldComponent: ViewContainerRef;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormlyAttributes.html":{"url":"directives/FormlyAttributes.html","title":"directive - FormlyAttributes","body":"\n                   \n\n\n\n\n\n\n  Directives\n  FormlyAttributes\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/components/formly.attributes.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [formlyAttributes]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formlyAttributes\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, elementRef: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/components/formly.attributes.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        formlyAttributes\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.attributes.ts:8\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            blur\n                            \n                            \n                        \n                    \n                \n                \n                    \nblur()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/components/formly.attributes.ts:16\n                            \n                        \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            focus\n                            \n                            \n                        \n                    \n                \n                \n                    \nfocus()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/core/src/components/formly.attributes.ts:12\n                            \n                        \n\n            \n        \n\n\n\n\n\n    \n\n\n    \n        import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, SimpleChange, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  private attributes = ['id', 'name', 'placeholder', 'tabindex', 'step', 'readonly'];\n  private statements = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\n  @HostListener('focus') onFocus() {\n    this.field.focus = true;\n  }\n\n  @HostListener('blur') onBlur() {\n    this.field.focus = false;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n      this.attributes\n        .filter(attr => this.canApplyRender(fieldChanges, attr))\n        .forEach(attr => this.renderer.setAttribute(\n          this.elementRef.nativeElement, attr, this.getPropValue(this.field, attr),\n        ));\n\n      if (this.field.templateOptions && this.field.templateOptions.attributes) {\n        const attributes = this.field.templateOptions.attributes;\n        Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n          this.elementRef.nativeElement, name, attributes[name] as string,\n        ));\n      }\n\n      this.statements\n        .filter(statement => this.canApplyRender(fieldChanges, statement))\n        .forEach(statement => this.renderer.listen(\n          this.elementRef.nativeElement, statement, this.getStatementValue(statement),\n        ));\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private getPropValue(field: FormlyFieldConfig, prop: string) {\n    field = field || {};\n    if (field.templateOptions && field.templateOptions[prop]) {\n      return field.templateOptions[prop];\n    }\n\n    return (field)[prop] || '';\n  }\n\n  private getStatementValue(statement: string) {\n    const fn = this.field.templateOptions[statement];\n\n    return (event: any) => fn(this.field, event);\n  }\n\n  private canApplyRender(fieldChange: SimpleChange, prop: string): Boolean {\n    const currentValue = this.getPropValue(this.field, prop),\n      previousValue = this.getPropValue(fieldChange.previousValue, prop);\n\n    if (previousValue !== currentValue) {\n      if (this.statements.indexOf(prop) !== -1) {\n        return typeof currentValue === 'function';\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyField.html":{"url":"components/FormlyField.html","title":"component - FormlyField","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyField\n\n\n\n    \n        Info\n    \n\n    \n        Source\n    \n\n    \n        DOM Tree\n    \n\n\n\n    \n    File\n\n\n    src/core/src/components/formly.field.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                DoCheck\n                AfterContentInit\n                AfterContentChecked\n                AfterViewInit\n                AfterViewChecked\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                formly-field\n            \n\n\n\n            \n                template\n                \n\n\n            \n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fieldComponent\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                form\n                            \n                            \n                                model\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                modelChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formlyConfig: FormlyConfig, componentFactoryResolver: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/components/formly.field.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    formlyConfig\n                                                  \n                                                        \n                                                                    FormlyConfig\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    componentFactoryResolver\n                                                  \n                                                        \n                                                                    ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        field\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        form\n                    \n                    \n                            \n                            Type:    FormGroup\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        model\n                    \n                    \n                            \n                            Type:    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                    \n                            \n                            Type:    FormlyFormOptions\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:24\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        modelChange\n                    \n                    \n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:25\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fieldComponent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fieldComponent:     ViewContainerRef\n\n                    \n                \n                    \n                        \n                            Type :     ViewContainerRef\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/core/src/components/formly.field.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n  Component, OnInit, OnChanges, EventEmitter, Input, Output, OnDestroy,\n  ViewContainerRef, ViewChild, ComponentRef, ComponentFactoryResolver, SimpleChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig, TypeOption } from '../services/formly.config';\nimport { Field } from '../templates/field';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyLifeCycleFn, FormlyLifeCycleOptions } from './formly.field.config';\n\n@Component({\n  selector: 'formly-field',\n  template: `\n    \n    \n  `,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() model: any;\n  @Input() form: FormGroup;\n  @Input() field: FormlyFieldConfig;\n  @Input() options: FormlyFormOptions = {};\n  @Output() modelChange: EventEmitter = new EventEmitter();\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  private componentRefs: ComponentRef[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n  ) {}\n\n  ngAfterContentInit() {\n    this.lifeCycleHooks(this.lifecycle.afterContentInit);\n  }\n\n  ngAfterContentChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterContentChecked);\n  }\n\n  ngAfterViewInit() {\n    this.lifeCycleHooks(this.lifecycle.afterViewInit);\n  }\n\n  ngAfterViewChecked() {\n    this.lifeCycleHooks(this.lifecycle.afterViewChecked);\n  }\n\n  ngDoCheck() {\n    this.lifeCycleHooks(this.lifecycle.doCheck);\n  }\n\n  ngOnInit() {\n    this.lifeCycleHooks(this.lifecycle.onInit);\n    if (!this.field.template) {\n      this.createFieldComponent();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.lifeCycleHooks(this.lifecycle.onChanges);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.lifeCycleHooks(this.lifecycle.onDestroy);\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private createFieldComponent(): ComponentRef {\n    const type = this.formlyConfig.getType(this.field.type);\n\n    let fieldComponent = this.fieldComponent;\n    (this.field.wrappers || []).forEach(wrapperName => {\n      const wrapperRef = this.createComponent(fieldComponent, this.formlyConfig.getWrapper(wrapperName).component);\n      fieldComponent = wrapperRef.instance.fieldComponent;\n    });\n\n    return this.createComponent(fieldComponent, type.component);\n  }\n\n  private createComponent(fieldComponent: ViewContainerRef, component: any): ComponentRef {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    let ref = >fieldComponent.createComponent(componentFactory);\n\n    Object.assign(ref.instance, {\n        model: this.model,\n        form: this.form,\n        field: this.field,\n        options: this.options,\n    });\n\n    this.componentRefs.push(ref);\n\n    return ref;\n  }\n\n  private get lifecycle(): FormlyLifeCycleOptions {\n    return this.field.lifecycle || {};\n  }\n\n  private lifeCycleHooks(callback: FormlyLifeCycleFn) {\n    if (callback) {\n      callback(this.form, this.field, this.model, this.options);\n    }\n  }\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'FormlyField', 'selector': 'formly-field'},{'name': 'FormlyForm', 'selector': 'formly-form'},{'name': 'FormlyGroup', 'selector': 'formly-group'},{'name': 'FormlyValidationMessage', 'selector': 'formly-validation-message'}];\n    var DIRECTIVES = [{'name': 'FormlyAttributes', 'selector': '[formlyAttributes]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyField'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyGroup.html":{"url":"components/FormlyGroup.html","title":"component - FormlyGroup","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyGroup\n\n\n\n    \n        Info\n    \n\n    \n        Source\n    \n\n    \n        DOM Tree\n    \n\n\n\n    \n    File\n\n\n    src/core/src/components/formly.group.ts\n\n\n\n    \n        Extends\n    \n    \n            FieldType\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                formly-group\n            \n\n\n\n            \n                template\n                \n  \n\n\n            \n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    \n      \n    \n  `,\n})\nexport class FormlyGroup extends FieldType {}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'FormlyField', 'selector': 'formly-field'},{'name': 'FormlyForm', 'selector': 'formly-form'},{'name': 'FormlyGroup', 'selector': 'formly-group'},{'name': 'FormlyValidationMessage', 'selector': 'formly-validation-message'}];\n    var DIRECTIVES = [{'name': 'FormlyAttributes', 'selector': '[formlyAttributes]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyGroup'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormlyLifeCycleFn.html":{"url":"interfaces/FormlyLifeCycleFn.html","title":"interface - FormlyLifeCycleFn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FormlyLifeCycleFn\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/components/formly.field.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [form: FormGroup, field: FormlyFieldConfig, model: any, options: FormlyFormOptions]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:192\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup, AbstractControl, FormGroupDirective, NgForm, FormArray } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\nimport { Field } from '../templates/field';\nimport { TemplateManipulators } from '../services/formly.config';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface FormlyFieldConfig {\n  /**\n   * The model that stores all the data, where the model[key] is the value of the field\n   */\n  readonly model?: any;\n\n  /**\n   * The key that relates to the model. This will link the field value to the model\n   */\n  key?: string;\n\n  /**\n   * This allows you to specify the `id` of your field. Note, the `id` is generated if not set.\n   */\n  id?: string;\n\n  /**\n   * If you wish, you can specify a specific `name` for your field. This is useful if you're posting the form to a server using techniques of yester-year.\n   */\n  name?: string;\n\n  /**\n   * This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.\n   */\n  templateOptions?: FormlyTemplateOptions;\n\n  optionsTypes?: string[];\n\n  /**\n   * An object with a few useful properties\n   * - `validation.messages`: A map of message names that will be displayed when the field has errors.\n   * - `validation.show`: A boolean you as the developer can set to force displaying errors whatever the state of field. This is useful when you're trying to call the user's attention to some fields for some reason.\n   */\n  validation?: {\n    messages?: {\n      [messageProperties: string]: string | ((error: any, field: FormlyFieldConfig) => string);\n    };\n    show?: boolean;\n    [additionalProperties: string]: any;\n  };\n\n  /**\n   * Used to set validation rules for a particular field.\n   * Should be an object of key - value pairs. The value can either be an expression to evaluate or a function to run.\n   * Each should return a boolean value, returning true when the field is valid. See Validation for more information.\n   *\n   * {\n   *   validation?: (string | ValidatorFn)[] | ValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => boolean) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => boolean, message: string | ((error, field: FormlyFieldConfig) => string) });\n   * }\n   */\n  validators?: any;\n\n  /**\n   * Use this one for anything that needs to validate asynchronously.\n   * Pretty much exactly the same as the validators api, except it must be a function that returns a promise.\n   *\n   * {\n   *   validation?: (string | AsyncValidatorFn)[] | AsyncValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => Promise) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => Promise, message: string });\n   * }\n   */\n  asyncValidators?: any;\n\n  /**\n   * Can be set instead of `type` to render custom html content.\n   */\n  template?: string;\n\n  /**\n   *  It is expected to be the name of the wrappers.\n   *  The formly field template will be wrapped by the first wrapper, then the second, then the third, etc.\n   *  You can also specify these as part of a type (which is the recommended approach).\n   */\n  wrappers?: string[];\n\n  /**\n   * Whether to hide the field. Defaults to false. If you wish this to be conditional use `hideExpression`\n   */\n  hide?: boolean;\n\n  /**\n   * Conditionally hiding Field based on values from other Fields\n   */\n  hideExpression?: boolean | string | ((model: any, formState: any) => boolean);\n\n  /**\n   * An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.\n   */\n  expressionProperties?: { [property: string]: string | ((model: any, formState: any) => boolean) } | any;\n\n  /**\n   * This is the [FormControl](https://angular.io/api/forms/FormControl) for the field.\n   * It provides you more control like running validators, calculating status, and resetting state.\n   */\n  formControl?: AbstractControl;\n\n  /**\n   * You can specify your own class that will be applied to the `formly-field` component.\n   */\n  className?: string;\n\n  /**\n   * Specify your own class that will be applied to the `formly-group` component.\n   */\n  fieldGroupClassName?: string;\n\n  /**\n   * A field group is a way to group fields together, making advanced layout very simple.\n   * It can also be used to group fields that are associated with the same model (useful if it's different than the model for the rest of the fields).\n   */\n  fieldGroup?: FormlyFieldConfig[];\n\n  fieldArray?: FormlyFieldConfig;\n\n  /**\n   * This should be a formly-field type added either by you or a plugin. More information over at Creating Formly Fields.\n   */\n  type?: string;\n\n  /**\n   * Can be set to replace the component that is defined in `type`.\n   */\n  component?: any;\n\n  /**\n   * Whether to focus or blur the element field. Defaults to false. If you wish this to be conditional use `expressionProperties`\n   */\n  focus?: boolean;\n\n  /**\n   * An object with a few useful properties to control the model changes\n   * - `debounce`: integer value which contains the debounce model update value in milliseconds. A value of 0 triggers an immediate update.\n   */\n  modelOptions?: {\n    debounce?: {\n      default: number;\n    };\n  };\n\n  lifecycle?: FormlyLifeCycleOptions;\n\n  /**\n   * Use `defaultValue` to initialize it the model. If this is provided and the value of the model at compile-time is undefined, then the value of the model will be assigned to `defaultValue`.\n   */\n  defaultValue?: any;\n\n  /**\n   * Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.\n   */\n  parsers?: ((value: any) => {})[];\n}\n\nexport type FormlyAttributeEvent = (field: FormlyFieldConfig, event?: any) => void;\n\nexport interface FormlyTemplateOptions {\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  options?: any[] | Observable;\n  rows?: number;\n  cols?: number;\n  description?: string;\n  hidden?: boolean;\n  max?: number;\n  min?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string|RegExp;\n  required?: boolean;\n  tabindex?: number;\n  attributes?: { [key: string]: string|number };\n  step?: number;\n  focus?: FormlyAttributeEvent;\n  blur?: FormlyAttributeEvent;\n  keyup?: FormlyAttributeEvent;\n  keydown?: FormlyAttributeEvent;\n  click?: FormlyAttributeEvent;\n  change?: FormlyAttributeEvent;\n  keypress?: FormlyAttributeEvent;\n  templateManipulators?: TemplateManipulators;\n  [additionalProperties: string]: any;\n}\n\nexport interface FormlyLifeCycleFn {\n  (form?: FormGroup, field?: FormlyFieldConfig, model?: any, options?: FormlyFormOptions): void;\n}\n\nexport interface FormlyLifeCycleOptions {\n  onInit?: FormlyLifeCycleFn;\n  onChanges?: FormlyLifeCycleFn;\n  doCheck?: FormlyLifeCycleFn;\n  afterContentInit?: FormlyLifeCycleFn;\n  afterContentChecked?: FormlyLifeCycleFn;\n  afterViewInit?: FormlyLifeCycleFn;\n  afterViewChecked?: FormlyLifeCycleFn;\n  onDestroy?: FormlyLifeCycleFn;\n}\n\nexport interface FormlyFormOptions {\n  updateInitialValue?: () => void;\n  resetModel?: (model?: any) => void;\n  formState?: any;\n  fieldChanges?: Subject;\n  fieldTransform?: (fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[];\n  showError?: (field: Field) => boolean;\n  parentForm?: FormGroupDirective | NgForm | null;\n}\n\nexport interface FormlyValueChangeEvent {\n  field: FormlyFieldConfig;\n  type: string;\n  value: any;\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FormlyModule.html":{"url":"modules/FormlyModule.html","title":"module - FormlyModule","body":"\n                   \n\n\n\n\n  Modules\n  FormlyModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FormlyModule\n\n\n\ncluster_FormlyModule_declarations\n\n\n\ncluster_FormlyModule_exports\n\n\n\n\nFormlyForm\n\nFormlyForm\n\n\n\nFormlyModule\n\nFormlyModule\n\nFormlyModule -->\n\nFormlyForm->FormlyModule\n\n\n\n\n\nFormlyField\n\nFormlyField\n\nFormlyModule -->\n\nFormlyField->FormlyModule\n\n\n\n\n\nFormlyAttributes\n\nFormlyAttributes\n\nFormlyModule -->\n\nFormlyAttributes->FormlyModule\n\n\n\n\n\nFormlyGroup\n\nFormlyGroup\n\nFormlyModule -->\n\nFormlyGroup->FormlyModule\n\n\n\n\n\nFormlyValidationMessage\n\nFormlyValidationMessage\n\nFormlyModule -->\n\nFormlyValidationMessage->FormlyModule\n\n\n\n\n\nFormlyForm \n\nFormlyForm \n\nFormlyForm  -->\n\nFormlyModule->FormlyForm \n\n\n\n\n\nFormlyField \n\nFormlyField \n\nFormlyField  -->\n\nFormlyModule->FormlyField \n\n\n\n\n\nFormlyAttributes \n\nFormlyAttributes \n\nFormlyAttributes  -->\n\nFormlyModule->FormlyAttributes \n\n\n\n\n\nFormlyGroup \n\nFormlyGroup \n\nFormlyGroup  -->\n\nFormlyModule->FormlyGroup \n\n\n\n\n\nFormlyValidationMessage \n\nFormlyValidationMessage \n\nFormlyValidationMessage  -->\n\nFormlyModule->FormlyValidationMessage \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/src/core.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                FormlyForm\n                            \n                            \n                                FormlyField\n                            \n                            \n                                FormlyAttributes\n                            \n                            \n                                FormlyGroup\n                            \n                            \n                                FormlyValidationMessage\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                FormlyGroup\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    FormlyForm\n                            \n                            \n                                    FormlyField\n                            \n                            \n                                    FormlyAttributes\n                            \n                            \n                                    FormlyGroup\n                            \n                            \n                                    FormlyValidationMessage\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG_TOKEN } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyFormExpression } from './services/formly.form.expression';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\n\n@NgModule({\n  declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  entryComponents: [FormlyGroup],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        FormlyFormBuilder,\n        FormlyFormExpression,\n        FormlyConfig,\n        { provide: FORMLY_CONFIG_TOKEN, useValue: { types: [{ name: 'formly-group', component: FormlyGroup }] }, multi: true },\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG_TOKEN, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormlyValidationMessage.html":{"url":"components/FormlyValidationMessage.html","title":"component - FormlyValidationMessage","body":"\n                   \n\n\n\n\n\n  Components\n  FormlyValidationMessage\n\n\n\n    \n        Info\n    \n\n    \n        Source\n    \n\n    \n        DOM Tree\n    \n\n\n\n    \n    File\n\n\n    src/core/src/templates/formly.validation-message.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                formly-validation-message\n            \n\n\n\n            \n                template\n                {{ errorMessage }}\n            \n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                fieldForm\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formlyConfig: FormlyConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/src/templates/formly.validation-message.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    formlyConfig\n                                                  \n                                                        \n                                                                    FormlyConfig\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        field\n                    \n                    \n                            \n                            Type:    FormlyFieldConfig\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/formly.validation-message.ts:11\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        fieldForm\n                    \n                    \n                    \n                \n                        \n                            \n                                    Defined in src/core/src/templates/formly.validation-message.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fieldForm\n                    \n                \n\n\n                \n                    \n                        setfieldForm(control: )\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/formly.validation-message.ts:12\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                        control\n                                                    \n                                                    \n                                                        \n                                                                no\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        errorMessage\n                    \n                \n\n                \n                    \n                        geterrorMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/core/src/templates/formly.validation-message.ts:18\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n  @Input() set fieldForm(control: FormControl) {\n    console.warn(`formly-validation-message: Passing 'fieldForm' input is deprecated and it will be removed in the 4.0 version.`);\n  }\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ errorMessage }}'\n    var COMPONENTS = [{'name': 'FormlyField', 'selector': 'formly-field'},{'name': 'FormlyForm', 'selector': 'formly-form'},{'name': 'FormlyGroup', 'selector': 'formly-group'},{'name': 'FormlyValidationMessage', 'selector': 'formly-validation-message'}];\n    var DIRECTIVES = [{'name': 'FormlyAttributes', 'selector': '[formlyAttributes]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormlyValidationMessage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormlyValueChangeEvent.html":{"url":"interfaces/FormlyValueChangeEvent.html","title":"interface - FormlyValueChangeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FormlyValueChangeEvent\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/components/formly.field.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:     FormlyFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormlyFieldConfig\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:218\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:219\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/components/formly.field.config.ts:220\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup, AbstractControl, FormGroupDirective, NgForm, FormArray } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\nimport { Field } from '../templates/field';\nimport { TemplateManipulators } from '../services/formly.config';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface FormlyFieldConfig {\n  /**\n   * The model that stores all the data, where the model[key] is the value of the field\n   */\n  readonly model?: any;\n\n  /**\n   * The key that relates to the model. This will link the field value to the model\n   */\n  key?: string;\n\n  /**\n   * This allows you to specify the `id` of your field. Note, the `id` is generated if not set.\n   */\n  id?: string;\n\n  /**\n   * If you wish, you can specify a specific `name` for your field. This is useful if you're posting the form to a server using techniques of yester-year.\n   */\n  name?: string;\n\n  /**\n   * This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.\n   */\n  templateOptions?: FormlyTemplateOptions;\n\n  optionsTypes?: string[];\n\n  /**\n   * An object with a few useful properties\n   * - `validation.messages`: A map of message names that will be displayed when the field has errors.\n   * - `validation.show`: A boolean you as the developer can set to force displaying errors whatever the state of field. This is useful when you're trying to call the user's attention to some fields for some reason.\n   */\n  validation?: {\n    messages?: {\n      [messageProperties: string]: string | ((error: any, field: FormlyFieldConfig) => string);\n    };\n    show?: boolean;\n    [additionalProperties: string]: any;\n  };\n\n  /**\n   * Used to set validation rules for a particular field.\n   * Should be an object of key - value pairs. The value can either be an expression to evaluate or a function to run.\n   * Each should return a boolean value, returning true when the field is valid. See Validation for more information.\n   *\n   * {\n   *   validation?: (string | ValidatorFn)[] | ValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => boolean) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => boolean, message: string | ((error, field: FormlyFieldConfig) => string) });\n   * }\n   */\n  validators?: any;\n\n  /**\n   * Use this one for anything that needs to validate asynchronously.\n   * Pretty much exactly the same as the validators api, except it must be a function that returns a promise.\n   *\n   * {\n   *   validation?: (string | AsyncValidatorFn)[] | AsyncValidatorFn;\n   *   [key: string]: ((control: AbstractControl, field: FormlyFieldConfig) => Promise) | ({ expression: (control: AbstractControl, field: FormlyFieldConfig) => Promise, message: string });\n   * }\n   */\n  asyncValidators?: any;\n\n  /**\n   * Can be set instead of `type` to render custom html content.\n   */\n  template?: string;\n\n  /**\n   *  It is expected to be the name of the wrappers.\n   *  The formly field template will be wrapped by the first wrapper, then the second, then the third, etc.\n   *  You can also specify these as part of a type (which is the recommended approach).\n   */\n  wrappers?: string[];\n\n  /**\n   * Whether to hide the field. Defaults to false. If you wish this to be conditional use `hideExpression`\n   */\n  hide?: boolean;\n\n  /**\n   * Conditionally hiding Field based on values from other Fields\n   */\n  hideExpression?: boolean | string | ((model: any, formState: any) => boolean);\n\n  /**\n   * An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.\n   */\n  expressionProperties?: { [property: string]: string | ((model: any, formState: any) => boolean) } | any;\n\n  /**\n   * This is the [FormControl](https://angular.io/api/forms/FormControl) for the field.\n   * It provides you more control like running validators, calculating status, and resetting state.\n   */\n  formControl?: AbstractControl;\n\n  /**\n   * You can specify your own class that will be applied to the `formly-field` component.\n   */\n  className?: string;\n\n  /**\n   * Specify your own class that will be applied to the `formly-group` component.\n   */\n  fieldGroupClassName?: string;\n\n  /**\n   * A field group is a way to group fields together, making advanced layout very simple.\n   * It can also be used to group fields that are associated with the same model (useful if it's different than the model for the rest of the fields).\n   */\n  fieldGroup?: FormlyFieldConfig[];\n\n  fieldArray?: FormlyFieldConfig;\n\n  /**\n   * This should be a formly-field type added either by you or a plugin. More information over at Creating Formly Fields.\n   */\n  type?: string;\n\n  /**\n   * Can be set to replace the component that is defined in `type`.\n   */\n  component?: any;\n\n  /**\n   * Whether to focus or blur the element field. Defaults to false. If you wish this to be conditional use `expressionProperties`\n   */\n  focus?: boolean;\n\n  /**\n   * An object with a few useful properties to control the model changes\n   * - `debounce`: integer value which contains the debounce model update value in milliseconds. A value of 0 triggers an immediate update.\n   */\n  modelOptions?: {\n    debounce?: {\n      default: number;\n    };\n  };\n\n  lifecycle?: FormlyLifeCycleOptions;\n\n  /**\n   * Use `defaultValue` to initialize it the model. If this is provided and the value of the model at compile-time is undefined, then the value of the model will be assigned to `defaultValue`.\n   */\n  defaultValue?: any;\n\n  /**\n   * Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.\n   */\n  parsers?: ((value: any) => {})[];\n}\n\nexport type FormlyAttributeEvent = (field: FormlyFieldConfig, event?: any) => void;\n\nexport interface FormlyTemplateOptions {\n  type?: string;\n  label?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  options?: any[] | Observable;\n  rows?: number;\n  cols?: number;\n  description?: string;\n  hidden?: boolean;\n  max?: number;\n  min?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string|RegExp;\n  required?: boolean;\n  tabindex?: number;\n  attributes?: { [key: string]: string|number };\n  step?: number;\n  focus?: FormlyAttributeEvent;\n  blur?: FormlyAttributeEvent;\n  keyup?: FormlyAttributeEvent;\n  keydown?: FormlyAttributeEvent;\n  click?: FormlyAttributeEvent;\n  change?: FormlyAttributeEvent;\n  keypress?: FormlyAttributeEvent;\n  templateManipulators?: TemplateManipulators;\n  [additionalProperties: string]: any;\n}\n\nexport interface FormlyLifeCycleFn {\n  (form?: FormGroup, field?: FormlyFieldConfig, model?: any, options?: FormlyFormOptions): void;\n}\n\nexport interface FormlyLifeCycleOptions {\n  onInit?: FormlyLifeCycleFn;\n  onChanges?: FormlyLifeCycleFn;\n  doCheck?: FormlyLifeCycleFn;\n  afterContentInit?: FormlyLifeCycleFn;\n  afterContentChecked?: FormlyLifeCycleFn;\n  afterViewInit?: FormlyLifeCycleFn;\n  afterViewChecked?: FormlyLifeCycleFn;\n  onDestroy?: FormlyLifeCycleFn;\n}\n\nexport interface FormlyFormOptions {\n  updateInitialValue?: () => void;\n  resetModel?: (model?: any) => void;\n  formState?: any;\n  fieldChanges?: Subject;\n  fieldTransform?: (fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[];\n  showError?: (field: Field) => boolean;\n  parentForm?: FormGroupDirective | NgForm | null;\n}\n\nexport interface FormlyValueChangeEvent {\n  field: FormlyFieldConfig;\n  type: string;\n  value: any;\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ManipulatorOption.html":{"url":"interfaces/ManipulatorOption.html","title":"interface - ManipulatorOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ManipulatorOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        class\n                                \n                                \n                                            Optional\n                                        method\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                    \n                                \n                                \n                                    \n                                        class:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:218\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                    \n                                \n                                \n                                    \n                                        method:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:219\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ManipulatorWrapper.html":{"url":"interfaces/ManipulatorWrapper.html","title":"interface - ManipulatorWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ManipulatorWrapper\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [f: FormlyFieldConfig]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     string\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:222\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TemplateManipulators.html":{"url":"interfaces/TemplateManipulators.html","title":"interface - TemplateManipulators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TemplateManipulators\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        postWrapper\n                                \n                                \n                                            Optional\n                                        preWrapper\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        postWrapper\n                                    \n                                \n                                \n                                    \n                                        postWrapper:     ManipulatorWrapper[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ManipulatorWrapper[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:228\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preWrapper\n                                    \n                                \n                                \n                                    \n                                        preWrapper:     ManipulatorWrapper[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ManipulatorWrapper[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:227\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TypeOption.html":{"url":"interfaces/TypeOption.html","title":"interface - TypeOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TypeOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        component\n                                \n                                \n                                            Optional\n                                        defaultOptions\n                                \n                                \n                                            Optional\n                                        extends\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        wrappers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:191\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultOptions\n                                    \n                                \n                                \n                                    \n                                        defaultOptions:     FormlyFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormlyFieldConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:194\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extends\n                                    \n                                \n                                \n                                    \n                                        extends:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:193\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:190\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wrappers\n                                    \n                                \n                                \n                                    \n                                        wrappers:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:192\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationMessageOption.html":{"url":"interfaces/ValidationMessageOption.html","title":"interface - ValidationMessageOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationMessageOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | \n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:214\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:213\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidatorOption.html":{"url":"interfaces/ValidatorOption.html","title":"interface - ValidatorOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidatorOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        validation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:208\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validation\n                                    \n                                \n                                \n                                    \n                                        validation:     FieldValidatorFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FieldValidatorFn\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:209\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WrapperOption.html":{"url":"interfaces/WrapperOption.html","title":"interface - WrapperOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WrapperOption\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            src/core/src/services/formly.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        component\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        types\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                    \n                                \n                                \n                                    \n                                        component:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:199\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:198\n                                        \n                                    \n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        types\n                                    \n                                \n                                \n                                    \n                                        types:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in src/core/src/services/formly.config.ts:200\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { Field } from './../templates/field';\nimport { reverseDeepMerge } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG_TOKEN = new InjectionToken('FORMLY_CONFIG_TOKEN');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable()\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: Field) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: Field) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n\n  constructor(@Inject(FORMLY_CONFIG_TOKEN) configs: ConfigOption[] = []) {\n    configs.forEach(config => this.addConfig(config));\n  }\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = {};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    let name = field.type;\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n    if (this.types[name].defaultOptions) {\n      reverseDeepMerge(field, this.types[name].defaultOptions);\n    }\n\n    let extendDefaults = this.types[name].extends && this.getType(this.types[name].extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        let defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    if (!field.component) {\n      field.component = this.types[name].component;\n    }\n\n    if (!field.wrappers) {\n      field.wrappers = this.types[name].wrappers;\n    }\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = {};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    this.types[type].wrappers.push(name);\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: Field) => boolean;\n  };\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\nWe would love for you to contribute to ng-formly and help make it even better than it is\ntoday! As a contributor, here are the guidelines we would like you to follow:\n\nCode of Conduct\nQuestion or Problem?\nIssues and Bugs\nFeature Requests\nSubmission Guidelines\nCoding Rules\nCommit Message Guidelines\nContributing to Community\n\n Code of Conduct\nHelp us keep Angular open and inclusive. Please read and follow our Code of Conduct.\n Got a Question or Problem?\nFeel free to chat on gitter and raise questions on Stack overflow using angular 2 formly tag. We also support questions or problems from the issues\n Found a Bug?\nIf you find a bug in the source code, you can help us by\nsubmitting an issue to our GitHub Repository. Even better, you can\nsubmit a Pull Request with a fix.\n Missing a Feature?\nYou can request a new feature by submitting an issue to our GitHub\nRepository. If you would like to implement a new feature, please submit an issue with\na proposal for your work first, to be sure that we can use it.\nPlease consider what kind of change it is:\n\nFor a Major Feature, first open an issue and outline your proposal so that it can be\ndiscussed. This will also allow us to better coordinate our efforts, prevent duplication of work,\nand help you to craft the change so that it is successfully accepted into the project.\nSmall Features can be crafted and directly submitted as a Pull Request.\n\n Submission Guidelines\n Submitting an Issue\nBefore you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available.\nWe want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using http://plnkr.co. Having a live, reproducible scenario gives us wealth of important information without going back & forth to you with additional questions like:\n\nversion of Angular used\n3rd-party libraries and their versions\nand most importantly - a use-case that fails\n\nA minimal reproduce scenario using http://plnkr.co/ allows us to quickly confirm a bug (or point out coding problem) as well as confirm that we are fixing the right problem. If plunker is not a suitable way to demostrate the problem (for example for issues related to our npm packaging), please create a standalone git repository demostrating the problem.\nWe will be insisting on a minimal reproduce scenario in order to save maintainers time and ultimately be able to fix more bugs. Interestingly, from our experience users often find coding problems themselves while preparing a minimal plunk. We understand that sometimes it might be hard to extract essentials bits of code from a larger code-base but we really need to isolate the problem before we can fix it.\nUnfortunately we are not able to investigate / fix bugs without a minimal reproduction, so if we don't hear back from you we are going to close an issue that don't have enough info to be reproduced.\nYou can file new issues by filling out our new issue form.\n Submitting a Pull Request (PR)\nBefore you submit your Pull Request (PR) consider the following guidelines:\n‼️‼️‼️  &#x1F449;Please follow commit message conventions\nDevelopment\n\nrun yarn\nrun npm run demo or yarn demo\nwrite tests & code in TS goodness :-)\nrun git add .\nrun npm run commit and follow the prompt (this ensures that your commit message follows our conventions).\npush your changes\ncreate a PR with a link to the original issue\nwait patiently :-)\n\n Coding Rules\nTo ensure consistency throughout the source code, keep these rules in mind as you are working:\n\nAll features or bug fixes must be tested by one or more specs (unit-tests).\nAll public API methods must be documented. (Details TBC).\nFollow the existing styles (we have an .editorconfig file)\nDocument your changes in the README (try to follow the convention you see in the rest of the file)\nCreate an example for the website that demonstrates your changes so people can see how your changes work\n\n Commit Message Guidelines\nWe have very precise rules over how our git commit messages can be formatted.  This leads to more\nreadable messages that are easy to follow when looking through the project history. We follow Angular project Commit Guidelines\n Contributing to community\n\nCreate plugins!\nWrite blog posts!\nRecord screencasts\nWrite examples. The website is driven by examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^1.9.0\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n@ngx-formly\n\n\n\nStatus:\n\n\n\n\n\n\nLinks:\n\n\nNgx Formly is a dynamic JSON powered form library for Angular (mainly based an on Angular Reactive Forms) that bring unmatched maintainability to your application's forms.\nSupported UI libs\n\n\n\nUI\n\n\n\n\n\nBootstrap\n✅\n\n\nIonic\n✅\n\n\nKendo\n✅\n\n\nMaterial2\n✅\n\n\nPrimeNG\n✅\n\n\nNativeScript\n❌\n\n\n\nWhich Version to use?\n\n\n\nAngular version\nFormly version\n\n\n\n\nAngular >= 5\n@ngx-formly/core@3.x\n\n\nAngular >= 4\n@ngx-formly/core@2.x\n\n\nAngular >= 2\n`ng-formly@1.x`\n\n\n\nQuick links\n\nDocumentation, demos, and guides\nStackBlitz Template\nUI Bootstrap\nUI Material\nUI Ionic\nUI PrimeNG\nUI Kendo\n\n\n\nQuick Start\nFollow these steps to get started with Ngx Formly. Also check out our demos for further examples.\n1. Install @angular/forms and @ngx-formly/core packages:\n  npm install @angular/forms @ngx-formly/core --save2. Choose and install your UI (pre-defined types/templates) package:\n\nMaterial2:\n\nEnsure you have already installed material2 https://material.angular.io/guide/getting-started\nInstall @ngx-formly/materialnpm install @ngx-formly/material --save\n\n\nBootstrap:\n  npm install @ngx-formly/bootstrap --save\nIonic:\n  npm install @ngx-formly/ionic --save\nPrimeNG:\n  npm install @ngx-formly/primeng --save\nKendo:\n  npm install @ngx-formly/kendo --save\n\n3. Import the FormlyModule and UI (pre-defined types/templates):\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {FormlyModule} from '@ngx-formly/core';\nimport {FormlyBootstrapModule} from '@ngx-formly/bootstrap';\n\n// for material2 import `FormlyMaterialModule`:\n// import {FormlyMaterialModule} from '@ngx-formly/material';\n\n// for ionic import `FormlyIonicModule`:\n// import {FormlyIonicModule} from '@ngx-formly/ionic';\n\n// for primeng import `FormlyPrimeNGModule`:\n// import {FormlyPrimeNGModule} from '@ngx-formly/primeng';\n\n// for kendo import `FormlyKendoModule`:\n// import {FormlyKendoModule} from '@ngx-formly/kendo';\n\n@NgModule({\n  imports: [\n    ...,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(),\n    FormlyBootstrapModule,\n\n    // for material2:\n    // FormlyMaterialModule\n\n    // for ionic:\n    // FormlyIonicModule\n\n    // for primeng:\n    // FormlyPrimeNGModule\n\n    // for kendo:\n    // FormlyKendoModule\n  ],\n})\nexport class AppModule {}3. Define the form config in your component:\nimport {Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormlyFieldConfig} from '@ngx-formly/core';\n\n@Component({\n  selector: 'app',\n  template: `\n    \n      \n        Submit\n      \n    \n  `,\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model = { email: 'email@gmail.com' };\n  fields: FormlyFieldConfig[] = [{\n    key: 'email',\n    type: 'input',\n    templateOptions: {\n      type: 'email',\n      label: 'Email address',\n      placeholder: 'Enter email',\n      required: true,\n    }\n  }];\n\n  submit(model) {\n    console.log(model);\n  }\n}From there, it's just JavaScript. Allowing for DRY, maintainable, reusable forms.\nRoadmap\nSee the issues labeled enhancement\nThanks\nA special thanks to Kent C. Dodds for giving me opportunity to work on this.\nThis library is maintained (with love) by me, Mohammed Zama Khan.\nThanks to all contributors!\nIf you're trying to find angular-formly, go here\nContributors\nThanks goes to these wonderful people (emoji key):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 FormlyJS\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FormlyModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FormlyModule\n\n\n\ncluster_FormlyModule_declarations\n\n\n\ncluster_FormlyModule_exports\n\n\n\n\nFormlyForm\n\nFormlyForm\n\n\n\nFormlyModule\n\nFormlyModule\n\nFormlyModule -->\n\nFormlyForm->FormlyModule\n\n\n\n\n\nFormlyField\n\nFormlyField\n\nFormlyModule -->\n\nFormlyField->FormlyModule\n\n\n\n\n\nFormlyAttributes\n\nFormlyAttributes\n\nFormlyModule -->\n\nFormlyAttributes->FormlyModule\n\n\n\n\n\nFormlyGroup\n\nFormlyGroup\n\nFormlyModule -->\n\nFormlyGroup->FormlyModule\n\n\n\n\n\nFormlyValidationMessage\n\nFormlyValidationMessage\n\nFormlyModule -->\n\nFormlyValidationMessage->FormlyModule\n\n\n\n\n\nFormlyForm \n\nFormlyForm \n\nFormlyForm  -->\n\nFormlyModule->FormlyForm \n\n\n\n\n\nFormlyField \n\nFormlyField \n\nFormlyField  -->\n\nFormlyModule->FormlyField \n\n\n\n\n\nFormlyAttributes \n\nFormlyAttributes \n\nFormlyAttributes  -->\n\nFormlyModule->FormlyAttributes \n\n\n\n\n\nFormlyGroup \n\nFormlyGroup \n\nFormlyGroup  -->\n\nFormlyModule->FormlyGroup \n\n\n\n\n\nFormlyValidationMessage \n\nFormlyValidationMessage \n\nFormlyValidationMessage  -->\n\nFormlyModule->FormlyValidationMessage \n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            1 module\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        4 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 directive\n                    \n                \n            \n            \n                \n                    \n                        \n                        2 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        15 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FormlyAttributeEvent   (src/.../formly.field.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/src/components/formly.field.config.ts\n    \n        \n            \n                \n                    \n                        \n                        FormlyAttributeEvent\n                    \n                \n                \n                    \n                        FormlyAttributeEvent:     function\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FORMLY_CONFIG_TOKEN   (src/.../formly.config.ts)\n                        \n                        \n                            FORMLY_VALIDATORS   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/src/services/formly.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FORMLY_CONFIG_TOKEN\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        FORMLY_CONFIG_TOKEN:     \n\n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('FORMLY_CONFIG_TOKEN')\n                        \n                    \n\n\n            \n        \n\n    src/core/src/utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FORMLY_VALIDATORS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        FORMLY_VALIDATORS:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max']\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
